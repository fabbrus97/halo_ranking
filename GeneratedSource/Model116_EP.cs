// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;
using Microsoft.ML.Probabilistic.Collections;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.4.2203.202 at 15:34 on gioved√¨ 14 luglio 2022.
	/// </remarks>
	public partial class Model116_EP : IGeneratedAlgorithm
	{
		#region Fields
		public double[][] Avg_play_time_team_reduced;
		/// <summary>True if Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam1 has executed. Set this to false to force re-execution of Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam1</summary>
		public bool Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam1_isDone;
		/// <summary>True if Changed_deathcount_PlayerInTeam has executed. Set this to false to force re-execution of Changed_deathcount_PlayerInTeam</summary>
		public bool Changed_deathcount_PlayerInTeam_isDone;
		/// <summary>True if Changed_killcount_PlayerInTeam has executed. Set this to false to force re-execution of Changed_killcount_PlayerInTeam</summary>
		public bool Changed_killcount_PlayerInTeam_isDone;
		/// <summary>True if Changed_Match_time_m has executed. Set this to false to force re-execution of Changed_Match_time_m</summary>
		public bool Changed_Match_time_m_isDone;
		/// <summary>True if Changed_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1010 has executed. Set this to false to force re-execution of Changed_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1010</summary>
		public bool Changed_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1010_isDone;
		/// <summary>True if Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl14 has executed. Set this to false to force re-execution of Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl14</summary>
		public bool Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl14_isDone;
		/// <summary>True if Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl14 has performed initialisation. Set this to false to force re-execution of Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl14</summary>
		public bool Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl14_isInitialised;
		/// <summary>True if Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1013 has executed. Set this to false to force re-execution of Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1013</summary>
		public bool Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1013_isDone;
		/// <summary>True if Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1013 has performed initialisation. Set this to false to force re-execution of Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1013</summary>
		public bool Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1013_isInitialised;
		/// <summary>True if Changed_Match_time_m_p_time_m__t__n_PlayerInTeam has executed. Set this to false to force re-execution of Changed_Match_time_m_p_time_m__t__n_PlayerInTeam</summary>
		public bool Changed_Match_time_m_p_time_m__t__n_PlayerInTeam_isDone;
		/// <summary>True if Changed_numberOfIterations_PlayerIndex_PlayerInTeam_time_passed_vdouble__1010_vdouble__1011_vint__2617 has executed. Set this to false to force re-execution of Changed_numberOfIterations_PlayerIndex_PlayerInTeam_time_passed_vdouble__1010_vdouble__1011_vint__2617</summary>
		public bool Changed_numberOfIterations_PlayerIndex_PlayerInTeam_time_passed_vdouble__1010_vdouble__1011_vint__2617_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde2 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde2</summary>
		public bool Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde2_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde2 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde2</summary>
		public bool Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde2_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdoubl16 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdoubl16</summary>
		public bool Changed_numberOfIterationsDecreased_Init_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdoubl16_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdoubl16 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdoubl16</summary>
		public bool Changed_numberOfIterationsDecreased_Init_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdoubl16_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__112 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__112</summary>
		public bool Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__112_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__112 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__112</summary>
		public bool Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__112_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__1023_Init_deathc11 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__1023_Init_deathc11</summary>
		public bool Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__1023_Init_deathc11_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__1023_Init_deathc11 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__1023_Init_deathc11</summary>
		public bool Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__1023_Init_deathc11_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__266_Init_time_passed_vdouble__10119 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__266_Init_time_passed_vdouble__10119</summary>
		public bool Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__266_Init_time_passed_vdouble__10119_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__266_Init_time_passed_vdouble__10119 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__266_Init_time_passed_vdouble__10119</summary>
		public bool Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__266_Init_time_passed_vdouble__10119_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5</summary>
		public bool Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5</summary>
		public bool Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_7 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_7</summary>
		public bool Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_7_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_7 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_7</summary>
		public bool Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_7_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_vdouble__1022_vdouble__1023_Init_deathcount_killcount_Match_time10 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_vdouble__1022_vdouble__1023_Init_deathcount_killcount_Match_time10</summary>
		public bool Changed_numberOfIterationsDecreased_vdouble__1022_vdouble__1023_Init_deathcount_killcount_Match_time10_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_vdouble__1022_vdouble__1023_Init_deathcount_killcount_Match_time10 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_vdouble__1022_vdouble__1023_Init_deathcount_killcount_Match_time10</summary>
		public bool Changed_numberOfIterationsDecreased_vdouble__1022_vdouble__1023_Init_deathcount_killcount_Match_time10_isInitialised;
		/// <summary>True if Changed_p_time_m__t__n_PlayerInTeam has executed. Set this to false to force re-execution of Changed_p_time_m__t__n_PlayerInTeam</summary>
		public bool Changed_p_time_m__t__n_PlayerInTeam_isDone;
		/// <summary>True if Changed_PlayerIndex has executed. Set this to false to force re-execution of Changed_PlayerIndex</summary>
		public bool Changed_PlayerIndex_isDone;
		/// <summary>True if Changed_PlayerIndex_PlayerInTeam_vint__266 has executed. Set this to false to force re-execution of Changed_PlayerIndex_PlayerInTeam_vint__266</summary>
		public bool Changed_PlayerIndex_PlayerInTeam_vint__266_isDone;
		/// <summary>True if Changed_PlayerInTeam has executed. Set this to false to force re-execution of Changed_PlayerInTeam</summary>
		public bool Changed_PlayerInTeam_isDone;
		/// <summary>True if Changed_PlayerInTeam_quit has executed. Set this to false to force re-execution of Changed_PlayerInTeam_quit</summary>
		public bool Changed_PlayerInTeam_quit_isDone;
		/// <summary>True if Changed_PlayerInTeam_time_passed has executed. Set this to false to force re-execution of Changed_PlayerInTeam_time_passed</summary>
		public bool Changed_PlayerInTeam_time_passed_isDone;
		/// <summary>True if Changed_team2wins has executed. Set this to false to force re-execution of Changed_team2wins</summary>
		public bool Changed_team2wins_isDone;
		/// <summary>True if Changed_vdouble__1009 has executed. Set this to false to force re-execution of Changed_vdouble__1009</summary>
		public bool Changed_vdouble__1009_isDone;
		/// <summary>True if Changed_vdouble__1010 has executed. Set this to false to force re-execution of Changed_vdouble__1010</summary>
		public bool Changed_vdouble__1010_isDone;
		/// <summary>True if Changed_vdouble__1011 has executed. Set this to false to force re-execution of Changed_vdouble__1011</summary>
		public bool Changed_vdouble__1011_isDone;
		/// <summary>True if Changed_vdouble__1022 has executed. Set this to false to force re-execution of Changed_vdouble__1022</summary>
		public bool Changed_vdouble__1022_isDone;
		/// <summary>True if Changed_vdouble__1022_vdouble__1023 has executed. Set this to false to force re-execution of Changed_vdouble__1022_vdouble__1023</summary>
		public bool Changed_vdouble__1022_vdouble__1023_isDone;
		/// <summary>True if Changed_vdouble__1023 has executed. Set this to false to force re-execution of Changed_vdouble__1023</summary>
		public bool Changed_vdouble__1023_isDone;
		/// <summary>True if Changed_vdouble__1035 has executed. Set this to false to force re-execution of Changed_vdouble__1035</summary>
		public bool Changed_vdouble__1035_isDone;
		/// <summary>True if Changed_vint____118 has executed. Set this to false to force re-execution of Changed_vint____118</summary>
		public bool Changed_vint____118_isDone;
		/// <summary>True if Changed_vint__266 has executed. Set this to false to force re-execution of Changed_vint__266</summary>
		public bool Changed_vint__266_isDone;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		/// <summary>Field backing the deathcount property</summary>
		private double[][][] Deathcount;
		/// <summary>Message to marginal of 'deathcount'</summary>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> deathcount_marginal_F;
		/// <summary>Messages from uses of 'Diff_2_'</summary>
		public Gaussian[][] Diff_2__uses_B;
		/// <summary>Field backing the killcount property</summary>
		private double[][][] Killcount;
		/// <summary>Message to marginal of 'killcount'</summary>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> killcount_marginal_F;
		/// <summary>Field backing the Match_time_m property</summary>
		private double[] match_time_m;
		/// <summary>Message to marginal of 'Match_time_m'</summary>
		public DistributionStructArray<Gaussian,double> Match_time_m_marginal_F;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Field backing the p_time_m__t__n property</summary>
		private double[][][] P_time_m__t__n;
		/// <summary>Message to marginal of 'p_time_m__t__n'</summary>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> p_time_m__t__n_marginal_F;
		public Gaussian[][][] perf_from_ds_F;
		public Gaussian[][][] perf_n_m_F;
		public Gaussian[][][] Perfomance_opposing_team_0__F;
		public Gaussian[][][] Perfomance_opposing_team_1__F;
		public Gaussian[][][] Perfomance_opposing_team_F;
		/// <summary>Messages from uses of 'Perfomance_opposing_team'</summary>
		public Gaussian[][][][] Perfomance_opposing_team_uses_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Gaussian&gt;</summary>
		public Gaussian[][][] Perfomance_opposing_team_uses_B_toDef;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Gaussian&gt;</summary>
		public Gaussian[][][] Perfomance_opposing_team_uses_B_toDef2;
		/// <summary>Messages to uses of 'Perfomance_opposing_team'</summary>
		public Gaussian[][][][] Perfomance_opposing_team_uses_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Gaussian&gt;</summary>
		public Gaussian[][][] Perfomance_opposing_team_uses_F_marginal;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Gaussian&gt;</summary>
		public Gaussian[][][] Perfomance_opposing_team_uses_F_marginal2;
		public DistributionStructArray<Gaussian,double>[][][] player_perf_t__n_0_0__B;
		public DistributionStructArray<Gaussian,double>[][][] player_perf_t__n_1_1__B;
		public DistributionStructArray<Gaussian,double>[][] player_perf_t__n_depth1_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>[] player_perf_t__n_F;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;DistributionStructArray&lt;Gaussian, double&gt;&gt;</summary>
		public DistributionStructArray<Gaussian,double>[][] player_perf_t__n_item0_rep_B_toDef;
		public DistributionStructArray<Gaussian,double>[][][] player_perf_t__n_item0_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;DistributionStructArray&lt;Gaussian, double&gt;&gt;</summary>
		public DistributionStructArray<Gaussian,double>[][] player_perf_t__n_item0_rep_F_marginal;
		/// <summary>Messages from uses of 'player_perf_t__n_item0'</summary>
		public DistributionStructArray<Gaussian,double>[][] player_perf_t__n_item0_uses_B;
		/// <summary>Messages to uses of 'player_perf_t__n_item0'</summary>
		public DistributionStructArray<Gaussian,double>[][] player_perf_t__n_item0_uses_F;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;DistributionStructArray&lt;Gaussian, double&gt;&gt;</summary>
		public DistributionStructArray<Gaussian,double>[][] player_perf_t__n_item1_rep_B_toDef;
		/// <summary>Messages from uses of 'player_perf_t__n_item1'</summary>
		public DistributionStructArray<Gaussian,double>[][] player_perf_t__n_item1_uses_B;
		/// <summary>Messages to uses of 'player_perf_t__n_item1'</summary>
		public DistributionStructArray<Gaussian,double>[][] player_perf_t__n_item1_uses_F;
		/// <summary>Messages from uses of 'player_perf_t__n'</summary>
		public Gaussian[][][][] player_perf_t__n_uses_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Gaussian&gt;</summary>
		public Gaussian[][][] player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef;
		/// <summary>Messages to uses of 'player_perf_t__n'</summary>
		public Gaussian[][][][] player_perf_t__n_uses_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Gaussian&gt;</summary>
		public Gaussian[][][] player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal;
		/// <summary>Field backing the PlayerIndex property</summary>
		private int[][][] playerIndex;
		/// <summary>Message to marginal of 'PlayerIndex'</summary>
		public PointMass<int[][][]> PlayerIndex_marginal_F;
		/// <summary>Field backing the PlayerInTeam property</summary>
		private int[][] playerInTeam;
		/// <summary>Message to marginal of 'PlayerInTeam'</summary>
		public PointMass<int[][]> PlayerInTeam_marginal_F;
		/// <summary>Field backing the quit property</summary>
		private bool[][][] Quit;
		/// <summary>Message to marginal of 'quit'</summary>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]> quit_marginal_F;
		public DistributionStructArray<Gaussian,double> skills_prior_F;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F;
		/// <summary>Message to marginal of 'skills_prior'</summary>
		public DistributionStructArray<Gaussian,double> skills_prior_marginal_F;
		/// <summary>Message from use of 'skills_prior'</summary>
		public DistributionStructArray<Gaussian,double> skills_prior_use_B;
		/// <summary>Buffer for GetDeepJaggedItemsOp&lt;double&gt;.ItemsAverageConditional&lt;DistributionStructArray&lt;Gaussian, double&gt;, DistributionRefArray&lt;DistributionStructArray&lt;Gaussian, double&gt;, double[]&gt;, DistributionStructArray&lt;Gaussian, double&gt;, Gaussian&gt;</summary>
		public DistributionStructArray<Gaussian,double> skills_prior_use_F_marginal;
		/// <summary>Field backing the team2wins property</summary>
		private int[] Team2wins;
		/// <summary>Message to marginal of 'team2wins'</summary>
		public PointMass<int[]> team2wins_marginal_F;
		/// <summary>Field backing the time_passed property</summary>
		private double[][][] Time_passed;
		/// <summary>Message to marginal of 'time_passed'</summary>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> time_passed_marginal_F;
		public Bernoulli[][][] Under_performing_B;
		public Bernoulli[][][] Under_performing_F;
		/// <summary>The constant 'vBernoulli58'</summary>
		public Bernoulli vBernoulli58;
		/// <summary>The constant 'vBernoulli59'</summary>
		public Bernoulli vBernoulli59;
		/// <summary>Message to marginal of 'vbool496'</summary>
		public Bernoulli vbool496_marginal_F;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Bernoulli&gt;</summary>
		public Bernoulli vbool496_rep_B_toDef;
		public Bernoulli[] vbool496_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Bernoulli&gt;</summary>
		public Bernoulli vbool496_rep_F_marginal;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Bernoulli&gt;</summary>
		public Bernoulli[] vbool496_rep_rep_B_toDef;
		public Bernoulli[][] vbool496_rep_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Bernoulli&gt;</summary>
		public Bernoulli[] vbool496_rep_rep_F_marginal;
		public Bernoulli[][][] vbool496_rep_rep_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Bernoulli&gt;</summary>
		public Bernoulli[][] vbool496_rep_rep_rep_B_toDef;
		public Bernoulli[][][] vbool496_rep_rep_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Bernoulli&gt;</summary>
		public Bernoulli[][] vbool496_rep_rep_rep_F_marginal;
		/// <summary>Message to marginal of 'vbool497'</summary>
		public Bernoulli vbool497_marginal_F;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Bernoulli&gt;</summary>
		public Bernoulli vbool497_rep_B_toDef;
		public Bernoulli[] vbool497_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Bernoulli&gt;</summary>
		public Bernoulli vbool497_rep_F_marginal;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Bernoulli&gt;</summary>
		public Bernoulli[] vbool497_rep_rep_B_toDef;
		public Bernoulli[][] vbool497_rep_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Bernoulli&gt;</summary>
		public Bernoulli[] vbool497_rep_rep_F_marginal;
		public Bernoulli[][][] vbool497_rep_rep_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Bernoulli&gt;</summary>
		public Bernoulli[][] vbool497_rep_rep_rep_B_toDef;
		public Bernoulli[][][] vbool497_rep_rep_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Bernoulli&gt;</summary>
		public Bernoulli[][] vbool497_rep_rep_rep_F_marginal;
		public Bernoulli[][][] vbool499_B;
		public Bernoulli[][][] vbool499_F;
		/// <summary>Field backing the vdouble__1009 property</summary>
		private double[] Vdouble__1009;
		/// <summary>Message to marginal of 'vdouble__1009'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__1009_marginal_F;
		/// <summary>Field backing the vdouble__1010 property</summary>
		private double[] Vdouble__1010;
		/// <summary>Message to marginal of 'vdouble__1010'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__1010_marginal_F;
		/// <summary>Field backing the vdouble__1011 property</summary>
		private double[] Vdouble__1011;
		/// <summary>Message to marginal of 'vdouble__1011'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__1011_marginal_F;
		/// <summary>Message to marginal of 'vdouble__1012'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__1012_marginal_F;
		/// <summary>Buffer for VariablePointOp_Rprop.MarginalAverageConditional</summary>
		public RpropBufferData[] vdouble__1012_use_B_nMatches__buffer;
		/// <summary>Message to marginal of 'vdouble__1019'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__1019_marginal_F;
		public Gaussian[][][] vdouble__1019_PlayerIndex_nMatches_nTeamsPerMatch_nPlayersMinusPerTeam_1__B;
		/// <summary>Field backing the vdouble__1022 property</summary>
		private double[] Vdouble__1022;
		/// <summary>Message to marginal of 'vdouble__1022'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__1022_marginal_F;
		/// <summary>Field backing the vdouble__1023 property</summary>
		private double[] Vdouble__1023;
		/// <summary>Message to marginal of 'vdouble__1023'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__1023_marginal_F;
		/// <summary>Field backing the vdouble__1035 property</summary>
		private double[] Vdouble__1035;
		/// <summary>Message to marginal of 'vdouble__1035'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__1035_marginal_F;
		/// <summary>Message to marginal of 'vdouble__1037'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__1037_marginal_F;
		public double[][] vdouble3445_reduced;
		public double[][] vdouble3452_reduced;
		public double[][] vdouble3453_reduced;
		public Gaussian[][][] vdouble3454_F;
		public Gaussian[][][] vdouble3455_F;
		public Gaussian[][][] vdouble3465_F;
		public Gaussian[][][] vdouble3475_F;
		public Gaussian[][][] vdouble3482_B;
		public Gaussian[][][] vdouble3482_F;
		public Gaussian[][][] vdouble3484_B;
		public Gaussian[][][] vdouble3484_F;
		public Gaussian[][][] vdouble3486_F;
		/// <summary>Message from use of 'vdouble3486'</summary>
		public Gaussian[][][] vdouble3486_use_B;
		public Gaussian[][][] vdouble3488_B;
		public Gaussian[][][] vdouble3488_F;
		/// <summary>Field backing the vint____118 property</summary>
		private int[][] Vint____118;
		/// <summary>Message to marginal of 'vint____118'</summary>
		public PointMass<int[][]> vint____118_marginal_F;
		/// <summary>Field backing the vint__266 property</summary>
		private int[] Vint__266;
		/// <summary>Message to marginal of 'vint__266'</summary>
		public PointMass<int[]> vint__266_marginal_F;
		#endregion

		#region Properties
		/// <summary>The externally-specified value of 'deathcount'</summary>
		public double[][][] deathcount
		{
			get {
				return this.Deathcount;
			}
			set {
				if ((value!=null)&&(value.Length!=521)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+521)+" was expected for variable \'deathcount\'");
				}
				this.Deathcount = value;
				this.numberOfIterationsDone = 0;
				this.Changed_deathcount_PlayerInTeam_isDone = false;
				this.Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_7_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde2_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vdouble__1022_vdouble__1023_Init_deathcount_killcount_Match_time10_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__1023_Init_deathc11_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__112_isInitialised = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1013_isInitialised = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl14_isInitialised = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam1_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'killcount'</summary>
		public double[][][] killcount
		{
			get {
				return this.Killcount;
			}
			set {
				if ((value!=null)&&(value.Length!=521)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+521)+" was expected for variable \'killcount\'");
				}
				this.Killcount = value;
				this.numberOfIterationsDone = 0;
				this.Changed_killcount_PlayerInTeam_isDone = false;
				this.Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_7_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde2_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vdouble__1022_vdouble__1023_Init_deathcount_killcount_Match_time10_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__1023_Init_deathc11_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__112_isInitialised = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1013_isInitialised = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl14_isInitialised = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam1_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'Match_time_m'</summary>
		public double[] Match_time_m
		{
			get {
				return this.match_time_m;
			}
			set {
				if ((value!=null)&&(value.Length!=521)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+521)+" was expected for variable \'Match_time_m\'");
				}
				this.match_time_m = value;
				this.numberOfIterationsDone = 0;
				this.Changed_Match_time_m_isDone = false;
				this.Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_7_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdoubl16_isInitialised = false;
				this.Changed_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1010_isDone = false;
				this.Changed_Match_time_m_p_time_m__t__n_PlayerInTeam_isDone = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde2_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vdouble__1022_vdouble__1023_Init_deathcount_killcount_Match_time10_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__1023_Init_deathc11_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__112_isInitialised = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1013_isDone = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl14_isDone = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam1_isDone = false;
			}
		}

		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'p_time_m__t__n'</summary>
		public double[][][] p_time_m__t__n
		{
			get {
				return this.P_time_m__t__n;
			}
			set {
				if ((value!=null)&&(value.Length!=521)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+521)+" was expected for variable \'p_time_m__t__n\'");
				}
				this.P_time_m__t__n = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_7_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdoubl16_isInitialised = false;
				this.Changed_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1010_isDone = false;
				this.Changed_p_time_m__t__n_PlayerInTeam_isDone = false;
				this.Changed_Match_time_m_p_time_m__t__n_PlayerInTeam_isDone = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde2_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vdouble__1022_vdouble__1023_Init_deathcount_killcount_Match_time10_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__1023_Init_deathc11_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__112_isDone = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1013_isDone = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl14_isDone = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam1_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'PlayerIndex'</summary>
		public int[][][] PlayerIndex
		{
			get {
				return this.playerIndex;
			}
			set {
				if ((value!=null)&&(value.Length!=521)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+521)+" was expected for variable \'PlayerIndex\'");
				}
				this.playerIndex = value;
				this.numberOfIterationsDone = 0;
				this.Changed_PlayerIndex_isDone = false;
				this.Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_7_isInitialised = false;
				this.Changed_PlayerIndex_PlayerInTeam_vint__266_isDone = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__266_Init_time_passed_vdouble__10119_isDone = false;
				this.Changed_numberOfIterations_PlayerIndex_PlayerInTeam_time_passed_vdouble__1010_vdouble__1011_vint__2617_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdoubl16_isInitialised = false;
				this.Changed_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1010_isDone = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde2_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vdouble__1022_vdouble__1023_Init_deathcount_killcount_Match_time10_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__1023_Init_deathc11_isDone = false;
				this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__112_isDone = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1013_isDone = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl14_isDone = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam1_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'PlayerInTeam'</summary>
		public int[][] PlayerInTeam
		{
			get {
				return this.playerInTeam;
			}
			set {
				if ((value!=null)&&(value.Length!=521)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+521)+" was expected for variable \'PlayerInTeam\'");
				}
				this.playerInTeam = value;
				this.numberOfIterationsDone = 0;
				this.Changed_PlayerInTeam_time_passed_isDone = false;
				this.Changed_PlayerInTeam_quit_isDone = false;
				this.Changed_deathcount_PlayerInTeam_isDone = false;
				this.Changed_killcount_PlayerInTeam_isDone = false;
				this.Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_7_isInitialised = false;
				this.Changed_PlayerIndex_PlayerInTeam_vint__266_isDone = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__266_Init_time_passed_vdouble__10119_isDone = false;
				this.Changed_numberOfIterations_PlayerIndex_PlayerInTeam_time_passed_vdouble__1010_vdouble__1011_vint__2617_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdoubl16_isInitialised = false;
				this.Changed_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1010_isDone = false;
				this.Changed_PlayerInTeam_isDone = false;
				this.Changed_p_time_m__t__n_PlayerInTeam_isDone = false;
				this.Changed_Match_time_m_p_time_m__t__n_PlayerInTeam_isDone = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde2_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vdouble__1022_vdouble__1023_Init_deathcount_killcount_Match_time10_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__1023_Init_deathc11_isDone = false;
				this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__112_isDone = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1013_isDone = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl14_isDone = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam1_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'quit'</summary>
		public bool[][][] quit
		{
			get {
				return this.Quit;
			}
			set {
				if ((value!=null)&&(value.Length!=521)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+521)+" was expected for variable \'quit\'");
				}
				this.Quit = value;
				this.numberOfIterationsDone = 0;
				this.Changed_PlayerInTeam_quit_isDone = false;
				this.Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_7_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde2_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vdouble__1022_vdouble__1023_Init_deathcount_killcount_Match_time10_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__1023_Init_deathc11_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__112_isInitialised = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1013_isInitialised = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl14_isDone = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam1_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'team2wins'</summary>
		public int[] team2wins
		{
			get {
				return this.Team2wins;
			}
			set {
				if ((value!=null)&&(value.Length!=521)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+521)+" was expected for variable \'team2wins\'");
				}
				this.Team2wins = value;
				this.numberOfIterationsDone = 0;
				this.Changed_team2wins_isDone = false;
				this.Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_7_isDone = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde2_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vdouble__1022_vdouble__1023_Init_deathcount_killcount_Match_time10_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__1023_Init_deathc11_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__112_isInitialised = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1013_isInitialised = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl14_isInitialised = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam1_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'time_passed'</summary>
		public double[][][] time_passed
		{
			get {
				return this.Time_passed;
			}
			set {
				if ((value!=null)&&(value.Length!=521)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+521)+" was expected for variable \'time_passed\'");
				}
				this.Time_passed = value;
				this.numberOfIterationsDone = 0;
				this.Changed_PlayerInTeam_time_passed_isDone = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__266_Init_time_passed_vdouble__10119_isInitialised = false;
				this.Changed_numberOfIterations_PlayerIndex_PlayerInTeam_time_passed_vdouble__1010_vdouble__1011_vint__2617_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vdouble__1009'</summary>
		public double[] vdouble__1009
		{
			get {
				return this.Vdouble__1009;
			}
			set {
				if ((value!=null)&&(value.Length!=200)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+200)+" was expected for variable \'vdouble__1009\'");
				}
				this.Vdouble__1009 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vdouble__1009_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vdouble__1010'</summary>
		public double[] vdouble__1010
		{
			get {
				return this.Vdouble__1010;
			}
			set {
				if ((value!=null)&&(value.Length!=3585)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+3585)+" was expected for variable \'vdouble__1010\'");
				}
				this.Vdouble__1010 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vdouble__1010_isDone = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__266_Init_time_passed_vdouble__10119_isInitialised = false;
				this.Changed_numberOfIterations_PlayerIndex_PlayerInTeam_time_passed_vdouble__1010_vdouble__1011_vint__2617_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdoubl16_isInitialised = false;
				this.Changed_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1010_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vdouble__1011'</summary>
		public double[] vdouble__1011
		{
			get {
				return this.Vdouble__1011;
			}
			set {
				if ((value!=null)&&(value.Length!=3585)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+3585)+" was expected for variable \'vdouble__1011\'");
				}
				this.Vdouble__1011 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vdouble__1011_isDone = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__266_Init_time_passed_vdouble__10119_isInitialised = false;
				this.Changed_numberOfIterations_PlayerIndex_PlayerInTeam_time_passed_vdouble__1010_vdouble__1011_vint__2617_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vdouble__1022'</summary>
		public double[] vdouble__1022
		{
			get {
				return this.Vdouble__1022;
			}
			set {
				if ((value!=null)&&(value.Length!=3585)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+3585)+" was expected for variable \'vdouble__1022\'");
				}
				this.Vdouble__1022 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vdouble__1022_isDone = false;
				this.Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_7_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5_isInitialised = false;
				this.Changed_vdouble__1022_vdouble__1023_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde2_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vdouble__1022_vdouble__1023_Init_deathcount_killcount_Match_time10_isDone = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__1023_Init_deathc11_isDone = false;
				this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__112_isDone = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1013_isDone = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl14_isDone = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam1_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vdouble__1023'</summary>
		public double[] vdouble__1023
		{
			get {
				return this.Vdouble__1023;
			}
			set {
				if ((value!=null)&&(value.Length!=3585)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+3585)+" was expected for variable \'vdouble__1023\'");
				}
				this.Vdouble__1023 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vdouble__1023_isDone = false;
				this.Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_7_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5_isInitialised = false;
				this.Changed_vdouble__1022_vdouble__1023_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde2_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vdouble__1022_vdouble__1023_Init_deathcount_killcount_Match_time10_isDone = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__1023_Init_deathc11_isDone = false;
				this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__112_isDone = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1013_isDone = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl14_isDone = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam1_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vdouble__1035'</summary>
		public double[] vdouble__1035
		{
			get {
				return this.Vdouble__1035;
			}
			set {
				if ((value!=null)&&(value.Length!=3585)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+3585)+" was expected for variable \'vdouble__1035\'");
				}
				this.Vdouble__1035 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vdouble__1035_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vint____118'</summary>
		public int[][] vint____118
		{
			get {
				return this.Vint____118;
			}
			set {
				if ((value!=null)&&(value.Length!=3585)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+3585)+" was expected for variable \'vint____118\'");
				}
				this.Vint____118 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vint____118_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vint__266'</summary>
		public int[] vint__266
		{
			get {
				return this.Vint__266;
			}
			set {
				if ((value!=null)&&(value.Length!=3585)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+3585)+" was expected for variable \'vint__266\'");
				}
				this.Vint__266 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vint__266_isDone = false;
				this.Changed_PlayerIndex_PlayerInTeam_vint__266_isDone = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__266_Init_time_passed_vdouble__10119_isDone = false;
				this.Changed_numberOfIterations_PlayerIndex_PlayerInTeam_time_passed_vdouble__1010_vdouble__1011_vint__2617_isDone = false;
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of deathcount and killcount and Match_time_m and numberOfIterations and p_time_m__t__n and PlayerIndex and PlayerInTeam and quit and team2wins and vdouble__1022 and vdouble__1023</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam1(int numberOfIterations)
		{
			if (this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam1_isDone) {
				return ;
			}
			this.vbool496_marginal_F = Bernoulli.Uniform();
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for 'player_perf_t__n_item1_uses' Forwards messages.
				this.player_perf_t__n_item1_uses_F[nMatches][1] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][1]);
				for(int _a4 = 0; _a4<this.playerInTeam[nMatches][1]; _a4++) {
					this.player_perf_t__n_item1_uses_F[nMatches][1][_a4] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'SumTeam2_F'
			Gaussian[] SumTeam2_F = new Gaussian[521];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				SumTeam2_F[nMatches] = Gaussian.Uniform();
				// Create array for 'player_perf_t__n_item0_uses' Forwards messages.
				this.player_perf_t__n_item0_uses_F[nMatches][1] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][0]);
				for(int _a3 = 0; _a3<this.playerInTeam[nMatches][0]; _a3++) {
					this.player_perf_t__n_item0_uses_F[nMatches][1][_a3] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'SumTeam1_F'
			Gaussian[] SumTeam1_F = new Gaussian[521];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				SumTeam1_F[nMatches] = Gaussian.Uniform();
			}
			// Create array for replicates of 'Diff_F'
			Gaussian[] Diff_F = new Gaussian[521];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				Diff_F[nMatches] = Gaussian.Uniform();
			}
			// Create array for replicates of 'Diff_2__uses_F'
			Gaussian[][] Diff_2__uses_F = new Gaussian[521][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					// Create array for 'Diff_2__uses' Forwards messages.
					Diff_2__uses_F[nMatches] = new Gaussian[2];
					Diff_2__uses_F[nMatches][1] = Gaussian.Uniform();
					Diff_2__uses_F[nMatches][0] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble3495_F'
			Gaussian[] vdouble3495_F = new Gaussian[521];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					vdouble3495_F[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vbool505_B'
			Bernoulli[] vbool505_B = new Bernoulli[521];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					vbool505_B[nMatches] = Bernoulli.Uniform();
					// Message to 'vbool505' from Not factor
					vbool505_B[nMatches] = BooleanNotOp.BAverageConditional(true);
				}
			}
			// Create array for replicates of 'vdouble3495_B'
			Gaussian[] vdouble3495_B = new Gaussian[521];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					vdouble3495_B[nMatches] = Gaussian.Uniform();
					this.Diff_2__uses_B[nMatches][1] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble3493_F'
			Gaussian[] vdouble3493_F = new Gaussian[521];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					vdouble3493_F[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vbool502_B'
			Bernoulli[] vbool502_B = new Bernoulli[521];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					vbool502_B[nMatches] = Bernoulli.Uniform();
					// Message to 'vbool502' from Not factor
					vbool502_B[nMatches] = BooleanNotOp.BAverageConditional(true);
				}
			}
			// Create array for replicates of 'vdouble3493_B'
			Gaussian[] vdouble3493_B = new Gaussian[521];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					vdouble3493_B[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'Diff_2__B'
			Gaussian[] Diff_2__B = new Gaussian[521];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					Diff_2__B[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'Diff_B'
			Gaussian[] Diff_B = new Gaussian[521];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				Diff_B[nMatches] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble3497_F'
			Gaussian[] vdouble3497_F = new Gaussian[521];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				if (this.Team2wins[nMatches]==0) {
					vdouble3497_F[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble3497_B'
			Gaussian[] vdouble3497_B = new Gaussian[521];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				if (this.Team2wins[nMatches]==0) {
					vdouble3497_B[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'Diff_0__B'
			Gaussian[] Diff_0__B = new Gaussian[521];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				if (this.Team2wins[nMatches]==0) {
					Diff_0__B[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble3499_F'
			Gaussian[] vdouble3499_F = new Gaussian[521];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				if (this.Team2wins[nMatches]==1) {
					vdouble3499_F[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble3499_B'
			Gaussian[] vdouble3499_B = new Gaussian[521];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				if (this.Team2wins[nMatches]==1) {
					vdouble3499_B[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'Diff_1__B'
			Gaussian[] Diff_1__B = new Gaussian[521];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				if (this.Team2wins[nMatches]==1) {
					Diff_1__B[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'SumTeam2_B'
			Gaussian[] SumTeam2_B = new Gaussian[521];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				SumTeam2_B[nMatches] = Gaussian.Uniform();
				// Create array for 'player_perf_t__n_item1_uses' Backwards messages.
				this.player_perf_t__n_item1_uses_B[nMatches][1] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][1]);
				for(int _a4 = 0; _a4<this.playerInTeam[nMatches][1]; _a4++) {
					this.player_perf_t__n_item1_uses_B[nMatches][1][_a4] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'player_perf_t__n_item1_rep_F_marginal'
			DistributionStructArray<Gaussian,double>[][] player_perf_t__n_item1_rep_F_marginal = new DistributionStructArray<Gaussian,double>[521][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'player_perf_t__n_item1_rep_F_marginal'
				player_perf_t__n_item1_rep_F_marginal[nMatches] = new DistributionStructArray<Gaussian,double>[2];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					if (nTeamsPerMatch==1) {
						player_perf_t__n_item1_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.MarginalInit<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item1_uses_F[nMatches][0]);
					}
				}
			}
			// Create array for replicates of 'player_perf_t__n_item1_rep_F'
			DistributionStructArray<Gaussian,double>[][][] player_perf_t__n_item1_rep_F = new DistributionStructArray<Gaussian,double>[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'player_perf_t__n_item1_rep_F'
				player_perf_t__n_item1_rep_F[nMatches] = new DistributionStructArray<Gaussian,double>[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					if (nTeamsPerMatch==1) {
						// Create array for 'player_perf_t__n_item1_rep' Forwards messages.
						player_perf_t__n_item1_rep_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>[this.playerInTeam[nMatches][nTeamsPerMatch]];
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Create array for 'player_perf_t__n_item1_rep' Forwards messages.
							player_perf_t__n_item1_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][1]);
							for(int _a4 = 0; _a4<this.playerInTeam[nMatches][1]; _a4++) {
								player_perf_t__n_item1_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][_a4] = Gaussian.Uniform();
							}
						}
					}
				}
			}
			// Create array for replicates of 'vdouble3459_F'
			Gaussian[][][] vdouble3459_F = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vdouble3459_F'
				vdouble3459_F[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble3459_F'
					vdouble3459_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						if (nTeamsPerMatch==1) {
							vdouble3459_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						}
					}
				}
			}
			double[][] vdouble3457_reduced = new double[521][];
			double[][] vdouble3458_reduced = new double[521][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				vdouble3457_reduced[nMatches] = new double[2];
				vdouble3458_reduced[nMatches] = new double[2];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					vdouble3457_reduced[nMatches][nTeamsPerMatch] = default(double);
					vdouble3458_reduced[nMatches][nTeamsPerMatch] = default(double);
					if (this.playerInTeam[nMatches][nTeamsPerMatch]>0) {
						if (nTeamsPerMatch==1) {
							vdouble3457_reduced[nMatches][nTeamsPerMatch] = Factor.Sum(this.P_time_m__t__n[nMatches][0]);
							vdouble3458_reduced[nMatches][nTeamsPerMatch] = Factor.Ratio(vdouble3457_reduced[nMatches][nTeamsPerMatch], this.match_time_m[nMatches]);
						}
					}
				}
			}
			// Create array for replicates of 'vdouble3460_F'
			Gaussian[][][] vdouble3460_F = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vdouble3460_F'
				vdouble3460_F[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble3460_F'
					vdouble3460_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						if (nTeamsPerMatch==1) {
							vdouble3460_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						}
					}
				}
			}
			// Create array for replicates of 'vc_Times_p_time'
			double[][][] vc_Times_p_time = new double[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vc_Times_p_time'
				vc_Times_p_time[nMatches] = new double[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vc_Times_p_time'
					vc_Times_p_time[nMatches][nTeamsPerMatch] = new double[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vc_Times_p_time[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Factor.Product(0.00015786992513884733, this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
					}
				}
			}
			// Create array for replicates of 'vdouble3476_F'
			Gaussian[][][] vdouble3476_F = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vdouble3476_F'
				vdouble3476_F[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble3476_F'
					vdouble3476_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble3476_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'death_count_m__t__n_F'
			Gaussian[][][] death_count_m__t__n_F = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'death_count_m__t__n_F'
				death_count_m__t__n_F[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'death_count_m__t__n_F'
					death_count_m__t__n_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						death_count_m__t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble3479_F'
			Gaussian[][][] vdouble3479_F = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vdouble3479_F'
				vdouble3479_F[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble3479_F'
					vdouble3479_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble3479_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble3479_use_B'
			Gaussian[][][] vdouble3479_use_B = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vdouble3479_use_B'
				vdouble3479_use_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble3479_use_B'
					vdouble3479_use_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble3479_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'death_count_m__t__n_B'
			Gaussian[][][] death_count_m__t__n_B = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'death_count_m__t__n_B'
				death_count_m__t__n_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'death_count_m__t__n_B'
					death_count_m__t__n_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						death_count_m__t__n_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble3476_B'
			Gaussian[][][] vdouble3476_B = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vdouble3476_B'
				vdouble3476_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble3476_B'
					vdouble3476_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble3476_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble3473_B'
			Gaussian[][][] vdouble3473_B = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vdouble3473_B'
				vdouble3473_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble3473_B'
					vdouble3473_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble3473_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = Gaussian.Uniform();
						this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble3473_F'
			Gaussian[][][] vdouble3473_F = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vdouble3473_F'
				vdouble3473_F[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble3473_F'
					vdouble3473_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble3473_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble3475_B'
			Gaussian[][][] vdouble3475_B = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vdouble3475_B'
				vdouble3475_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble3475_B'
					vdouble3475_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble3475_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble3466_F'
			Gaussian[][][] vdouble3466_F = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vdouble3466_F'
				vdouble3466_F[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble3466_F'
					vdouble3466_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble3466_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'kill_count_m__t__n_F'
			Gaussian[][][] kill_count_m__t__n_F = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'kill_count_m__t__n_F'
				kill_count_m__t__n_F[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'kill_count_m__t__n_F'
					kill_count_m__t__n_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						kill_count_m__t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble3469_F'
			Gaussian[][][] vdouble3469_F = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vdouble3469_F'
				vdouble3469_F[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble3469_F'
					vdouble3469_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble3469_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble3469_use_B'
			Gaussian[][][] vdouble3469_use_B = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vdouble3469_use_B'
				vdouble3469_use_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble3469_use_B'
					vdouble3469_use_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble3469_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'kill_count_m__t__n_B'
			Gaussian[][][] kill_count_m__t__n_B = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'kill_count_m__t__n_B'
				kill_count_m__t__n_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'kill_count_m__t__n_B'
					kill_count_m__t__n_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						kill_count_m__t__n_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble3466_B'
			Gaussian[][][] vdouble3466_B = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vdouble3466_B'
				vdouble3466_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble3466_B'
					vdouble3466_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble3466_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble3463_B'
			Gaussian[][][] vdouble3463_B = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vdouble3463_B'
				vdouble3463_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble3463_B'
					vdouble3463_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble3463_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble3463_F'
			Gaussian[][][] vdouble3463_F = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vdouble3463_F'
				vdouble3463_F[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble3463_F'
					vdouble3463_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble3463_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble3465_B'
			Gaussian[][][] vdouble3465_B = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vdouble3465_B'
				vdouble3465_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble3465_B'
					vdouble3465_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble3465_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble3460_B'
			Gaussian[][][] vdouble3460_B = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vdouble3460_B'
				vdouble3460_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble3460_B'
					vdouble3460_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						if (nTeamsPerMatch==1) {
							vdouble3460_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						}
					}
				}
			}
			// Create array for replicates of 'vdouble3459_B'
			Gaussian[][][] vdouble3459_B = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vdouble3459_B'
				vdouble3459_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble3459_B'
					vdouble3459_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						if (nTeamsPerMatch==1) {
							vdouble3459_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						}
					}
				}
			}
			// Create array for replicates of 'player_perf_t__n_item1_B'
			DistributionStructArray<Gaussian,double>[] player_perf_t__n_item1_B = new DistributionStructArray<Gaussian,double>[521];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for 'player_perf_t__n_item1' Backwards messages.
				player_perf_t__n_item1_B[nMatches] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][1]);
				for(int _a4 = 0; _a4<this.playerInTeam[nMatches][1]; _a4++) {
					player_perf_t__n_item1_B[nMatches][_a4] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'SumTeam1_B'
			Gaussian[] SumTeam1_B = new Gaussian[521];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				SumTeam1_B[nMatches] = Gaussian.Uniform();
				// Create array for 'player_perf_t__n_item0_uses' Backwards messages.
				this.player_perf_t__n_item0_uses_B[nMatches][0] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][0]);
				for(int _a3 = 0; _a3<this.playerInTeam[nMatches][0]; _a3++) {
					this.player_perf_t__n_item0_uses_B[nMatches][0][_a3] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'Perfomance_opposing_team_B'
			Gaussian[][][] Perfomance_opposing_team_B = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'Perfomance_opposing_team_B'
				Perfomance_opposing_team_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'Perfomance_opposing_team_B'
					Perfomance_opposing_team_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						Perfomance_opposing_team_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble3455_B'
			Gaussian[][][] vdouble3455_B = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vdouble3455_B'
				vdouble3455_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble3455_B'
					vdouble3455_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						if (nTeamsPerMatch==0) {
							vdouble3455_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						}
					}
				}
			}
			// Create array for replicates of 'vdouble3454_B'
			Gaussian[][][] vdouble3454_B = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vdouble3454_B'
				vdouble3454_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble3454_B'
					vdouble3454_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						if (nTeamsPerMatch==0) {
							vdouble3454_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						}
					}
				}
			}
			// Create array for replicates of 'player_perf_t__n_item0_B'
			DistributionStructArray<Gaussian,double>[] player_perf_t__n_item0_B = new DistributionStructArray<Gaussian,double>[521];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for 'player_perf_t__n_item0' Backwards messages.
				player_perf_t__n_item0_B[nMatches] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][0]);
				for(int _a3 = 0; _a3<this.playerInTeam[nMatches][0]; _a3++) {
					player_perf_t__n_item0_B[nMatches][_a3] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'perf_n_m_B'
			Gaussian[][][] perf_n_m_B = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'perf_n_m_B'
				perf_n_m_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'perf_n_m_B'
					perf_n_m_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						perf_n_m_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'perf_from_ds_use_B'
			Gaussian[][][] perf_from_ds_use_B = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'perf_from_ds_use_B'
				perf_from_ds_use_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'perf_from_ds_use_B'
					perf_from_ds_use_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						perf_from_ds_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				this.skills_prior_use_F_marginal = GetDeepJaggedItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.skills_prior_F, this.skills_prior_use_B, this.skills_prior_use_F_marginal);
				for(int nMatches = 0; nMatches<521; nMatches++) {
					// Message to 'skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' from GetDeepJaggedItems factor
					this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F[nMatches] = GetDeepJaggedItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>,Gaussian>(this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B[nMatches], this.skills_prior_F, this.skills_prior_use_F_marginal, this.playerIndex, nMatches, this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F[nMatches]);
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Message to 'perf_from_ds' from Gaussian factor
							this.perf_from_ds_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.SampleAverageConditional(this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 1.0);
							// Message to 'perf_n_m' from Product factor
							this.perf_n_m_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(this.perf_from_ds_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'player_perf_t__n' from Ratio factor
							this.player_perf_t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.RatioAverageConditional(this.perf_n_m_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.match_time_m[nMatches]);
							this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.Marginal<Gaussian>(this.player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'player_perf_t__n_uses' from Replicate factor
							this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3], this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 3, this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3]);
							// Message to 'player_perf_t__n_uses' from Replicate factor
							this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1], this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 1, this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
							// Message to 'player_perf_t__n_uses' from Replicate factor
							this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2], this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 2, this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2]);
							// Message to 'player_perf_t__n_uses' from Replicate factor
							this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0], this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0, this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]);
						}
					}
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][0]; nPlayersMinusPerTeam++) {
						// Message to 'player_perf_t__n_depth1' from Copy factor
						this.player_perf_t__n_depth1_F[nMatches][0][nPlayersMinusPerTeam] = ArrayHelper.SetTo<Gaussian>(this.player_perf_t__n_depth1_F[nMatches][0][nPlayersMinusPerTeam], this.player_perf_t__n_uses_F[nMatches][0][nPlayersMinusPerTeam][0]);
					}
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][1]; nPlayersMinusPerTeam++) {
						// Message to 'player_perf_t__n_depth1' from Copy factor
						this.player_perf_t__n_depth1_F[nMatches][1][nPlayersMinusPerTeam] = ArrayHelper.SetTo<Gaussian>(this.player_perf_t__n_depth1_F[nMatches][1][nPlayersMinusPerTeam], this.player_perf_t__n_uses_F[nMatches][1][nPlayersMinusPerTeam][0]);
					}
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Message to 'vdouble3482' from Difference factor
							this.vdouble3482_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.AAverageConditional(this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3], this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2]);
							// Message to 'vdouble3484' from Difference factor
							this.vdouble3484_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.AAverageConditional(this.vdouble3482_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 871.06018724773276);
							// Message to 'vdouble3486' from Gaussian factor
							this.vdouble3486_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.SampleAverageConditional(this.vdouble3484_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 9.1841710153738614E-06);
							// Message to 'vdouble3488' from Difference factor
							this.vdouble3488_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.AAverageConditional(0.0, this.vdouble3486_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'Under_performing' from IsPositive factor
							this.Under_performing_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = IsPositiveOp.IsPositiveAverageConditional(this.vdouble3488_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vbool499' from And factor
							this.vbool499_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = BooleanAndOp.AndAverageConditional(this.vbool496_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Under_performing_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vbool497_rep_rep_rep' from Or factor
							this.vbool497_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = BooleanOrOp.AAverageConditional(this.Quit[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vbool499_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						}
						this.vbool497_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool497_rep_rep_rep_B[nMatches][nTeamsPerMatch], this.vbool497_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch]);
					}
					this.vbool497_rep_rep_B_toDef[nMatches] = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool497_rep_rep_rep_B_toDef[nMatches], this.vbool497_rep_rep_B_toDef[nMatches]);
				}
				this.vbool497_rep_B_toDef = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool497_rep_rep_B_toDef, this.vbool497_rep_B_toDef);
				this.vbool497_rep_F_marginal = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool497_rep_B_toDef, this.vBernoulli59, this.vbool497_rep_F_marginal);
				for(int nMatches = 0; nMatches<521; nMatches++) {
					// Message to 'vbool497_rep' from Replicate factor
					this.vbool497_rep_F[nMatches] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool497_rep_rep_B_toDef[nMatches], this.vbool497_rep_F_marginal, nMatches, this.vbool497_rep_F[nMatches]);
					this.vbool497_rep_rep_F_marginal[nMatches] = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool497_rep_rep_B_toDef[nMatches], this.vbool497_rep_F[nMatches], this.vbool497_rep_rep_F_marginal[nMatches]);
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						// Message to 'vbool497_rep_rep' from Replicate factor
						this.vbool497_rep_rep_F[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool497_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch], this.vbool497_rep_rep_F_marginal[nMatches], nTeamsPerMatch, this.vbool497_rep_rep_F[nMatches][nTeamsPerMatch]);
						this.vbool497_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool497_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch], this.vbool497_rep_rep_F[nMatches][nTeamsPerMatch], this.vbool497_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch]);
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Message to 'vbool497_rep_rep_rep' from Replicate factor
							this.vbool497_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool497_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vbool497_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch], nPlayersMinusPerTeam, this.vbool497_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vbool499' from Or factor
							this.vbool499_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = BooleanOrOp.BAverageConditional(this.Quit[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vbool497_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vbool496_rep_rep_rep' from And factor
							this.vbool496_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = BooleanAndOp.AAverageConditional(this.vbool499_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Under_performing_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						}
						this.vbool496_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool496_rep_rep_rep_B[nMatches][nTeamsPerMatch], this.vbool496_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch]);
					}
					this.vbool496_rep_rep_B_toDef[nMatches] = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool496_rep_rep_rep_B_toDef[nMatches], this.vbool496_rep_rep_B_toDef[nMatches]);
				}
				this.vbool496_rep_B_toDef = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool496_rep_rep_B_toDef, this.vbool496_rep_B_toDef);
				this.vbool496_rep_F_marginal = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool496_rep_B_toDef, this.vBernoulli58, this.vbool496_rep_F_marginal);
				for(int nMatches = 0; nMatches<521; nMatches++) {
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Message to 'vdouble3463' from Product factor
							vdouble3463_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(-0.0027165396209770554, this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
							// Message to 'vdouble3466' from Plus factor
							vdouble3466_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.SumAverageConditional(vdouble3463_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble3465_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'kill_count_m__t__n' from Product factor
							kill_count_m__t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(vdouble3466_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble3469' from Gaussian factor
							vdouble3469_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.SampleAverageConditional(kill_count_m__t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], vc_Times_p_time[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble3469_use' from Max factor
							vdouble3469_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = MaxGaussianOp.BAverageConditional(this.Killcount[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0.0, vdouble3469_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'kill_count_m__t__n' from Gaussian factor
							kill_count_m__t__n_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.MeanAverageConditional(vdouble3469_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], vc_Times_p_time[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble3466' from Product factor
							vdouble3466_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.AAverageConditional(kill_count_m__t__n_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble3465' from Plus factor
							vdouble3465_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.BAverageConditional(vdouble3466_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], vdouble3463_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'Perfomance_opposing_team_uses' from Product factor
							this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = GaussianProductOpBase.BAverageConditional(vdouble3465_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], -0.00012959423363410652);
						}
					}
					// Message to 'vbool496_rep' from Replicate factor
					this.vbool496_rep_F[nMatches] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool496_rep_rep_B_toDef[nMatches], this.vbool496_rep_F_marginal, nMatches, this.vbool496_rep_F[nMatches]);
					this.vbool496_rep_rep_F_marginal[nMatches] = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool496_rep_rep_B_toDef[nMatches], this.vbool496_rep_F[nMatches], this.vbool496_rep_rep_F_marginal[nMatches]);
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						// Message to 'vbool496_rep_rep' from Replicate factor
						this.vbool496_rep_rep_F[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool496_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch], this.vbool496_rep_rep_F_marginal[nMatches], nTeamsPerMatch, this.vbool496_rep_rep_F[nMatches][nTeamsPerMatch]);
						this.vbool496_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool496_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch], this.vbool496_rep_rep_F[nMatches][nTeamsPerMatch], this.vbool496_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch]);
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Message to 'vbool496_rep_rep_rep' from Replicate factor
							this.vbool496_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool496_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vbool496_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch], nPlayersMinusPerTeam, this.vbool496_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'Under_performing' from And factor
							this.Under_performing_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = BooleanAndOp.BAverageConditional(this.vbool499_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vbool496_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble3488' from IsPositive factor
							this.vdouble3488_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = IsPositiveOp_Proper.XAverageConditional(this.Under_performing_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble3488_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble3486_use' from Difference factor
							this.vdouble3486_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.BAverageConditional(0.0, this.vdouble3488_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble3484' from Gaussian factor
							this.vdouble3484_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.MeanAverageConditional(this.vdouble3486_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 9.1841710153738614E-06);
							// Message to 'vdouble3482' from Difference factor
							this.vdouble3482_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.SumAverageConditional(this.vdouble3484_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 871.06018724773276);
							// Message to 'Perfomance_opposing_team_uses' from Difference factor
							this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = DoublePlusOp.BAverageConditional(this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3], this.vdouble3482_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble3473' from Product factor
							vdouble3473_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(-0.00024629287328137512, this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2]);
							// Message to 'vdouble3476' from Plus factor
							vdouble3476_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.SumAverageConditional(vdouble3473_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble3475_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'death_count_m__t__n' from Product factor
							death_count_m__t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(vdouble3476_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble3479' from Gaussian factor
							vdouble3479_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.SampleAverageConditional(death_count_m__t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], vc_Times_p_time[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble3479_use' from Max factor
							vdouble3479_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = MaxGaussianOp.BAverageConditional(this.Deathcount[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0.0, vdouble3479_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'death_count_m__t__n' from Gaussian factor
							death_count_m__t__n_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.MeanAverageConditional(vdouble3479_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], vc_Times_p_time[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble3476' from Product factor
							vdouble3476_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.AAverageConditional(death_count_m__t__n_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble3475' from Plus factor
							vdouble3475_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.BAverageConditional(vdouble3476_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], vdouble3473_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'Perfomance_opposing_team_uses' from Product factor
							this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = GaussianProductOpBase.BAverageConditional(vdouble3475_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], -0.0007441481850777136);
						}
					}
					// Message to 'player_perf_t__n_item1_uses' from Replicate factor
					this.player_perf_t__n_item1_uses_F[nMatches][1] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item1_uses_B[nMatches], this.player_perf_t__n_depth1_F[nMatches][1], 1, this.player_perf_t__n_item1_uses_F[nMatches][1]);
					// Message to 'SumTeam2' from Sum factor
					SumTeam2_F[nMatches] = FastSumOp.SumAverageConditional(this.player_perf_t__n_item1_uses_F[nMatches][1]);
					// Message to 'player_perf_t__n_item0_uses' from Replicate factor
					this.player_perf_t__n_item0_uses_F[nMatches][0] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item0_uses_B[nMatches], this.player_perf_t__n_depth1_F[nMatches][0], 0, this.player_perf_t__n_item0_uses_F[nMatches][0]);
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							if (nTeamsPerMatch==0) {
								this.Perfomance_opposing_team_uses_B_toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.ToDef<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_B_toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							}
						}
						if (nTeamsPerMatch==0) {
							this.player_perf_t__n_item0_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.Marginal<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item0_rep_B_toDef[nMatches][nTeamsPerMatch], this.player_perf_t__n_item0_uses_F[nMatches][0], this.player_perf_t__n_item0_rep_F_marginal[nMatches][nTeamsPerMatch]);
							for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
								// Message to 'player_perf_t__n_item0_rep' from Replicate factor
								this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_0_0__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_item0_rep_F_marginal[nMatches][nTeamsPerMatch], nPlayersMinusPerTeam, this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'Perfomance_opposing_team' from Replicate factor
								Perfomance_opposing_team_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ArrayHelper.SetTo<Gaussian>(Perfomance_opposing_team_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_B_toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'vdouble3455' from Product factor
								vdouble3455_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.BAverageConditional(Perfomance_opposing_team_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble3453_reduced[nMatches][nTeamsPerMatch]);
								// Message to 'vdouble3454' from Ratio factor
								vdouble3454_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.AAverageConditional(vdouble3455_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Avg_play_time_team_reduced[nMatches][nTeamsPerMatch]);
								// Message to 'vdouble3454' from Sum factor
								this.vdouble3454_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = FastSumOp.SumAverageConditional(this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'player_perf_t__n_0_0_' from Sum factor
								this.player_perf_t__n_0_0__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(vdouble3454_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble3454_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_0_0__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'vdouble3455' from Ratio factor
								this.vdouble3455_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.RatioAverageConditional(this.vdouble3454_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Avg_play_time_team_reduced[nMatches][nTeamsPerMatch]);
							}
							this.player_perf_t__n_item0_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.ToDef<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_0_0__B[nMatches][nTeamsPerMatch], this.player_perf_t__n_item0_rep_B_toDef[nMatches][nTeamsPerMatch]);
							// Message to 'player_perf_t__n_item0_uses' from Replicate factor
							this.player_perf_t__n_item0_uses_B[nMatches][0] = ArrayHelper.SetTo<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item0_uses_B[nMatches][0], this.player_perf_t__n_item0_rep_B_toDef[nMatches][nTeamsPerMatch]);
						}
					}
					// Message to 'player_perf_t__n_item0_uses' from Replicate factor
					this.player_perf_t__n_item0_uses_F[nMatches][1] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item0_uses_B[nMatches], this.player_perf_t__n_depth1_F[nMatches][0], 1, this.player_perf_t__n_item0_uses_F[nMatches][1]);
					// Message to 'SumTeam1' from Sum factor
					SumTeam1_F[nMatches] = FastSumOp.SumAverageConditional(this.player_perf_t__n_item0_uses_F[nMatches][1]);
					// Message to 'Diff' from Difference factor
					Diff_F[nMatches] = DoublePlusOp.AAverageConditional(SumTeam1_F[nMatches], SumTeam2_F[nMatches]);
					if (this.Team2wins[nMatches]==1) {
						// Message to 'vdouble3499' from Difference factor
						vdouble3499_F[nMatches] = DoublePlusOp.AAverageConditional(-0.0001, Diff_F[nMatches]);
						// Message to 'vdouble3499' from IsPositive factor
						vdouble3499_B[nMatches] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(true), vdouble3499_F[nMatches]);
						// Message to 'Diff_1_' from Difference factor
						Diff_1__B[nMatches] = DoublePlusOp.BAverageConditional(-0.0001, vdouble3499_B[nMatches]);
						// Message to 'Diff' from Copy factor
						Diff_B[nMatches] = ArrayHelper.SetTo<Gaussian>(Diff_B[nMatches], Diff_1__B[nMatches]);
					}
					if (this.Team2wins[nMatches]==0) {
						// Message to 'vdouble3497' from Difference factor
						vdouble3497_F[nMatches] = DoublePlusOp.AAverageConditional(Diff_F[nMatches], 0.0001);
						// Message to 'vdouble3497' from IsPositive factor
						vdouble3497_B[nMatches] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(true), vdouble3497_F[nMatches]);
						// Message to 'Diff_0_' from Difference factor
						Diff_0__B[nMatches] = DoublePlusOp.SumAverageConditional(vdouble3497_B[nMatches], 0.0001);
						// Message to 'Diff' from Copy factor
						Diff_B[nMatches] = ArrayHelper.SetTo<Gaussian>(Diff_B[nMatches], Diff_0__B[nMatches]);
					}
					if (this.Team2wins[nMatches]==2) {
						// Message to 'Diff_2__uses' from Replicate factor
						Diff_2__uses_F[nMatches][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.Diff_2__uses_B[nMatches], Diff_F[nMatches], 1, Diff_2__uses_F[nMatches][1]);
						// Message to 'vdouble3495' from Difference factor
						vdouble3495_F[nMatches] = DoublePlusOp.AAverageConditional(-0.0001, Diff_2__uses_F[nMatches][1]);
						// Message to 'vdouble3495' from IsPositive factor
						vdouble3495_B[nMatches] = IsPositiveOp_Proper.XAverageConditional(vbool505_B[nMatches], vdouble3495_F[nMatches]);
						// Message to 'Diff_2__uses' from Difference factor
						this.Diff_2__uses_B[nMatches][1] = DoublePlusOp.BAverageConditional(-0.0001, vdouble3495_B[nMatches]);
						// Message to 'Diff_2__uses' from Replicate factor
						Diff_2__uses_F[nMatches][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.Diff_2__uses_B[nMatches], Diff_F[nMatches], 0, Diff_2__uses_F[nMatches][0]);
						// Message to 'vdouble3493' from Difference factor
						vdouble3493_F[nMatches] = DoublePlusOp.AAverageConditional(Diff_2__uses_F[nMatches][0], 0.0001);
						// Message to 'vdouble3493' from IsPositive factor
						vdouble3493_B[nMatches] = IsPositiveOp_Proper.XAverageConditional(vbool502_B[nMatches], vdouble3493_F[nMatches]);
						// Message to 'Diff_2__uses' from Difference factor
						this.Diff_2__uses_B[nMatches][0] = DoublePlusOp.SumAverageConditional(vdouble3493_B[nMatches], 0.0001);
						// Message to 'Diff_2_' from Replicate factor
						Diff_2__B[nMatches] = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(this.Diff_2__uses_B[nMatches], Diff_2__B[nMatches]);
						// Message to 'Diff' from Copy factor
						Diff_B[nMatches] = ArrayHelper.SetTo<Gaussian>(Diff_B[nMatches], Diff_2__B[nMatches]);
					}
					// Message to 'SumTeam2' from Difference factor
					SumTeam2_B[nMatches] = DoublePlusOp.BAverageConditional(SumTeam1_F[nMatches], Diff_B[nMatches]);
					// Message to 'player_perf_t__n_item1_uses' from Sum factor
					this.player_perf_t__n_item1_uses_B[nMatches][1] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(SumTeam2_B[nMatches], SumTeam2_F[nMatches], this.player_perf_t__n_item1_uses_F[nMatches][1], this.player_perf_t__n_item1_uses_B[nMatches][1]);
					// Message to 'player_perf_t__n_item1_uses' from Replicate factor
					this.player_perf_t__n_item1_uses_F[nMatches][0] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item1_uses_B[nMatches], this.player_perf_t__n_depth1_F[nMatches][1], 0, this.player_perf_t__n_item1_uses_F[nMatches][0]);
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						if (nTeamsPerMatch==1) {
							player_perf_t__n_item1_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.Marginal<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item1_rep_B_toDef[nMatches][nTeamsPerMatch], this.player_perf_t__n_item1_uses_F[nMatches][0], player_perf_t__n_item1_rep_F_marginal[nMatches][nTeamsPerMatch]);
							for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
								// Message to 'player_perf_t__n_item1_rep' from Replicate factor
								player_perf_t__n_item1_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_1_1__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], player_perf_t__n_item1_rep_F_marginal[nMatches][nTeamsPerMatch], nPlayersMinusPerTeam, player_perf_t__n_item1_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								this.Perfomance_opposing_team_uses_B_toDef2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.ToDef<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_B_toDef2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'vdouble3459' from Sum factor
								vdouble3459_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = FastSumOp.SumAverageConditional(player_perf_t__n_item1_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'vdouble3460' from Ratio factor
								vdouble3460_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.RatioAverageConditional(vdouble3459_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Avg_play_time_team_reduced[nMatches][nTeamsPerMatch]);
								// Message to 'Perfomance_opposing_team_1_' from Product factor
								this.Perfomance_opposing_team_1__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(vdouble3458_reduced[nMatches][nTeamsPerMatch], vdouble3460_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.Marginal<Gaussian>(this.Perfomance_opposing_team_uses_B_toDef2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_1__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'Perfomance_opposing_team_uses' from Replicate factor
								this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2], this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 2, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2]);
								// Message to 'vdouble3460' from Product factor
								vdouble3460_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.BAverageConditional(this.Perfomance_opposing_team_uses_B_toDef2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], vdouble3458_reduced[nMatches][nTeamsPerMatch]);
								// Message to 'vdouble3459' from Ratio factor
								vdouble3459_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.AAverageConditional(vdouble3460_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Avg_play_time_team_reduced[nMatches][nTeamsPerMatch]);
								// Message to 'player_perf_t__n_1_1_' from Sum factor
								this.player_perf_t__n_1_1__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(vdouble3459_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], vdouble3459_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], player_perf_t__n_item1_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_1_1__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'Perfomance_opposing_team_uses' from Replicate factor
								this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0], this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]);
								// Message to 'Perfomance_opposing_team_uses' from Replicate factor
								this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1], this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 1, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
							}
						}
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							if (nTeamsPerMatch==0) {
								// Message to 'Perfomance_opposing_team_0_' from Product factor
								this.Perfomance_opposing_team_0__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(this.vdouble3453_reduced[nMatches][nTeamsPerMatch], this.vdouble3455_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'Perfomance_opposing_team' from Copy factor
								this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ArrayHelper.SetTo<Gaussian>(this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_0__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.Marginal<Gaussian>(this.Perfomance_opposing_team_uses_B_toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'Perfomance_opposing_team_uses' from Replicate factor
								this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2], this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 2, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2]);
								// Message to 'Perfomance_opposing_team_uses' from Replicate factor
								this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0], this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]);
								// Message to 'Perfomance_opposing_team_uses' from Replicate factor
								this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1], this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 1, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
							}
							// Message to 'player_perf_t__n_uses' from Difference factor
							this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3] = DoublePlusOp.SumAverageConditional(this.vdouble3482_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2]);
							// Message to 'vdouble3465' from Product factor
							this.vdouble3465_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(-0.00012959423363410652, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]);
							// Message to 'vdouble3475' from Product factor
							this.vdouble3475_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(-0.0007441481850777136, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
						}
						if (nTeamsPerMatch==1) {
							this.player_perf_t__n_item1_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.ToDef<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_1_1__B[nMatches][nTeamsPerMatch], this.player_perf_t__n_item1_rep_B_toDef[nMatches][nTeamsPerMatch]);
							// Message to 'player_perf_t__n_item1_uses' from Replicate factor
							this.player_perf_t__n_item1_uses_B[nMatches][0] = ArrayHelper.SetTo<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item1_uses_B[nMatches][0], this.player_perf_t__n_item1_rep_B_toDef[nMatches][nTeamsPerMatch]);
						}
					}
					// Message to 'SumTeam1' from Difference factor
					SumTeam1_B[nMatches] = DoublePlusOp.SumAverageConditional(Diff_B[nMatches], SumTeam2_F[nMatches]);
					// Message to 'player_perf_t__n_item0_uses' from Sum factor
					this.player_perf_t__n_item0_uses_B[nMatches][1] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(SumTeam1_B[nMatches], SumTeam1_F[nMatches], this.player_perf_t__n_item0_uses_F[nMatches][1], this.player_perf_t__n_item0_uses_B[nMatches][1]);
					// Message to 'player_perf_t__n_item0' from Replicate factor
					player_perf_t__n_item0_B[nMatches] = ReplicateOp_NoDivide.DefAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item0_uses_B[nMatches], player_perf_t__n_item0_B[nMatches]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][0]; nPlayersMinusPerTeam++) {
						// Message to 'player_perf_t__n_uses' from Copy factor
						this.player_perf_t__n_uses_B[nMatches][0][nPlayersMinusPerTeam][0] = ArrayHelper.SetTo<Gaussian>(this.player_perf_t__n_uses_B[nMatches][0][nPlayersMinusPerTeam][0], player_perf_t__n_item0_B[nMatches][nPlayersMinusPerTeam]);
					}
					// Message to 'player_perf_t__n_item1' from Replicate factor
					player_perf_t__n_item1_B[nMatches] = ReplicateOp_NoDivide.DefAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item1_uses_B[nMatches], player_perf_t__n_item1_B[nMatches]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][1]; nPlayersMinusPerTeam++) {
						// Message to 'player_perf_t__n_uses' from Copy factor
						this.player_perf_t__n_uses_B[nMatches][1][nPlayersMinusPerTeam][0] = ArrayHelper.SetTo<Gaussian>(this.player_perf_t__n_uses_B[nMatches][1][nPlayersMinusPerTeam][0], player_perf_t__n_item1_B[nMatches][nPlayersMinusPerTeam]);
					}
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Message to 'vdouble3463' from Plus factor
							vdouble3463_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.AAverageConditional(vdouble3466_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble3465_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'player_perf_t__n_uses' from Product factor
							this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = GaussianProductOpBase.BAverageConditional(vdouble3463_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], -0.0027165396209770554);
							// Message to 'vdouble3473' from Plus factor
							vdouble3473_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.AAverageConditional(vdouble3476_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble3475_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'player_perf_t__n_uses' from Product factor
							this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = GaussianProductOpBase.BAverageConditional(vdouble3473_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], -0.00024629287328137512);
							this.player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.ToDef<Gaussian>(this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'perf_n_m' from Ratio factor
							perf_n_m_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.AAverageConditional(this.player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.match_time_m[nMatches]);
							// Message to 'perf_from_ds_use' from Product factor
							perf_from_ds_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.AAverageConditional(perf_n_m_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' from Gaussian factor
							this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.MeanAverageConditional(perf_from_ds_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 1.0);
						}
					}
				}
				// Message to 'skills_prior_use' from GetDeepJaggedItems factor
				this.skills_prior_use_B = GetDeepJaggedItemsOp<double>.ArrayAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>,Gaussian,DistributionStructArray<Gaussian,double>>(this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B, this.playerIndex, this.skills_prior_use_B);
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			// Message to 'vbool496_marginal' from Variable factor
			this.vbool496_marginal_F = VariableOp.MarginalAverageConditional<Bernoulli>(this.vbool496_rep_B_toDef, this.vBernoulli58, this.vbool496_marginal_F);
			this.vbool497_marginal_F = Bernoulli.Uniform();
			// Message to 'vbool497_marginal' from Variable factor
			this.vbool497_marginal_F = VariableOp.MarginalAverageConditional<Bernoulli>(this.vbool497_rep_B_toDef, this.vBernoulli59, this.vbool497_marginal_F);
			// Create array for 'skills_prior_marginal' Forwards messages.
			this.skills_prior_marginal_F = new DistributionStructArray<Gaussian,double>(3585);
			for(int nPlayers = 0; nPlayers<3585; nPlayers++) {
				this.skills_prior_marginal_F[nPlayers] = Gaussian.Uniform();
				// Message to 'skills_prior_marginal' from Variable factor
				this.skills_prior_marginal_F[nPlayers] = VariableOp.MarginalAverageConditional<Gaussian>(this.skills_prior_use_B[nPlayers], this.skills_prior_F[nPlayers], this.skills_prior_marginal_F[nPlayers]);
			}
			this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam1_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of deathcount and PlayerInTeam</summary>
		private void Changed_deathcount_PlayerInTeam()
		{
			if (this.Changed_deathcount_PlayerInTeam_isDone) {
				return ;
			}
			// Create array for 'deathcount_marginal' Forwards messages.
			this.deathcount_marginal_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(521);
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for 'deathcount_marginal' Forwards messages.
				this.deathcount_marginal_F[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for 'deathcount_marginal' Forwards messages.
					this.deathcount_marginal_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						this.deathcount_marginal_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Message to 'deathcount_marginal' from DerivedVariable factor
			this.deathcount_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>,double[][][]>(this.Deathcount, this.deathcount_marginal_F);
			this.Changed_deathcount_PlayerInTeam_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of killcount and PlayerInTeam</summary>
		private void Changed_killcount_PlayerInTeam()
		{
			if (this.Changed_killcount_PlayerInTeam_isDone) {
				return ;
			}
			// Create array for 'killcount_marginal' Forwards messages.
			this.killcount_marginal_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(521);
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for 'killcount_marginal' Forwards messages.
				this.killcount_marginal_F[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for 'killcount_marginal' Forwards messages.
					this.killcount_marginal_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						this.killcount_marginal_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Message to 'killcount_marginal' from DerivedVariable factor
			this.killcount_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>,double[][][]>(this.Killcount, this.killcount_marginal_F);
			this.Changed_killcount_PlayerInTeam_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of Match_time_m</summary>
		private void Changed_Match_time_m()
		{
			if (this.Changed_Match_time_m_isDone) {
				return ;
			}
			// Create array for 'Match_time_m_marginal' Forwards messages.
			this.Match_time_m_marginal_F = new DistributionStructArray<Gaussian,double>(521);
			for(int nMatches = 0; nMatches<521; nMatches++) {
				this.Match_time_m_marginal_F[nMatches] = Gaussian.Uniform();
			}
			// Message to 'Match_time_m_marginal' from DerivedVariable factor
			this.Match_time_m_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Gaussian,double>,double[]>(this.match_time_m, this.Match_time_m_marginal_F);
			this.Changed_Match_time_m_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of Match_time_m and numberOfIterations and p_time_m__t__n and PlayerIndex and PlayerInTeam and vdouble__1010</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1010(int numberOfIterations)
		{
			if (this.Changed_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1010_isDone) {
				return ;
			}
			DistributionStructArray<Gaussian,double> vdouble__1012_F;
			// Create array for 'vdouble__1012' Forwards messages.
			vdouble__1012_F = new DistributionStructArray<Gaussian,double>(521);
			for(int nMatches = 0; nMatches<521; nMatches++) {
				vdouble__1012_F[nMatches] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble____292_F'
			DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>[] vdouble____292_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>[521];
			// Create array for replicates of 'vdouble3416_F'
			Gaussian[] vdouble3416_F = new Gaussian[521];
			// Create array for replicates of 'vdouble3411_F'
			Gaussian[][][] vdouble3411_F = new Gaussian[521][][];
			// Create array for replicates of 'vdouble3415_F'
			Gaussian[] vdouble3415_F = new Gaussian[521];
			// Create array for replicates of 'vdouble3409_F'
			Gaussian[][][] vdouble3409_F = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for 'vdouble____292' Forwards messages.
				vdouble____292_F[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
				// Create array for replicates of 'vdouble3409_F'
				vdouble3409_F[nMatches] = new Gaussian[2][];
				// Create array for replicates of 'vdouble3411_F'
				vdouble3411_F[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for 'vdouble____292' Forwards messages.
					vdouble____292_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					// Create array for replicates of 'vdouble3409_F'
					vdouble3409_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble3411_F'
					vdouble3411_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble____292_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						vdouble3409_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						// Message to 'vdouble3409' from Gaussian factor
						vdouble3409_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.SampleAverageConditional(this.Vdouble__1010[this.playerIndex[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]], 1.0);
						vdouble3411_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						// Message to 'vdouble3411' from Product factor
						vdouble3411_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(vdouble3409_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'vdouble____292' from Ratio factor
						vdouble____292_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.RatioAverageConditional(vdouble3411_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.match_time_m[nMatches]);
					}
				}
				vdouble3415_F[nMatches] = Gaussian.Uniform();
				// Message to 'vdouble3415' from Sum factor
				vdouble3415_F[nMatches] = FastSumOp.SumAverageConditional(vdouble____292_F[nMatches][0]);
				vdouble3416_F[nMatches] = Gaussian.Uniform();
				// Message to 'vdouble3416' from Sum factor
				vdouble3416_F[nMatches] = FastSumOp.SumAverageConditional(vdouble____292_F[nMatches][1]);
				// Message to 'vdouble__1012' from Difference factor
				vdouble__1012_F[nMatches] = Tracing.FireEvent<Gaussian>(DoublePlusOp.AAverageConditional(vdouble3415_F[nMatches], vdouble3416_F[nMatches]), string.Format("vdouble__1012_F[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
			}
			Gaussian vdouble__1012_use_B_reduced;
			vdouble__1012_use_B_reduced = Gaussian.Uniform();
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				for(int nMatches = 0; nMatches<521; nMatches++) {
					this.vdouble__1012_use_B_nMatches__buffer[nMatches] = VariablePointOp_Rprop.Buffer(vdouble__1012_use_B_reduced, vdouble__1012_F[nMatches], this.vdouble__1012_marginal_F[nMatches], this.vdouble__1012_use_B_nMatches__buffer[nMatches]);
					// Message to 'vdouble__1012_marginal' from VariablePoint factor
					this.vdouble__1012_marginal_F[nMatches] = Tracing.FireEvent<Gaussian>(VariablePointOp_Rprop.MarginalAverageConditional(vdouble__1012_use_B_reduced, vdouble__1012_F[nMatches], this.vdouble__1012_use_B_nMatches__buffer[nMatches], this.vdouble__1012_marginal_F[nMatches]), string.Format("vdouble__1012_marginal_F[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
				}
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			this.Changed_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1010_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of Match_time_m and numberOfIterationsDecreased and p_time_m__t__n and PlayerIndex and PlayerInTeam and quit and vdouble__1022 and vdouble__1023 and must reset on changes to deathcount and killcount and team2wins</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl14(bool initialise)
		{
			if (this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl14_isDone&&((!initialise)||this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl14_isInitialised)) {
				return ;
			}
			for(int nMatches = 0; nMatches<521; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Message to 'vbool497_rep_rep_rep' from Or factor
						this.vbool497_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = BooleanOrOp.AAverageConditional(this.Quit[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vbool499_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
					}
					this.vbool497_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool497_rep_rep_rep_B[nMatches][nTeamsPerMatch], this.vbool497_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch]);
				}
				this.vbool497_rep_rep_B_toDef[nMatches] = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool497_rep_rep_rep_B_toDef[nMatches], this.vbool497_rep_rep_B_toDef[nMatches]);
			}
			this.vbool497_rep_B_toDef = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool497_rep_rep_B_toDef, this.vbool497_rep_B_toDef);
			this.vbool497_rep_F_marginal = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool497_rep_B_toDef, this.vBernoulli59, this.vbool497_rep_F_marginal);
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Message to 'vbool497_rep' from Replicate factor
				this.vbool497_rep_F[nMatches] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool497_rep_rep_B_toDef[nMatches], this.vbool497_rep_F_marginal, nMatches, this.vbool497_rep_F[nMatches]);
				this.vbool497_rep_rep_F_marginal[nMatches] = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool497_rep_rep_B_toDef[nMatches], this.vbool497_rep_F[nMatches], this.vbool497_rep_rep_F_marginal[nMatches]);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Message to 'vbool497_rep_rep' from Replicate factor
					this.vbool497_rep_rep_F[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool497_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch], this.vbool497_rep_rep_F_marginal[nMatches], nTeamsPerMatch, this.vbool497_rep_rep_F[nMatches][nTeamsPerMatch]);
					this.vbool497_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool497_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch], this.vbool497_rep_rep_F[nMatches][nTeamsPerMatch], this.vbool497_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Message to 'vbool497_rep_rep_rep' from Replicate factor
						this.vbool497_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool497_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vbool497_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch], nPlayersMinusPerTeam, this.vbool497_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'vbool499' from Or factor
						this.vbool499_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = BooleanOrOp.BAverageConditional(this.Quit[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vbool497_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'vbool496_rep_rep_rep' from And factor
						this.vbool496_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = BooleanAndOp.AAverageConditional(this.vbool499_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Under_performing_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
					}
					this.vbool496_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool496_rep_rep_rep_B[nMatches][nTeamsPerMatch], this.vbool496_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch]);
				}
				this.vbool496_rep_rep_B_toDef[nMatches] = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool496_rep_rep_rep_B_toDef[nMatches], this.vbool496_rep_rep_B_toDef[nMatches]);
			}
			this.vbool496_rep_B_toDef = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool496_rep_rep_B_toDef, this.vbool496_rep_B_toDef);
			this.vbool496_rep_F_marginal = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool496_rep_B_toDef, this.vBernoulli58, this.vbool496_rep_F_marginal);
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Message to 'vbool496_rep' from Replicate factor
				this.vbool496_rep_F[nMatches] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool496_rep_rep_B_toDef[nMatches], this.vbool496_rep_F_marginal, nMatches, this.vbool496_rep_F[nMatches]);
				this.vbool496_rep_rep_F_marginal[nMatches] = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool496_rep_rep_B_toDef[nMatches], this.vbool496_rep_F[nMatches], this.vbool496_rep_rep_F_marginal[nMatches]);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Message to 'vbool496_rep_rep' from Replicate factor
					this.vbool496_rep_rep_F[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool496_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch], this.vbool496_rep_rep_F_marginal[nMatches], nTeamsPerMatch, this.vbool496_rep_rep_F[nMatches][nTeamsPerMatch]);
					this.vbool496_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool496_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch], this.vbool496_rep_rep_F[nMatches][nTeamsPerMatch], this.vbool496_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Message to 'vbool496_rep_rep_rep' from Replicate factor
						this.vbool496_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool496_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vbool496_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch], nPlayersMinusPerTeam, this.vbool496_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'Under_performing' from And factor
						this.Under_performing_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = BooleanAndOp.BAverageConditional(this.vbool499_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vbool496_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'vdouble3488' from IsPositive factor
						this.vdouble3488_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = IsPositiveOp_Proper.XAverageConditional(this.Under_performing_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble3488_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'vdouble3486_use' from Difference factor
						this.vdouble3486_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.BAverageConditional(0.0, this.vdouble3488_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'vdouble3484' from Gaussian factor
						this.vdouble3484_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.MeanAverageConditional(this.vdouble3486_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 9.1841710153738614E-06);
						// Message to 'vdouble3482' from Difference factor
						this.vdouble3482_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.SumAverageConditional(this.vdouble3484_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 871.06018724773276);
						// Message to 'Perfomance_opposing_team_uses' from Difference factor
						this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = DoublePlusOp.BAverageConditional(this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3], this.vdouble3482_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						if (nTeamsPerMatch==1) {
							this.Perfomance_opposing_team_uses_B_toDef2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.ToDef<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_B_toDef2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.Marginal<Gaussian>(this.Perfomance_opposing_team_uses_B_toDef2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_1__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'Perfomance_opposing_team_uses' from Replicate factor
							this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2], this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 2, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2]);
							// Message to 'Perfomance_opposing_team_uses' from Replicate factor
							this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0], this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]);
						}
						if (nTeamsPerMatch==0) {
							this.Perfomance_opposing_team_uses_B_toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.ToDef<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_B_toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.Marginal<Gaussian>(this.Perfomance_opposing_team_uses_B_toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'Perfomance_opposing_team_uses' from Replicate factor
							this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0], this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]);
						}
						// Message to 'vdouble3465' from Product factor
						this.vdouble3465_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(-0.00012959423363410652, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]);
						if (nTeamsPerMatch==1) {
							// Message to 'Perfomance_opposing_team_uses' from Replicate factor
							this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1], this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 1, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
						}
						if (nTeamsPerMatch==0) {
							// Message to 'Perfomance_opposing_team_uses' from Replicate factor
							this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1], this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 1, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
						}
						// Message to 'vdouble3475' from Product factor
						this.vdouble3475_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(-0.0007441481850777136, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
					}
				}
			}
			this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl14_isDone = true;
			this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl14_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of Match_time_m and numberOfIterationsDecreased and p_time_m__t__n and PlayerIndex and PlayerInTeam and vdouble__1022 and vdouble__1023 and must reset on changes to deathcount and killcount and quit and team2wins</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1013(bool initialise)
		{
			if (this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1013_isDone&&((!initialise)||this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1013_isInitialised)) {
				return ;
			}
			for(int nMatches = 0; nMatches<521; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Message to 'player_perf_t__n' from Ratio factor
						this.player_perf_t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.RatioAverageConditional(this.perf_n_m_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.match_time_m[nMatches]);
						this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.Marginal<Gaussian>(this.player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'player_perf_t__n_uses' from Replicate factor
						this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3], this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 3, this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3]);
						// Message to 'player_perf_t__n_uses' from Replicate factor
						this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0], this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0, this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]);
					}
				}
				for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][0]; nPlayersMinusPerTeam++) {
					// Message to 'player_perf_t__n_depth1' from Copy factor
					this.player_perf_t__n_depth1_F[nMatches][0][nPlayersMinusPerTeam] = ArrayHelper.SetTo<Gaussian>(this.player_perf_t__n_depth1_F[nMatches][0][nPlayersMinusPerTeam], this.player_perf_t__n_uses_F[nMatches][0][nPlayersMinusPerTeam][0]);
				}
				// Message to 'player_perf_t__n_item0_uses' from Replicate factor
				this.player_perf_t__n_item0_uses_F[nMatches][0] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item0_uses_B[nMatches], this.player_perf_t__n_depth1_F[nMatches][0], 0, this.player_perf_t__n_item0_uses_F[nMatches][0]);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					if (nTeamsPerMatch==0) {
						this.player_perf_t__n_item0_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.Marginal<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item0_rep_B_toDef[nMatches][nTeamsPerMatch], this.player_perf_t__n_item0_uses_F[nMatches][0], this.player_perf_t__n_item0_rep_F_marginal[nMatches][nTeamsPerMatch]);
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Message to 'player_perf_t__n_item0_rep' from Replicate factor
							this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_0_0__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_item0_rep_F_marginal[nMatches][nTeamsPerMatch], nPlayersMinusPerTeam, this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble3454' from Sum factor
							this.vdouble3454_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = FastSumOp.SumAverageConditional(this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble3455' from Ratio factor
							this.vdouble3455_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.RatioAverageConditional(this.vdouble3454_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Avg_play_time_team_reduced[nMatches][nTeamsPerMatch]);
							// Message to 'Perfomance_opposing_team_0_' from Product factor
							this.Perfomance_opposing_team_0__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(this.vdouble3453_reduced[nMatches][nTeamsPerMatch], this.vdouble3455_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'Perfomance_opposing_team' from Copy factor
							this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ArrayHelper.SetTo<Gaussian>(this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_0__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.Marginal<Gaussian>(this.Perfomance_opposing_team_uses_B_toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'Perfomance_opposing_team_uses' from Replicate factor
							this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2], this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 2, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2]);
						}
					}
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Message to 'vdouble3482' from Difference factor
						this.vdouble3482_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.AAverageConditional(this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3], this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2]);
						// Message to 'vdouble3484' from Difference factor
						this.vdouble3484_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.AAverageConditional(this.vdouble3482_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 871.06018724773276);
						// Message to 'vdouble3486' from Gaussian factor
						this.vdouble3486_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.SampleAverageConditional(this.vdouble3484_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 9.1841710153738614E-06);
						// Message to 'vdouble3488' from Difference factor
						this.vdouble3488_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.AAverageConditional(0.0, this.vdouble3486_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'Under_performing' from IsPositive factor
						this.Under_performing_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = IsPositiveOp.IsPositiveAverageConditional(this.vdouble3488_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'vbool499' from And factor
						this.vbool499_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = BooleanAndOp.AndAverageConditional(this.vbool496_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Under_performing_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
					}
				}
			}
			this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1013_isDone = true;
			this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1013_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of Match_time_m and p_time_m__t__n and PlayerInTeam</summary>
		private void Changed_Match_time_m_p_time_m__t__n_PlayerInTeam()
		{
			if (this.Changed_Match_time_m_p_time_m__t__n_PlayerInTeam_isDone) {
				return ;
			}
			for(int nMatches = 0; nMatches<521; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					if (this.playerInTeam[nMatches][nTeamsPerMatch]>0) {
						this.Avg_play_time_team_reduced[nMatches][nTeamsPerMatch] = Factor.Ratio(this.vdouble3445_reduced[nMatches][nTeamsPerMatch], this.match_time_m[nMatches]);
						if (nTeamsPerMatch==0) {
							this.vdouble3453_reduced[nMatches][nTeamsPerMatch] = Factor.Ratio(this.vdouble3452_reduced[nMatches][nTeamsPerMatch], this.match_time_m[nMatches]);
						}
					}
				}
			}
			this.Changed_Match_time_m_p_time_m__t__n_PlayerInTeam_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterations and PlayerIndex and PlayerInTeam and time_passed and vdouble__1010 and vdouble__1011 and vint__266</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_numberOfIterations_PlayerIndex_PlayerInTeam_time_passed_vdouble__1010_vdouble__1011_vint__2617(int numberOfIterations)
		{
			if (this.Changed_numberOfIterations_PlayerIndex_PlayerInTeam_time_passed_vdouble__1010_vdouble__1011_vint__2617_isDone) {
				return ;
			}
			DistributionStructArray<Gaussian,double> vdouble__1019_F;
			// Create array for 'vdouble__1019' Forwards messages.
			vdouble__1019_F = new DistributionStructArray<Gaussian,double>(3585);
			// Create array for 'vdouble__1019_marginal' Forwards messages.
			this.vdouble__1019_marginal_F = new DistributionStructArray<Gaussian,double>(3585);
			DistributionStructArray<Gaussian,double> vdouble__1019_use_B;
			// Create array for 'vdouble__1019_use' Backwards messages.
			vdouble__1019_use_B = new DistributionStructArray<Gaussian,double>(3585);
			for(int nPlayers = 0; nPlayers<3585; nPlayers++) {
				vdouble__1019_use_B[nPlayers] = Gaussian.Uniform();
			}
			DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> vdouble__1019_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B;
			// Create array for 'vdouble__1019_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' Backwards messages.
			vdouble__1019_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(521);
			// Create array for replicates of 'vdouble3429'
			double[][][] vdouble3429 = new double[521][][];
			// Create array for replicates of 'vdouble3427_B'
			Gaussian[][][] vdouble3427_B = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vdouble3429'
				vdouble3429[nMatches] = new double[2][];
				// Create array for replicates of 'vdouble3427_B'
				vdouble3427_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble3429'
					vdouble3429[nMatches][nTeamsPerMatch] = new double[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble3427_B'
					vdouble3427_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						if (this.Vint__266[this.playerIndex[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]]==1) {
							vdouble3429[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Factor.Product(1.6484251002148446E-15, this.Time_passed[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							vdouble3427_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
							// Message to 'vdouble3427' from Gaussian factor
							vdouble3427_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.MeanAverageConditional(this.Vdouble__1010[this.playerIndex[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]], vdouble3429[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						}
					}
				}
			}
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				for(int nMatches = 0; nMatches<521; nMatches++) {
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							if (this.Vint__266[this.playerIndex[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]]==1) {
								// Message to 'vdouble__1019_PlayerIndex_nMatches_nTeamsPerMatch_nPlayersMinusPerTeam_1_' from Backward factor
								this.vdouble__1019_PlayerIndex_nMatches_nTeamsPerMatch_nPlayersMinusPerTeam_1__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DampBackwardOp.ValueAverageConditional<Gaussian>(vdouble3427_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0.5, this.vdouble__1019_PlayerIndex_nMatches_nTeamsPerMatch_nPlayersMinusPerTeam_1__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							}
						}
					}
				}
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for 'vdouble__1019_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' Backwards messages.
				vdouble__1019_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for 'vdouble__1019_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' Backwards messages.
					vdouble__1019_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble__1019_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						if (this.Vint__266[this.playerIndex[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]]==1) {
							// Message to 'vdouble__1019_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' from Copy factor
							vdouble__1019_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ArrayHelper.SetTo<Gaussian>(vdouble__1019_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble__1019_PlayerIndex_nMatches_nTeamsPerMatch_nPlayersMinusPerTeam_1__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						}
					}
				}
			}
			// Message to 'vdouble__1019_use' from GetDeepJaggedItems factor
			vdouble__1019_use_B = GetDeepJaggedItemsOp<double>.ArrayAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>,Gaussian,DistributionStructArray<Gaussian,double>>(vdouble__1019_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B, this.playerIndex, vdouble__1019_use_B);
			for(int nPlayers = 0; nPlayers<3585; nPlayers++) {
				vdouble__1019_F[nPlayers] = Gaussian.Uniform();
				this.vdouble__1019_marginal_F[nPlayers] = Gaussian.Uniform();
				// Message to 'vdouble__1019' from Gaussian factor
				vdouble__1019_F[nPlayers] = GaussianOpBase.SampleAverageConditional(this.Vdouble__1010[nPlayers], this.Vdouble__1011[nPlayers]);
				// Message to 'vdouble__1019_marginal' from Variable factor
				this.vdouble__1019_marginal_F[nPlayers] = VariableOp.MarginalAverageConditional<Gaussian>(vdouble__1019_use_B[nPlayers], vdouble__1019_F[nPlayers], this.vdouble__1019_marginal_F[nPlayers]);
			}
			this.Changed_numberOfIterations_PlayerIndex_PlayerInTeam_time_passed_vdouble__1010_vdouble__1011_vint__2617_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and must reset on changes to deathcount and killcount and Match_time_m and p_time_m__t__n and PlayerIndex and PlayerInTeam and quit and team2wins and vdouble__1022 and vdouble__1023</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde2(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde2_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde2_isInitialised)) {
				return ;
			}
			this.skills_prior_use_F_marginal = GetDeepJaggedItemsOp<double>.MarginalInit<DistributionStructArray<Gaussian,double>>(this.skills_prior_F);
			this.vbool496_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.vBernoulli58);
			for(int nMatches = 0; nMatches<521; nMatches++) {
				this.vbool496_rep_F[nMatches] = Bernoulli.Uniform();
				this.vbool496_rep_rep_F_marginal[nMatches] = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.vbool496_rep_F[nMatches]);
				this.vbool496_rep_rep_B_toDef[nMatches] = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.vbool496_rep_F[nMatches]);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					this.vbool496_rep_rep_F[nMatches][nTeamsPerMatch] = Bernoulli.Uniform();
					this.vbool496_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.vbool496_rep_rep_F[nMatches][nTeamsPerMatch]);
					this.vbool496_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.vbool496_rep_rep_F[nMatches][nTeamsPerMatch]);
					this.vbool497_rep_rep_F[nMatches][nTeamsPerMatch] = Bernoulli.Uniform();
					this.vbool497_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.vbool497_rep_rep_F[nMatches][nTeamsPerMatch]);
				}
				this.vbool497_rep_F[nMatches] = Bernoulli.Uniform();
				this.vbool497_rep_rep_B_toDef[nMatches] = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.vbool497_rep_F[nMatches]);
			}
			this.vbool497_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.vBernoulli59);
			this.vbool497_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.vBernoulli59);
			for(int nMatches = 0; nMatches<521; nMatches++) {
				this.vbool497_rep_rep_F_marginal[nMatches] = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.vbool497_rep_F[nMatches]);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					this.vbool497_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.vbool497_rep_rep_F[nMatches][nTeamsPerMatch]);
				}
			}
			for(int nPlayers = 0; nPlayers<3585; nPlayers++) {
				this.skills_prior_use_B[nPlayers] = Gaussian.Uniform();
			}
			this.vbool496_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.vBernoulli58);
			this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde2_isDone = true;
			this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde2_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and must reset on changes to Match_time_m and p_time_m__t__n and PlayerIndex and PlayerInTeam and vdouble__1010</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_Init_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdoubl16(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_Init_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdoubl16_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_Init_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdoubl16_isInitialised)) {
				return ;
			}
			for(int nMatches = 0; nMatches<521; nMatches++) {
				this.vdouble__1012_marginal_F[nMatches] = Gaussian.Uniform();
				this.vdouble__1012_use_B_nMatches__buffer[nMatches] = VariablePointOp_Rprop.BufferInit();
			}
			this.Changed_numberOfIterationsDecreased_Init_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdoubl16_isDone = true;
			this.Changed_numberOfIterationsDecreased_Init_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdoubl16_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and p_time_m__t__n and PlayerIndex and PlayerInTeam and vdouble__1022 and vdouble__1023 and must reset on changes to deathcount and killcount and Match_time_m and quit and team2wins</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__112(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__112_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__112_isInitialised)) {
				return ;
			}
			for(int nMatches = 0; nMatches<521; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Message to 'perf_n_m' from Product factor
						this.perf_n_m_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(this.perf_from_ds_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
					}
				}
			}
			this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__112_isDone = true;
			this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__112_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and PlayerIndex and PlayerInTeam and vdouble__1022 and vdouble__1023 and must reset on changes to deathcount and killcount and Match_time_m and p_time_m__t__n and quit and team2wins</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__1023_Init_deathc11(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__1023_Init_deathc11_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__1023_Init_deathc11_isInitialised)) {
				return ;
			}
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Message to 'skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' from GetDeepJaggedItems factor
				this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F[nMatches] = GetDeepJaggedItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>,Gaussian>(this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B[nMatches], this.skills_prior_F, this.skills_prior_use_F_marginal, this.playerIndex, nMatches, this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F[nMatches]);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Message to 'perf_from_ds' from Gaussian factor
						this.perf_from_ds_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.SampleAverageConditional(this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 1.0);
					}
				}
			}
			this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__1023_Init_deathc11_isDone = true;
			this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__1023_Init_deathc11_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and PlayerIndex and PlayerInTeam and vint__266 and must reset on changes to time_passed and vdouble__1010 and vdouble__1011</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__266_Init_time_passed_vdouble__10119(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__266_Init_time_passed_vdouble__10119_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__266_Init_time_passed_vdouble__10119_isInitialised)) {
				return ;
			}
			for(int nMatches = 0; nMatches<521; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						if (this.Vint__266[this.playerIndex[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]]==1) {
							this.vdouble__1019_PlayerIndex_nMatches_nTeamsPerMatch_nPlayersMinusPerTeam_1__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						}
					}
				}
			}
			this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__266_Init_time_passed_vdouble__10119_isDone = true;
			this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__266_Init_time_passed_vdouble__10119_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and PlayerInTeam and must reset on changes to deathcount and killcount and Match_time_m and p_time_m__t__n and PlayerIndex and quit and team2wins and vdouble__1022 and vdouble__1023</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5_isInitialised)) {
				return ;
			}
			for(int nMatches = 0; nMatches<521; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						this.player_perf_t__n_depth1_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
				for(int _a3 = 0; _a3<this.playerInTeam[nMatches][0]; _a3++) {
					this.player_perf_t__n_item0_uses_F[nMatches][0][_a3] = Gaussian.Uniform();
				}
				for(int _a4 = 0; _a4<this.playerInTeam[nMatches][1]; _a4++) {
					this.player_perf_t__n_item1_uses_B[nMatches][0][_a4] = Gaussian.Uniform();
				}
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					if (nTeamsPerMatch==1) {
						this.player_perf_t__n_item1_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.ToDefInit<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item1_uses_F[nMatches][0]);
					}
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						if (nTeamsPerMatch==0) {
							this.vdouble3454_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
							this.vdouble3455_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
							this.Perfomance_opposing_team_0__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						}
						this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						if (nTeamsPerMatch==0) {
							this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.MarginalInit<Gaussian>(this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							this.Perfomance_opposing_team_uses_B_toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.ToDefInit<Gaussian>(this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						}
						this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = Gaussian.Uniform();
						this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = Gaussian.Uniform();
						this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = Gaussian.Uniform();
						if (nTeamsPerMatch==1) {
							this.Perfomance_opposing_team_1__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
							this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.MarginalInit<Gaussian>(this.Perfomance_opposing_team_1__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							this.Perfomance_opposing_team_uses_B_toDef2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.ToDefInit<Gaussian>(this.Perfomance_opposing_team_1__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						}
						this.vdouble3475_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = Gaussian.Uniform();
						this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = Gaussian.Uniform();
						this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = Gaussian.Uniform();
						this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3] = Gaussian.Uniform();
						this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = Gaussian.Uniform();
						this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3] = Gaussian.Uniform();
						this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = Gaussian.Uniform();
						this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = Gaussian.Uniform();
						this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = Gaussian.Uniform();
						this.vbool496_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Bernoulli.Uniform();
						this.vbool499_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Bernoulli.Uniform();
						this.vbool497_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Bernoulli.Uniform();
						this.vbool497_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Bernoulli.Uniform();
						this.vbool499_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Bernoulli.Uniform();
						this.Under_performing_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Bernoulli.Uniform();
						this.vdouble3488_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble3486_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble3484_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble3482_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble3465_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						for(int _a2 = 0; _a2<this.playerInTeam[nMatches][1]; _a2++) {
							if (nTeamsPerMatch==1) {
								this.player_perf_t__n_1_1__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][_a2] = Gaussian.Uniform();
							}
						}
					}
				}
				for(int _a3 = 0; _a3<this.playerInTeam[nMatches][0]; _a3++) {
					this.player_perf_t__n_item0_uses_B[nMatches][1][_a3] = Gaussian.Uniform();
				}
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					if (nTeamsPerMatch==0) {
						this.player_perf_t__n_item0_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.MarginalInit<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item0_uses_F[nMatches][0]);
						this.player_perf_t__n_item0_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.ToDefInit<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item0_uses_F[nMatches][0]);
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							for(int _a3 = 0; _a3<this.playerInTeam[nMatches][0]; _a3++) {
								this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][_a3] = Gaussian.Uniform();
							}
							for(int _a = 0; _a<this.playerInTeam[nMatches][0]; _a++) {
								this.player_perf_t__n_0_0__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][_a] = Gaussian.Uniform();
							}
						}
					}
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						this.player_perf_t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.ToDefInit<Gaussian>(this.player_perf_t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.perf_from_ds_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.perf_n_m_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.MarginalInit<Gaussian>(this.player_perf_t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						this.vdouble3482_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble3484_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble3486_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble3488_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.Under_performing_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Bernoulli.Uniform();
						this.vbool496_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Bernoulli.Uniform();
					}
				}
			}
			this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5_isDone = true;
			this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and team2wins and must reset on changes to deathcount and killcount and Match_time_m and p_time_m__t__n and PlayerIndex and PlayerInTeam and quit and vdouble__1022 and vdouble__1023</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_7(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_7_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_7_isInitialised)) {
				return ;
			}
			for(int nMatches = 0; nMatches<521; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					this.Diff_2__uses_B[nMatches][0] = Gaussian.Uniform();
				}
			}
			this.Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_7_isDone = true;
			this.Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_7_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and vdouble__1022 and vdouble__1023 and must reset on changes to deathcount and killcount and Match_time_m and p_time_m__t__n and PlayerIndex and PlayerInTeam and quit and team2wins</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_vdouble__1022_vdouble__1023_Init_deathcount_killcount_Match_time10(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_vdouble__1022_vdouble__1023_Init_deathcount_killcount_Match_time10_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_vdouble__1022_vdouble__1023_Init_deathcount_killcount_Match_time10_isInitialised)) {
				return ;
			}
			this.skills_prior_use_F_marginal = GetDeepJaggedItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.skills_prior_F, this.skills_prior_use_B, this.skills_prior_use_F_marginal);
			this.Changed_numberOfIterationsDecreased_vdouble__1022_vdouble__1023_Init_deathcount_killcount_Match_time10_isDone = true;
			this.Changed_numberOfIterationsDecreased_vdouble__1022_vdouble__1023_Init_deathcount_killcount_Match_time10_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of p_time_m__t__n and PlayerInTeam</summary>
		private void Changed_p_time_m__t__n_PlayerInTeam()
		{
			if (this.Changed_p_time_m__t__n_PlayerInTeam_isDone) {
				return ;
			}
			for(int nMatches = 0; nMatches<521; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					if (this.playerInTeam[nMatches][nTeamsPerMatch]>0) {
						this.vdouble3445_reduced[nMatches][nTeamsPerMatch] = Factor.Sum(this.P_time_m__t__n[nMatches][nTeamsPerMatch]);
						if (nTeamsPerMatch==0) {
							this.vdouble3452_reduced[nMatches][nTeamsPerMatch] = Factor.Sum(this.P_time_m__t__n[nMatches][1]);
						}
					}
				}
			}
			// Create array for 'p_time_m__t__n_marginal' Forwards messages.
			this.p_time_m__t__n_marginal_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(521);
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for 'p_time_m__t__n_marginal' Forwards messages.
				this.p_time_m__t__n_marginal_F[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for 'p_time_m__t__n_marginal' Forwards messages.
					this.p_time_m__t__n_marginal_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						this.p_time_m__t__n_marginal_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Message to 'p_time_m__t__n_marginal' from DerivedVariable factor
			this.p_time_m__t__n_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>,double[][][]>(this.P_time_m__t__n, this.p_time_m__t__n_marginal_F);
			this.Changed_p_time_m__t__n_PlayerInTeam_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of PlayerIndex</summary>
		private void Changed_PlayerIndex()
		{
			if (this.Changed_PlayerIndex_isDone) {
				return ;
			}
			// Create array for 'PlayerIndex_marginal' Forwards messages.
			this.PlayerIndex_marginal_F = new PointMass<int[][][]>(this.playerIndex);
			// Message to 'PlayerIndex_marginal' from DerivedVariable factor
			this.PlayerIndex_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int[][][]>,int[][][]>(this.playerIndex, this.PlayerIndex_marginal_F);
			this.Changed_PlayerIndex_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of PlayerIndex and PlayerInTeam and vint__266</summary>
		private void Changed_PlayerIndex_PlayerInTeam_vint__266()
		{
			if (this.Changed_PlayerIndex_PlayerInTeam_vint__266_isDone) {
				return ;
			}
			for(int nMatches = 0; nMatches<521; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble__1019_PlayerIndex_nMatches_nTeamsPerMatch_nPlayersMinusPerTeam_1__B'
					this.vdouble__1019_PlayerIndex_nMatches_nTeamsPerMatch_nPlayersMinusPerTeam_1__B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
				}
			}
			this.Changed_PlayerIndex_PlayerInTeam_vint__266_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of PlayerInTeam</summary>
		private void Changed_PlayerInTeam()
		{
			if (this.Changed_PlayerInTeam_isDone) {
				return ;
			}
			for(int nMatches = 0; nMatches<521; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for 'player_perf_t__n_depth1' Forwards messages.
					this.player_perf_t__n_depth1_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
				}
				// Create array for 'player_perf_t__n_item1_uses' Forwards messages.
				this.player_perf_t__n_item1_uses_F[nMatches][0] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][1]);
				for(int _a4 = 0; _a4<this.playerInTeam[nMatches][1]; _a4++) {
					this.player_perf_t__n_item1_uses_F[nMatches][0][_a4] = Gaussian.Uniform();
				}
				// Create array for 'player_perf_t__n_item0_uses' Forwards messages.
				this.player_perf_t__n_item0_uses_F[nMatches][0] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][0]);
				// Create array for 'player_perf_t__n_item1_uses' Backwards messages.
				this.player_perf_t__n_item1_uses_B[nMatches][0] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][1]);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					this.vdouble3445_reduced[nMatches][nTeamsPerMatch] = default(double);
					this.Avg_play_time_team_reduced[nMatches][nTeamsPerMatch] = default(double);
					this.vdouble3452_reduced[nMatches][nTeamsPerMatch] = default(double);
					this.vdouble3453_reduced[nMatches][nTeamsPerMatch] = default(double);
					// Create array for replicates of 'vdouble3454_F'
					this.vdouble3454_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble3455_F'
					this.vdouble3455_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'Perfomance_opposing_team_0__F'
					this.Perfomance_opposing_team_0__F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'Perfomance_opposing_team_F'
					this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'Perfomance_opposing_team_uses_F_marginal'
					this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'Perfomance_opposing_team_uses_B_toDef'
					this.Perfomance_opposing_team_uses_B_toDef[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'Perfomance_opposing_team_uses_F'
					this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]][];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Create array for 'Perfomance_opposing_team_uses' Forwards messages.
						this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = new Gaussian[3];
					}
					// Create array for replicates of 'Perfomance_opposing_team_1__F'
					this.Perfomance_opposing_team_1__F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'Perfomance_opposing_team_uses_F_marginal2'
					this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'Perfomance_opposing_team_uses_B_toDef2'
					this.Perfomance_opposing_team_uses_B_toDef2[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble3475_F'
					this.vdouble3475_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for 'player_perf_t__n_uses' Backwards messages.
					this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]][];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Create array for 'player_perf_t__n_uses' Backwards messages.
						this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = new Gaussian[4];
					}
					// Create array for 'player_perf_t__n_uses' Forwards messages.
					this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]][];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Create array for 'player_perf_t__n_uses' Forwards messages.
						this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = new Gaussian[4];
					}
					// Create array for replicates of 'Perfomance_opposing_team_uses_B'
					this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]][];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Create array for 'Perfomance_opposing_team_uses' Backwards messages.
						this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = new Gaussian[3];
					}
					// Create array for 'vbool496_rep_rep_rep' Forwards messages.
					this.vbool496_rep_rep_rep_F[nMatches][nTeamsPerMatch] = new Bernoulli[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vbool499_F'
					this.vbool499_F[nMatches][nTeamsPerMatch] = new Bernoulli[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for 'vbool497_rep_rep_rep' Backwards messages.
					this.vbool497_rep_rep_rep_B[nMatches][nTeamsPerMatch] = new Bernoulli[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for 'vbool497_rep_rep_rep' Forwards messages.
					this.vbool497_rep_rep_rep_F[nMatches][nTeamsPerMatch] = new Bernoulli[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vbool499_B'
					this.vbool499_B[nMatches][nTeamsPerMatch] = new Bernoulli[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'Under_performing_B'
					this.Under_performing_B[nMatches][nTeamsPerMatch] = new Bernoulli[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble3488_B'
					this.vdouble3488_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble3486_use_B'
					this.vdouble3486_use_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble3484_B'
					this.vdouble3484_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble3482_B'
					this.vdouble3482_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble3465_F'
					this.vdouble3465_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'player_perf_t__n_1_1__B'
					this.player_perf_t__n_1_1__B[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						if (nTeamsPerMatch==1) {
							// Create array for 'player_perf_t__n_1_1_' Backwards messages.
							this.player_perf_t__n_1_1__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][1]);
						}
					}
				}
				// Create array for 'player_perf_t__n_item0_uses' Backwards messages.
				this.player_perf_t__n_item0_uses_B[nMatches][1] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][0]);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					if (nTeamsPerMatch==0) {
						// Create array for 'player_perf_t__n_item0_rep' Forwards messages.
						this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>[this.playerInTeam[nMatches][nTeamsPerMatch]];
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Create array for 'player_perf_t__n_item0_rep' Forwards messages.
							this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][0]);
						}
					}
					// Create array for replicates of 'player_perf_t__n_0_0__B'
					this.player_perf_t__n_0_0__B[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						if (nTeamsPerMatch==0) {
							// Create array for 'player_perf_t__n_0_0_' Backwards messages.
							this.player_perf_t__n_0_0__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][0]);
						}
					}
					// Create array for 'player_perf_t__n' Forwards messages.
					this.player_perf_t__n_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					// Create array for replicates of 'player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef'
					this.player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for 'skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' Backwards messages.
					this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					// Create array for 'skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' Forwards messages.
					this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					// Create array for replicates of 'perf_from_ds_F'
					this.perf_from_ds_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'perf_n_m_F'
					this.perf_n_m_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal'
					this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble3482_F'
					this.vdouble3482_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble3484_F'
					this.vdouble3484_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble3486_F'
					this.vdouble3486_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble3488_F'
					this.vdouble3488_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'Under_performing_F'
					this.Under_performing_F[nMatches][nTeamsPerMatch] = new Bernoulli[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for 'vbool496_rep_rep_rep' Backwards messages.
					this.vbool496_rep_rep_rep_B[nMatches][nTeamsPerMatch] = new Bernoulli[this.playerInTeam[nMatches][nTeamsPerMatch]];
				}
			}
			// Create array for 'PlayerInTeam_marginal' Forwards messages.
			this.PlayerInTeam_marginal_F = new PointMass<int[][]>(this.playerInTeam);
			// Message to 'PlayerInTeam_marginal' from DerivedVariable factor
			this.PlayerInTeam_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int[][]>,int[][]>(this.playerInTeam, this.PlayerInTeam_marginal_F);
			this.Changed_PlayerInTeam_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of PlayerInTeam and quit</summary>
		private void Changed_PlayerInTeam_quit()
		{
			if (this.Changed_PlayerInTeam_quit_isDone) {
				return ;
			}
			// Create array for 'quit_marginal' Forwards messages.
			this.quit_marginal_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]>(521);
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for 'quit_marginal' Forwards messages.
				this.quit_marginal_F[nMatches] = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(2);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for 'quit_marginal' Forwards messages.
					this.quit_marginal_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Bernoulli,bool>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						this.quit_marginal_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Bernoulli.Uniform();
					}
				}
			}
			// Message to 'quit_marginal' from DerivedVariable factor
			this.quit_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]>,bool[][][]>(this.Quit, this.quit_marginal_F);
			this.Changed_PlayerInTeam_quit_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of PlayerInTeam and time_passed</summary>
		private void Changed_PlayerInTeam_time_passed()
		{
			if (this.Changed_PlayerInTeam_time_passed_isDone) {
				return ;
			}
			// Create array for 'time_passed_marginal' Forwards messages.
			this.time_passed_marginal_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(521);
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for 'time_passed_marginal' Forwards messages.
				this.time_passed_marginal_F[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for 'time_passed_marginal' Forwards messages.
					this.time_passed_marginal_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						this.time_passed_marginal_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Message to 'time_passed_marginal' from DerivedVariable factor
			this.time_passed_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>,double[][][]>(this.Time_passed, this.time_passed_marginal_F);
			this.Changed_PlayerInTeam_time_passed_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of team2wins</summary>
		private void Changed_team2wins()
		{
			if (this.Changed_team2wins_isDone) {
				return ;
			}
			// Create array for replicates of 'Diff_2__uses_B'
			this.Diff_2__uses_B = new Gaussian[521][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					// Create array for 'Diff_2__uses' Backwards messages.
					this.Diff_2__uses_B[nMatches] = new Gaussian[2];
				}
			}
			// Create array for replicates of 'vbool503'
			bool[] vbool503 = new bool[521];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					vbool503[nMatches] = true;
					Constrain.Equal<bool>(true, vbool503[nMatches]);
				}
			}
			// Create array for replicates of 'vbool506'
			bool[] vbool506 = new bool[521];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					vbool506[nMatches] = true;
					Constrain.Equal<bool>(true, vbool506[nMatches]);
				}
			}
			// Create array for replicates of 'vbool508'
			bool[] vbool508 = new bool[521];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				if (this.Team2wins[nMatches]==0) {
					vbool508[nMatches] = true;
					Constrain.Equal<bool>(true, vbool508[nMatches]);
				}
			}
			// Create array for replicates of 'vbool510'
			bool[] vbool510 = new bool[521];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				if (this.Team2wins[nMatches]==1) {
					vbool510[nMatches] = true;
					Constrain.Equal<bool>(true, vbool510[nMatches]);
				}
			}
			// Create array for 'team2wins_marginal' Forwards messages.
			this.team2wins_marginal_F = new PointMass<int[]>(this.Team2wins);
			// Message to 'team2wins_marginal' from DerivedVariable factor
			this.team2wins_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int[]>,int[]>(this.Team2wins, this.team2wins_marginal_F);
			this.Changed_team2wins_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vdouble__1009</summary>
		private void Changed_vdouble__1009()
		{
			if (this.Changed_vdouble__1009_isDone) {
				return ;
			}
			// Create array for 'vdouble__1009_marginal' Forwards messages.
			this.vdouble__1009_marginal_F = new DistributionStructArray<Gaussian,double>(200);
			for(int index379 = 0; index379<200; index379++) {
				this.vdouble__1009_marginal_F[index379] = Gaussian.Uniform();
			}
			// Message to 'vdouble__1009_marginal' from DerivedVariable factor
			this.vdouble__1009_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Gaussian,double>,double[]>(this.Vdouble__1009, this.vdouble__1009_marginal_F);
			this.Changed_vdouble__1009_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vdouble__1010</summary>
		private void Changed_vdouble__1010()
		{
			if (this.Changed_vdouble__1010_isDone) {
				return ;
			}
			// Create array for 'vdouble__1010_marginal' Forwards messages.
			this.vdouble__1010_marginal_F = new DistributionStructArray<Gaussian,double>(3585);
			for(int nPlayers = 0; nPlayers<3585; nPlayers++) {
				this.vdouble__1010_marginal_F[nPlayers] = Gaussian.Uniform();
			}
			// Message to 'vdouble__1010_marginal' from DerivedVariable factor
			this.vdouble__1010_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Gaussian,double>,double[]>(this.Vdouble__1010, this.vdouble__1010_marginal_F);
			this.Changed_vdouble__1010_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vdouble__1011</summary>
		private void Changed_vdouble__1011()
		{
			if (this.Changed_vdouble__1011_isDone) {
				return ;
			}
			// Create array for 'vdouble__1011_marginal' Forwards messages.
			this.vdouble__1011_marginal_F = new DistributionStructArray<Gaussian,double>(3585);
			for(int nPlayers = 0; nPlayers<3585; nPlayers++) {
				this.vdouble__1011_marginal_F[nPlayers] = Gaussian.Uniform();
			}
			// Message to 'vdouble__1011_marginal' from DerivedVariable factor
			this.vdouble__1011_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Gaussian,double>,double[]>(this.Vdouble__1011, this.vdouble__1011_marginal_F);
			this.Changed_vdouble__1011_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vdouble__1022</summary>
		private void Changed_vdouble__1022()
		{
			if (this.Changed_vdouble__1022_isDone) {
				return ;
			}
			// Create array for 'vdouble__1022_marginal' Forwards messages.
			this.vdouble__1022_marginal_F = new DistributionStructArray<Gaussian,double>(3585);
			for(int nPlayers = 0; nPlayers<3585; nPlayers++) {
				this.vdouble__1022_marginal_F[nPlayers] = Gaussian.Uniform();
			}
			// Message to 'vdouble__1022_marginal' from DerivedVariable factor
			this.vdouble__1022_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Gaussian,double>,double[]>(this.Vdouble__1022, this.vdouble__1022_marginal_F);
			this.Changed_vdouble__1022_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vdouble__1022 and vdouble__1023</summary>
		private void Changed_vdouble__1022_vdouble__1023()
		{
			if (this.Changed_vdouble__1022_vdouble__1023_isDone) {
				return ;
			}
			for(int nPlayers = 0; nPlayers<3585; nPlayers++) {
				// Message to 'skills_prior' from Gaussian factor
				this.skills_prior_F[nPlayers] = GaussianOpBase.SampleAverageConditional(this.Vdouble__1022[nPlayers], this.Vdouble__1023[nPlayers]);
			}
			this.Changed_vdouble__1022_vdouble__1023_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vdouble__1023</summary>
		private void Changed_vdouble__1023()
		{
			if (this.Changed_vdouble__1023_isDone) {
				return ;
			}
			// Create array for 'vdouble__1023_marginal' Forwards messages.
			this.vdouble__1023_marginal_F = new DistributionStructArray<Gaussian,double>(3585);
			for(int nPlayers = 0; nPlayers<3585; nPlayers++) {
				this.vdouble__1023_marginal_F[nPlayers] = Gaussian.Uniform();
			}
			// Message to 'vdouble__1023_marginal' from DerivedVariable factor
			this.vdouble__1023_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Gaussian,double>,double[]>(this.Vdouble__1023, this.vdouble__1023_marginal_F);
			this.Changed_vdouble__1023_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vdouble__1035</summary>
		private void Changed_vdouble__1035()
		{
			if (this.Changed_vdouble__1035_isDone) {
				return ;
			}
			// Create array for 'vdouble__1035_marginal' Forwards messages.
			this.vdouble__1035_marginal_F = new DistributionStructArray<Gaussian,double>(3585);
			for(int nPlayers = 0; nPlayers<3585; nPlayers++) {
				this.vdouble__1035_marginal_F[nPlayers] = Gaussian.Uniform();
			}
			// Message to 'vdouble__1035_marginal' from DerivedVariable factor
			this.vdouble__1035_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Gaussian,double>,double[]>(this.Vdouble__1035, this.vdouble__1035_marginal_F);
			// Create array for 'vdouble__1037_marginal' Forwards messages.
			this.vdouble__1037_marginal_F = new DistributionStructArray<Gaussian,double>(3585);
			for(int nPlayers = 0; nPlayers<3585; nPlayers++) {
				this.vdouble__1037_marginal_F[nPlayers] = Gaussian.Uniform();
			}
			// Message to 'vdouble__1037_marginal' from DerivedVariable factor
			this.vdouble__1037_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Gaussian,double>,double[]>(this.Vdouble__1035, this.vdouble__1037_marginal_F);
			this.Changed_vdouble__1035_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vint____118</summary>
		private void Changed_vint____118()
		{
			if (this.Changed_vint____118_isDone) {
				return ;
			}
			// Create array for 'vint____118_marginal' Forwards messages.
			this.vint____118_marginal_F = new PointMass<int[][]>(this.Vint____118);
			// Message to 'vint____118_marginal' from DerivedVariable factor
			this.vint____118_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int[][]>,int[][]>(this.Vint____118, this.vint____118_marginal_F);
			this.Changed_vint____118_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vint__266</summary>
		private void Changed_vint__266()
		{
			if (this.Changed_vint__266_isDone) {
				return ;
			}
			// Create array for 'vint__266_marginal' Forwards messages.
			this.vint__266_marginal_F = new PointMass<int[]>(this.Vint__266);
			// Message to 'vint__266_marginal' from DerivedVariable factor
			this.vint__266_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int[]>,int[]>(this.Vint__266, this.vint__266_marginal_F);
			this.Changed_vint__266_isDone = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			this.vBernoulli58 = Bernoulli.FromLogOdds(0.69314718055994573);
			// Create array for 'skills_prior' Forwards messages.
			this.skills_prior_F = new DistributionStructArray<Gaussian,double>(3585);
			for(int nPlayers = 0; nPlayers<3585; nPlayers++) {
				this.skills_prior_F[nPlayers] = Gaussian.Uniform();
			}
			// Create array for replicates of 'player_perf_t__n_depth1_F'
			this.player_perf_t__n_depth1_F = new DistributionStructArray<Gaussian,double>[521][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for 'player_perf_t__n_depth1' Forwards messages.
				this.player_perf_t__n_depth1_F[nMatches] = new DistributionStructArray<Gaussian,double>[2];
			}
			// Create array for replicates of 'player_perf_t__n_item1_uses_F'
			this.player_perf_t__n_item1_uses_F = new DistributionStructArray<Gaussian,double>[521][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for 'player_perf_t__n_item1_uses' Forwards messages.
				this.player_perf_t__n_item1_uses_F[nMatches] = new DistributionStructArray<Gaussian,double>[2];
			}
			// Create array for replicates of 'player_perf_t__n_item0_uses_F'
			this.player_perf_t__n_item0_uses_F = new DistributionStructArray<Gaussian,double>[521][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for 'player_perf_t__n_item0_uses' Forwards messages.
				this.player_perf_t__n_item0_uses_F[nMatches] = new DistributionStructArray<Gaussian,double>[2];
			}
			// Create array for replicates of 'player_perf_t__n_item1_uses_B'
			this.player_perf_t__n_item1_uses_B = new DistributionStructArray<Gaussian,double>[521][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for 'player_perf_t__n_item1_uses' Backwards messages.
				this.player_perf_t__n_item1_uses_B[nMatches] = new DistributionStructArray<Gaussian,double>[2];
			}
			// Create array for replicates of 'player_perf_t__n_item1_rep_B_toDef'
			this.player_perf_t__n_item1_rep_B_toDef = new DistributionStructArray<Gaussian,double>[521][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'player_perf_t__n_item1_rep_B_toDef'
				this.player_perf_t__n_item1_rep_B_toDef[nMatches] = new DistributionStructArray<Gaussian,double>[2];
			}
			this.vdouble3445_reduced = new double[521][];
			this.Avg_play_time_team_reduced = new double[521][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				this.vdouble3445_reduced[nMatches] = new double[2];
				this.Avg_play_time_team_reduced[nMatches] = new double[2];
			}
			this.vdouble3452_reduced = new double[521][];
			this.vdouble3453_reduced = new double[521][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				this.vdouble3452_reduced[nMatches] = new double[2];
				this.vdouble3453_reduced[nMatches] = new double[2];
			}
			// Create array for replicates of 'vdouble3454_F'
			this.vdouble3454_F = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vdouble3454_F'
				this.vdouble3454_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble3455_F'
			this.vdouble3455_F = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vdouble3455_F'
				this.vdouble3455_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'Perfomance_opposing_team_0__F'
			this.Perfomance_opposing_team_0__F = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'Perfomance_opposing_team_0__F'
				this.Perfomance_opposing_team_0__F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'Perfomance_opposing_team_F'
			this.Perfomance_opposing_team_F = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'Perfomance_opposing_team_F'
				this.Perfomance_opposing_team_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'Perfomance_opposing_team_uses_F_marginal'
			this.Perfomance_opposing_team_uses_F_marginal = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'Perfomance_opposing_team_uses_F_marginal'
				this.Perfomance_opposing_team_uses_F_marginal[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'Perfomance_opposing_team_uses_B_toDef'
			this.Perfomance_opposing_team_uses_B_toDef = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'Perfomance_opposing_team_uses_B_toDef'
				this.Perfomance_opposing_team_uses_B_toDef[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'Perfomance_opposing_team_uses_F'
			this.Perfomance_opposing_team_uses_F = new Gaussian[521][][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'Perfomance_opposing_team_uses_F'
				this.Perfomance_opposing_team_uses_F[nMatches] = new Gaussian[2][][];
			}
			// Create array for replicates of 'Perfomance_opposing_team_1__F'
			this.Perfomance_opposing_team_1__F = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'Perfomance_opposing_team_1__F'
				this.Perfomance_opposing_team_1__F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'Perfomance_opposing_team_uses_F_marginal2'
			this.Perfomance_opposing_team_uses_F_marginal2 = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'Perfomance_opposing_team_uses_F_marginal2'
				this.Perfomance_opposing_team_uses_F_marginal2[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'Perfomance_opposing_team_uses_B_toDef2'
			this.Perfomance_opposing_team_uses_B_toDef2 = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'Perfomance_opposing_team_uses_B_toDef2'
				this.Perfomance_opposing_team_uses_B_toDef2[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble3475_F'
			this.vdouble3475_F = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vdouble3475_F'
				this.vdouble3475_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'player_perf_t__n_uses_B'
			this.player_perf_t__n_uses_B = new Gaussian[521][][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for 'player_perf_t__n_uses' Backwards messages.
				this.player_perf_t__n_uses_B[nMatches] = new Gaussian[2][][];
			}
			// Create array for replicates of 'player_perf_t__n_uses_F'
			this.player_perf_t__n_uses_F = new Gaussian[521][][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for 'player_perf_t__n_uses' Forwards messages.
				this.player_perf_t__n_uses_F[nMatches] = new Gaussian[2][][];
			}
			// Create array for replicates of 'Perfomance_opposing_team_uses_B'
			this.Perfomance_opposing_team_uses_B = new Gaussian[521][][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'Perfomance_opposing_team_uses_B'
				this.Perfomance_opposing_team_uses_B[nMatches] = new Gaussian[2][][];
			}
			// Create array for 'vbool496_rep' Forwards messages.
			this.vbool496_rep_F = new Bernoulli[521];
			// Create array for replicates of 'vbool496_rep_rep_F_marginal'
			this.vbool496_rep_rep_F_marginal = new Bernoulli[521];
			// Create array for replicates of 'vbool496_rep_rep_B_toDef'
			this.vbool496_rep_rep_B_toDef = new Bernoulli[521];
			// Create array for replicates of 'vbool496_rep_rep_F'
			this.vbool496_rep_rep_F = new Bernoulli[521][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for 'vbool496_rep_rep' Forwards messages.
				this.vbool496_rep_rep_F[nMatches] = new Bernoulli[2];
			}
			// Create array for replicates of 'vbool496_rep_rep_rep_F_marginal'
			this.vbool496_rep_rep_rep_F_marginal = new Bernoulli[521][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vbool496_rep_rep_rep_F_marginal'
				this.vbool496_rep_rep_rep_F_marginal[nMatches] = new Bernoulli[2];
			}
			// Create array for replicates of 'vbool496_rep_rep_rep_B_toDef'
			this.vbool496_rep_rep_rep_B_toDef = new Bernoulli[521][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vbool496_rep_rep_rep_B_toDef'
				this.vbool496_rep_rep_rep_B_toDef[nMatches] = new Bernoulli[2];
			}
			// Create array for replicates of 'vbool496_rep_rep_rep_F'
			this.vbool496_rep_rep_rep_F = new Bernoulli[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vbool496_rep_rep_rep_F'
				this.vbool496_rep_rep_rep_F[nMatches] = new Bernoulli[2][];
			}
			this.vBernoulli59 = Bernoulli.FromLogOdds(-0.6931471805599454);
			// Create array for replicates of 'vbool499_F'
			this.vbool499_F = new Bernoulli[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vbool499_F'
				this.vbool499_F[nMatches] = new Bernoulli[2][];
			}
			// Create array for replicates of 'vbool497_rep_rep_rep_B'
			this.vbool497_rep_rep_rep_B = new Bernoulli[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vbool497_rep_rep_rep_B'
				this.vbool497_rep_rep_rep_B[nMatches] = new Bernoulli[2][];
			}
			// Create array for replicates of 'vbool497_rep_rep_F'
			this.vbool497_rep_rep_F = new Bernoulli[521][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for 'vbool497_rep_rep' Forwards messages.
				this.vbool497_rep_rep_F[nMatches] = new Bernoulli[2];
			}
			// Create array for replicates of 'vbool497_rep_rep_rep_B_toDef'
			this.vbool497_rep_rep_rep_B_toDef = new Bernoulli[521][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vbool497_rep_rep_rep_B_toDef'
				this.vbool497_rep_rep_rep_B_toDef[nMatches] = new Bernoulli[2];
			}
			// Create array for 'vbool497_rep' Forwards messages.
			this.vbool497_rep_F = new Bernoulli[521];
			// Create array for replicates of 'vbool497_rep_rep_B_toDef'
			this.vbool497_rep_rep_B_toDef = new Bernoulli[521];
			// Create array for replicates of 'vbool497_rep_rep_F_marginal'
			this.vbool497_rep_rep_F_marginal = new Bernoulli[521];
			// Create array for replicates of 'vbool497_rep_rep_rep_F_marginal'
			this.vbool497_rep_rep_rep_F_marginal = new Bernoulli[521][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vbool497_rep_rep_rep_F_marginal'
				this.vbool497_rep_rep_rep_F_marginal[nMatches] = new Bernoulli[2];
			}
			// Create array for replicates of 'vbool497_rep_rep_rep_F'
			this.vbool497_rep_rep_rep_F = new Bernoulli[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vbool497_rep_rep_rep_F'
				this.vbool497_rep_rep_rep_F[nMatches] = new Bernoulli[2][];
			}
			// Create array for replicates of 'vbool499_B'
			this.vbool499_B = new Bernoulli[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vbool499_B'
				this.vbool499_B[nMatches] = new Bernoulli[2][];
			}
			// Create array for replicates of 'Under_performing_B'
			this.Under_performing_B = new Bernoulli[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'Under_performing_B'
				this.Under_performing_B[nMatches] = new Bernoulli[2][];
			}
			// Create array for replicates of 'vdouble3488_B'
			this.vdouble3488_B = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vdouble3488_B'
				this.vdouble3488_B[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble3486_use_B'
			this.vdouble3486_use_B = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vdouble3486_use_B'
				this.vdouble3486_use_B[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble3484_B'
			this.vdouble3484_B = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vdouble3484_B'
				this.vdouble3484_B[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble3482_B'
			this.vdouble3482_B = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vdouble3482_B'
				this.vdouble3482_B[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble3465_F'
			this.vdouble3465_F = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vdouble3465_F'
				this.vdouble3465_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'player_perf_t__n_1_1__B'
			this.player_perf_t__n_1_1__B = new DistributionStructArray<Gaussian,double>[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'player_perf_t__n_1_1__B'
				this.player_perf_t__n_1_1__B[nMatches] = new DistributionStructArray<Gaussian,double>[2][];
			}
			// Create array for replicates of 'player_perf_t__n_item0_uses_B'
			this.player_perf_t__n_item0_uses_B = new DistributionStructArray<Gaussian,double>[521][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for 'player_perf_t__n_item0_uses' Backwards messages.
				this.player_perf_t__n_item0_uses_B[nMatches] = new DistributionStructArray<Gaussian,double>[2];
			}
			// Create array for replicates of 'player_perf_t__n_item0_rep_F_marginal'
			this.player_perf_t__n_item0_rep_F_marginal = new DistributionStructArray<Gaussian,double>[521][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'player_perf_t__n_item0_rep_F_marginal'
				this.player_perf_t__n_item0_rep_F_marginal[nMatches] = new DistributionStructArray<Gaussian,double>[2];
			}
			// Create array for replicates of 'player_perf_t__n_item0_rep_B_toDef'
			this.player_perf_t__n_item0_rep_B_toDef = new DistributionStructArray<Gaussian,double>[521][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'player_perf_t__n_item0_rep_B_toDef'
				this.player_perf_t__n_item0_rep_B_toDef[nMatches] = new DistributionStructArray<Gaussian,double>[2];
			}
			// Create array for replicates of 'player_perf_t__n_item0_rep_F'
			this.player_perf_t__n_item0_rep_F = new DistributionStructArray<Gaussian,double>[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'player_perf_t__n_item0_rep_F'
				this.player_perf_t__n_item0_rep_F[nMatches] = new DistributionStructArray<Gaussian,double>[2][];
			}
			// Create array for replicates of 'player_perf_t__n_0_0__B'
			this.player_perf_t__n_0_0__B = new DistributionStructArray<Gaussian,double>[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'player_perf_t__n_0_0__B'
				this.player_perf_t__n_0_0__B[nMatches] = new DistributionStructArray<Gaussian,double>[2][];
			}
			// Create array for replicates of 'player_perf_t__n_F'
			this.player_perf_t__n_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>[521];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for 'player_perf_t__n' Forwards messages.
				this.player_perf_t__n_F[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
			}
			// Create array for replicates of 'player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef'
			this.player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef'
				this.player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef[nMatches] = new Gaussian[2][];
			}
			// Create array for 'skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' Backwards messages.
			this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(521);
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for 'skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' Backwards messages.
				this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
			}
			// Create array for 'skills_prior_use' Backwards messages.
			this.skills_prior_use_B = new DistributionStructArray<Gaussian,double>(3585);
			// Create array for 'skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' Forwards messages.
			this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(521);
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for 'skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' Forwards messages.
				this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
			}
			// Create array for replicates of 'perf_from_ds_F'
			this.perf_from_ds_F = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'perf_from_ds_F'
				this.perf_from_ds_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'perf_n_m_F'
			this.perf_n_m_F = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'perf_n_m_F'
				this.perf_n_m_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal'
			this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal'
				this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble3482_F'
			this.vdouble3482_F = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vdouble3482_F'
				this.vdouble3482_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble3484_F'
			this.vdouble3484_F = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vdouble3484_F'
				this.vdouble3484_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble3486_F'
			this.vdouble3486_F = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vdouble3486_F'
				this.vdouble3486_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble3488_F'
			this.vdouble3488_F = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vdouble3488_F'
				this.vdouble3488_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'Under_performing_F'
			this.Under_performing_F = new Bernoulli[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'Under_performing_F'
				this.Under_performing_F[nMatches] = new Bernoulli[2][];
			}
			// Create array for replicates of 'vbool496_rep_rep_rep_B'
			this.vbool496_rep_rep_rep_B = new Bernoulli[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vbool496_rep_rep_rep_B'
				this.vbool496_rep_rep_rep_B[nMatches] = new Bernoulli[2][];
			}
			// Create array for 'vdouble__1012_marginal' Forwards messages.
			this.vdouble__1012_marginal_F = new DistributionStructArray<Gaussian,double>(521);
			// Create array for replicates of 'vdouble__1012_use_B_nMatches__buffer'
			this.vdouble__1012_use_B_nMatches__buffer = new RpropBufferData[521];
			// Create array for replicates of 'vdouble__1019_PlayerIndex_nMatches_nTeamsPerMatch_nPlayersMinusPerTeam_1__B'
			this.vdouble__1019_PlayerIndex_nMatches_nTeamsPerMatch_nPlayersMinusPerTeam_1__B = new Gaussian[521][][];
			for(int nMatches = 0; nMatches<521; nMatches++) {
				// Create array for replicates of 'vdouble__1019_PlayerIndex_nMatches_nTeamsPerMatch_nPlayersMinusPerTeam_1__B'
				this.vdouble__1019_PlayerIndex_nMatches_nTeamsPerMatch_nPlayersMinusPerTeam_1__B[nMatches] = new Gaussian[2][];
			}
			this.Constant_isDone = true;
		}

		/// <summary>
		/// Returns the marginal distribution for 'deathcount' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> DeathcountMarginal()
		{
			return this.deathcount_marginal_F;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_7_isDone = false;
					this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__266_Init_time_passed_vdouble__10119_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdoubl16_isDone = false;
					this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde2_isDone = false;
					this.Changed_numberOfIterationsDecreased_vdouble__1022_vdouble__1023_Init_deathcount_killcount_Match_time10_isDone = false;
					this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__1023_Init_deathc11_isDone = false;
					this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__112_isDone = false;
					this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1013_isDone = false;
					this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl14_isDone = false;
				}
				this.Changed_numberOfIterations_PlayerIndex_PlayerInTeam_time_passed_vdouble__1010_vdouble__1011_vint__2617_isDone = false;
				this.Changed_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1010_isDone = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam1_isDone = false;
			}
			this.Changed_vdouble__1035();
			this.Changed_vdouble__1023();
			this.Changed_vdouble__1022();
			this.Changed_vdouble__1011();
			this.Changed_vdouble__1010();
			this.Changed_vint__266();
			this.Changed_vdouble__1009();
			this.Changed_vint____118();
			this.Changed_PlayerInTeam_time_passed();
			this.Changed_PlayerInTeam_quit();
			this.Changed_Match_time_m();
			this.Changed_deathcount_PlayerInTeam();
			this.Changed_killcount_PlayerInTeam();
			this.Changed_PlayerIndex();
			this.Changed_team2wins();
			this.Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_7(initialise);
			this.Constant();
			this.Changed_PlayerIndex_PlayerInTeam_vint__266();
			this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__266_Init_time_passed_vdouble__10119(initialise);
			this.Changed_numberOfIterations_PlayerIndex_PlayerInTeam_time_passed_vdouble__1010_vdouble__1011_vint__2617(numberOfIterations);
			this.Changed_numberOfIterationsDecreased_Init_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdoubl16(initialise);
			this.Changed_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1010(numberOfIterations);
			this.Changed_PlayerInTeam();
			this.Changed_p_time_m__t__n_PlayerInTeam();
			this.Changed_Match_time_m_p_time_m__t__n_PlayerInTeam();
			this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5(initialise);
			this.Changed_vdouble__1022_vdouble__1023();
			this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde2(initialise);
			this.Changed_numberOfIterationsDecreased_vdouble__1022_vdouble__1023_Init_deathcount_killcount_Match_time10(initialise);
			this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__1023_Init_deathc11(initialise);
			this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1022_vdouble__112(initialise);
			this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1013(initialise);
			this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl14(initialise);
			this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam1(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="PlayerInTeam") {
				return this.PlayerInTeam;
			}
			if (variableName=="PlayerIndex") {
				return this.PlayerIndex;
			}
			if (variableName=="killcount") {
				return this.killcount;
			}
			if (variableName=="deathcount") {
				return this.deathcount;
			}
			if (variableName=="team2wins") {
				return this.team2wins;
			}
			if (variableName=="Match_time_m") {
				return this.Match_time_m;
			}
			if (variableName=="p_time_m__t__n") {
				return this.p_time_m__t__n;
			}
			if (variableName=="quit") {
				return this.quit;
			}
			if (variableName=="time_passed") {
				return this.time_passed;
			}
			if (variableName=="vint____118") {
				return this.vint____118;
			}
			if (variableName=="vdouble__1009") {
				return this.vdouble__1009;
			}
			if (variableName=="vint__266") {
				return this.vint__266;
			}
			if (variableName=="vdouble__1010") {
				return this.vdouble__1010;
			}
			if (variableName=="vdouble__1011") {
				return this.vdouble__1011;
			}
			if (variableName=="vdouble__1022") {
				return this.vdouble__1022;
			}
			if (variableName=="vdouble__1023") {
				return this.vdouble__1023;
			}
			if (variableName=="vdouble__1035") {
				return this.vdouble__1035;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'killcount' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> KillcountMarginal()
		{
			return this.killcount_marginal_F;
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="vdouble__1035") {
				return this.Vdouble__1035Marginal();
			}
			if (variableName=="vdouble__1037") {
				return this.Vdouble__1037Marginal();
			}
			if (variableName=="vdouble__1023") {
				return this.Vdouble__1023Marginal();
			}
			if (variableName=="vdouble__1022") {
				return this.Vdouble__1022Marginal();
			}
			if (variableName=="vdouble__1011") {
				return this.Vdouble__1011Marginal();
			}
			if (variableName=="vdouble__1010") {
				return this.Vdouble__1010Marginal();
			}
			if (variableName=="vint__266") {
				return this.Vint__266Marginal();
			}
			if (variableName=="vdouble__1009") {
				return this.Vdouble__1009Marginal();
			}
			if (variableName=="vint____118") {
				return this.Vint____118Marginal();
			}
			if (variableName=="time_passed") {
				return this.Time_passedMarginal();
			}
			if (variableName=="quit") {
				return this.QuitMarginal();
			}
			if (variableName=="Match_time_m") {
				return this.Match_time_mMarginal();
			}
			if (variableName=="deathcount") {
				return this.DeathcountMarginal();
			}
			if (variableName=="killcount") {
				return this.KillcountMarginal();
			}
			if (variableName=="PlayerIndex") {
				return this.PlayerIndexMarginal();
			}
			if (variableName=="team2wins") {
				return this.Team2winsMarginal();
			}
			if (variableName=="vdouble__1019") {
				return this.Vdouble__1019Marginal();
			}
			if (variableName=="vdouble__1012") {
				return this.Vdouble__1012Marginal();
			}
			if (variableName=="PlayerInTeam") {
				return this.PlayerInTeamMarginal();
			}
			if (variableName=="p_time_m__t__n") {
				return this.P_time_m__t__nMarginal();
			}
			if (variableName=="vbool496") {
				return this.Vbool496Marginal();
			}
			if (variableName=="vbool497") {
				return this.Vbool497Marginal();
			}
			if (variableName=="skills_prior") {
				return this.Skills_priorMarginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		/// <summary>
		/// Returns the marginal distribution for 'Match_time_m' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Match_time_mMarginal()
		{
			return this.Match_time_m_marginal_F;
		}

		private void OnMessageUpdated(MessageUpdatedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<MessageUpdatedEventArgs> handler = this.MessageUpdated;
			if (handler!=null) {
				handler(this, e);
			}
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>
		/// Returns the marginal distribution for 'p_time_m__t__n' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> P_time_m__t__nMarginal()
		{
			return this.p_time_m__t__n_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'PlayerIndex' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[][][]> PlayerIndexMarginal()
		{
			return this.PlayerIndex_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'PlayerInTeam' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[][]> PlayerInTeamMarginal()
		{
			return this.PlayerInTeam_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'quit' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]> QuitMarginal()
		{
			return this.quit_marginal_F;
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="PlayerInTeam") {
				this.PlayerInTeam = (int[][])value;
				return ;
			}
			if (variableName=="PlayerIndex") {
				this.PlayerIndex = (int[][][])value;
				return ;
			}
			if (variableName=="killcount") {
				this.killcount = (double[][][])value;
				return ;
			}
			if (variableName=="deathcount") {
				this.deathcount = (double[][][])value;
				return ;
			}
			if (variableName=="team2wins") {
				this.team2wins = (int[])value;
				return ;
			}
			if (variableName=="Match_time_m") {
				this.Match_time_m = (double[])value;
				return ;
			}
			if (variableName=="p_time_m__t__n") {
				this.p_time_m__t__n = (double[][][])value;
				return ;
			}
			if (variableName=="quit") {
				this.quit = (bool[][][])value;
				return ;
			}
			if (variableName=="time_passed") {
				this.time_passed = (double[][][])value;
				return ;
			}
			if (variableName=="vint____118") {
				this.vint____118 = (int[][])value;
				return ;
			}
			if (variableName=="vdouble__1009") {
				this.vdouble__1009 = (double[])value;
				return ;
			}
			if (variableName=="vint__266") {
				this.vint__266 = (int[])value;
				return ;
			}
			if (variableName=="vdouble__1010") {
				this.vdouble__1010 = (double[])value;
				return ;
			}
			if (variableName=="vdouble__1011") {
				this.vdouble__1011 = (double[])value;
				return ;
			}
			if (variableName=="vdouble__1022") {
				this.vdouble__1022 = (double[])value;
				return ;
			}
			if (variableName=="vdouble__1023") {
				this.vdouble__1023 = (double[])value;
				return ;
			}
			if (variableName=="vdouble__1035") {
				this.vdouble__1035 = (double[])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'skills_prior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Skills_priorMarginal()
		{
			return this.skills_prior_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'team2wins' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[]> Team2winsMarginal()
		{
			return this.team2wins_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'time_passed' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> Time_passedMarginal()
		{
			return this.time_passed_marginal_F;
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool496' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool496Marginal()
		{
			return this.vbool496_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool497' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool497Marginal()
		{
			return this.vbool497_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__1009' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__1009Marginal()
		{
			return this.vdouble__1009_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__1010' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__1010Marginal()
		{
			return this.vdouble__1010_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__1011' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__1011Marginal()
		{
			return this.vdouble__1011_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__1012' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__1012Marginal()
		{
			return ArrayHelper.MakeCopy<DistributionStructArray<Gaussian,double>>(this.vdouble__1012_marginal_F);
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__1019' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__1019Marginal()
		{
			return this.vdouble__1019_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__1022' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__1022Marginal()
		{
			return this.vdouble__1022_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__1023' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__1023Marginal()
		{
			return this.vdouble__1023_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__1035' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__1035Marginal()
		{
			return this.vdouble__1035_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__1037' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__1037Marginal()
		{
			return this.vdouble__1037_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vint____118' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[][]> Vint____118Marginal()
		{
			return this.vint____118_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vint__266' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[]> Vint__266Marginal()
		{
			return this.vint__266_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		/// <summary>Event that is fired when a message that is being monitored is updated.</summary>
		public event EventHandler<MessageUpdatedEventArgs> MessageUpdated;
		#endregion

	}

}
