// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;
using Microsoft.ML.Probabilistic.Collections;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.4.2203.202 at 14:58 on gioved√¨ 14 luglio 2022.
	/// </remarks>
	public partial class Model18_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>True if Changed_matchTime has executed. Set this to false to force re-execution of Changed_matchTime</summary>
		public bool Changed_matchTime_isDone;
		/// <summary>True if Changed_matchTime_numberOfIterations_PlayerIndex_PlayerInTeam_playerTime_vdouble__170 has executed. Set this to false to force re-execution of Changed_matchTime_numberOfIterations_PlayerIndex_PlayerInTeam_playerTime_vdouble__170</summary>
		public bool Changed_matchTime_numberOfIterations_PlayerIndex_PlayerInTeam_playerTime_vdouble__170_isDone;
		/// <summary>True if Changed_numberOfIterations_PlayerIndex_PlayerInTeam_time_passed_vdouble__170_vdouble__171_vint__50 has executed. Set this to false to force re-execution of Changed_numberOfIterations_PlayerIndex_PlayerInTeam_time_passed_vdouble__170_vdouble__171_vint__50</summary>
		public bool Changed_numberOfIterations_PlayerIndex_PlayerInTeam_time_passed_vdouble__170_vdouble__171_vint__50_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_matchTime_PlayerIndex_PlayerInTeam_playerTime_vdouble__170 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_matchTime_PlayerIndex_PlayerInTeam_playerTime_vdouble__170</summary>
		public bool Changed_numberOfIterationsDecreased_Init_matchTime_PlayerIndex_PlayerInTeam_playerTime_vdouble__170_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_matchTime_PlayerIndex_PlayerInTeam_playerTime_vdouble__170 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_matchTime_PlayerIndex_PlayerInTeam_playerTime_vdouble__170</summary>
		public bool Changed_numberOfIterationsDecreased_Init_matchTime_PlayerIndex_PlayerInTeam_playerTime_vdouble__170_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__50_Init_time_passed_vdouble__170_5 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__50_Init_time_passed_vdouble__170_5</summary>
		public bool Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__50_Init_time_passed_vdouble__170_5_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__50_Init_time_passed_vdouble__170_5 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__50_Init_time_passed_vdouble__170_5</summary>
		public bool Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__50_Init_time_passed_vdouble__170_5_isInitialised;
		/// <summary>True if Changed_PlayerIndex has executed. Set this to false to force re-execution of Changed_PlayerIndex</summary>
		public bool Changed_PlayerIndex_isDone;
		/// <summary>True if Changed_PlayerIndex_PlayerInTeam_vint__50 has executed. Set this to false to force re-execution of Changed_PlayerIndex_PlayerInTeam_vint__50</summary>
		public bool Changed_PlayerIndex_PlayerInTeam_vint__50_isDone;
		/// <summary>True if Changed_PlayerInTeam has executed. Set this to false to force re-execution of Changed_PlayerInTeam</summary>
		public bool Changed_PlayerInTeam_isDone;
		/// <summary>True if Changed_PlayerInTeam_playerTime has executed. Set this to false to force re-execution of Changed_PlayerInTeam_playerTime</summary>
		public bool Changed_PlayerInTeam_playerTime_isDone;
		/// <summary>True if Changed_PlayerInTeam_time_passed has executed. Set this to false to force re-execution of Changed_PlayerInTeam_time_passed</summary>
		public bool Changed_PlayerInTeam_time_passed_isDone;
		/// <summary>True if Changed_vdouble__170 has executed. Set this to false to force re-execution of Changed_vdouble__170</summary>
		public bool Changed_vdouble__170_isDone;
		/// <summary>True if Changed_vdouble__171 has executed. Set this to false to force re-execution of Changed_vdouble__171</summary>
		public bool Changed_vdouble__171_isDone;
		/// <summary>True if Changed_vint__50 has executed. Set this to false to force re-execution of Changed_vint__50</summary>
		public bool Changed_vint__50_isDone;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		/// <summary>Field backing the matchTime property</summary>
		private double[] MatchTime;
		/// <summary>Message to marginal of 'matchTime'</summary>
		public DistributionStructArray<Gaussian,double> matchTime_marginal_F;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Field backing the PlayerIndex property</summary>
		private int[][][] playerIndex;
		/// <summary>Message to marginal of 'PlayerIndex'</summary>
		public PointMass<int[][][]> PlayerIndex_marginal_F;
		/// <summary>Field backing the PlayerInTeam property</summary>
		private int[][] playerInTeam;
		/// <summary>Message to marginal of 'PlayerInTeam'</summary>
		public PointMass<int[][]> PlayerInTeam_marginal_F;
		/// <summary>Field backing the playerTime property</summary>
		private double[][][] PlayerTime;
		/// <summary>Message to marginal of 'playerTime'</summary>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> playerTime_marginal_F;
		/// <summary>Field backing the time_passed property</summary>
		private double[][][] Time_passed;
		/// <summary>Message to marginal of 'time_passed'</summary>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> time_passed_marginal_F;
		/// <summary>Field backing the vdouble__170 property</summary>
		private double[] Vdouble__170;
		/// <summary>Message to marginal of 'vdouble__170'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__170_marginal_F;
		/// <summary>Field backing the vdouble__171 property</summary>
		private double[] Vdouble__171;
		/// <summary>Message to marginal of 'vdouble__171'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__171_marginal_F;
		/// <summary>Message to marginal of 'vdouble__172'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__172_marginal_F;
		/// <summary>Buffer for VariablePointOp_Rprop.MarginalAverageConditional</summary>
		public RpropBufferData[] vdouble__172_use_B_nMatches__buffer;
		/// <summary>Message to marginal of 'vdouble__179'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__179_marginal_F;
		public Gaussian[][][] vdouble__179_PlayerIndex_nMatches_nTeamsPerMatch_nPlayersMinusPerTeam_1__B;
		/// <summary>Field backing the vint__50 property</summary>
		private int[] Vint__50;
		/// <summary>Message to marginal of 'vint__50'</summary>
		public PointMass<int[]> vint__50_marginal_F;
		#endregion

		#region Properties
		/// <summary>The externally-specified value of 'matchTime'</summary>
		public double[] matchTime
		{
			get {
				return this.MatchTime;
			}
			set {
				if ((value!=null)&&(value.Length!=1000)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+1000)+" was expected for variable \'matchTime\'");
				}
				this.MatchTime = value;
				this.numberOfIterationsDone = 0;
				this.Changed_matchTime_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_matchTime_PlayerIndex_PlayerInTeam_playerTime_vdouble__170_isInitialised = false;
				this.Changed_matchTime_numberOfIterations_PlayerIndex_PlayerInTeam_playerTime_vdouble__170_isDone = false;
			}
		}

		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'PlayerIndex'</summary>
		public int[][][] PlayerIndex
		{
			get {
				return this.playerIndex;
			}
			set {
				if ((value!=null)&&(value.Length!=1000)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+1000)+" was expected for variable \'PlayerIndex\'");
				}
				this.playerIndex = value;
				this.numberOfIterationsDone = 0;
				this.Changed_PlayerIndex_isDone = false;
				this.Changed_PlayerIndex_PlayerInTeam_vint__50_isDone = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__50_Init_time_passed_vdouble__170_5_isDone = false;
				this.Changed_numberOfIterations_PlayerIndex_PlayerInTeam_time_passed_vdouble__170_vdouble__171_vint__50_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_matchTime_PlayerIndex_PlayerInTeam_playerTime_vdouble__170_isInitialised = false;
				this.Changed_matchTime_numberOfIterations_PlayerIndex_PlayerInTeam_playerTime_vdouble__170_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'PlayerInTeam'</summary>
		public int[][] PlayerInTeam
		{
			get {
				return this.playerInTeam;
			}
			set {
				if ((value!=null)&&(value.Length!=1000)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+1000)+" was expected for variable \'PlayerInTeam\'");
				}
				this.playerInTeam = value;
				this.numberOfIterationsDone = 0;
				this.Changed_PlayerInTeam_time_passed_isDone = false;
				this.Changed_PlayerInTeam_playerTime_isDone = false;
				this.Changed_PlayerInTeam_isDone = false;
				this.Changed_PlayerIndex_PlayerInTeam_vint__50_isDone = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__50_Init_time_passed_vdouble__170_5_isDone = false;
				this.Changed_numberOfIterations_PlayerIndex_PlayerInTeam_time_passed_vdouble__170_vdouble__171_vint__50_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_matchTime_PlayerIndex_PlayerInTeam_playerTime_vdouble__170_isInitialised = false;
				this.Changed_matchTime_numberOfIterations_PlayerIndex_PlayerInTeam_playerTime_vdouble__170_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'playerTime'</summary>
		public double[][][] playerTime
		{
			get {
				return this.PlayerTime;
			}
			set {
				if ((value!=null)&&(value.Length!=1000)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+1000)+" was expected for variable \'playerTime\'");
				}
				this.PlayerTime = value;
				this.numberOfIterationsDone = 0;
				this.Changed_PlayerInTeam_playerTime_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_matchTime_PlayerIndex_PlayerInTeam_playerTime_vdouble__170_isInitialised = false;
				this.Changed_matchTime_numberOfIterations_PlayerIndex_PlayerInTeam_playerTime_vdouble__170_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'time_passed'</summary>
		public double[][][] time_passed
		{
			get {
				return this.Time_passed;
			}
			set {
				if ((value!=null)&&(value.Length!=1000)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+1000)+" was expected for variable \'time_passed\'");
				}
				this.Time_passed = value;
				this.numberOfIterationsDone = 0;
				this.Changed_PlayerInTeam_time_passed_isDone = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__50_Init_time_passed_vdouble__170_5_isInitialised = false;
				this.Changed_numberOfIterations_PlayerIndex_PlayerInTeam_time_passed_vdouble__170_vdouble__171_vint__50_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vdouble__170'</summary>
		public double[] vdouble__170
		{
			get {
				return this.Vdouble__170;
			}
			set {
				if ((value!=null)&&(value.Length!=6495)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+6495)+" was expected for variable \'vdouble__170\'");
				}
				this.Vdouble__170 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vdouble__170_isDone = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__50_Init_time_passed_vdouble__170_5_isInitialised = false;
				this.Changed_numberOfIterations_PlayerIndex_PlayerInTeam_time_passed_vdouble__170_vdouble__171_vint__50_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_matchTime_PlayerIndex_PlayerInTeam_playerTime_vdouble__170_isInitialised = false;
				this.Changed_matchTime_numberOfIterations_PlayerIndex_PlayerInTeam_playerTime_vdouble__170_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vdouble__171'</summary>
		public double[] vdouble__171
		{
			get {
				return this.Vdouble__171;
			}
			set {
				if ((value!=null)&&(value.Length!=6495)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+6495)+" was expected for variable \'vdouble__171\'");
				}
				this.Vdouble__171 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vdouble__171_isDone = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__50_Init_time_passed_vdouble__170_5_isInitialised = false;
				this.Changed_numberOfIterations_PlayerIndex_PlayerInTeam_time_passed_vdouble__170_vdouble__171_vint__50_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vint__50'</summary>
		public int[] vint__50
		{
			get {
				return this.Vint__50;
			}
			set {
				if ((value!=null)&&(value.Length!=6495)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+6495)+" was expected for variable \'vint__50\'");
				}
				this.Vint__50 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vint__50_isDone = false;
				this.Changed_PlayerIndex_PlayerInTeam_vint__50_isDone = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__50_Init_time_passed_vdouble__170_5_isDone = false;
				this.Changed_numberOfIterations_PlayerIndex_PlayerInTeam_time_passed_vdouble__170_vdouble__171_vint__50_isDone = false;
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of matchTime</summary>
		private void Changed_matchTime()
		{
			if (this.Changed_matchTime_isDone) {
				return ;
			}
			// Create array for 'matchTime_marginal' Forwards messages.
			this.matchTime_marginal_F = new DistributionStructArray<Gaussian,double>(1000);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				this.matchTime_marginal_F[nMatches] = Gaussian.Uniform();
			}
			// Message to 'matchTime_marginal' from DerivedVariable factor
			this.matchTime_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Gaussian,double>,double[]>(this.MatchTime, this.matchTime_marginal_F);
			this.Changed_matchTime_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of matchTime and numberOfIterations and PlayerIndex and PlayerInTeam and playerTime and vdouble__170</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_matchTime_numberOfIterations_PlayerIndex_PlayerInTeam_playerTime_vdouble__170(int numberOfIterations)
		{
			if (this.Changed_matchTime_numberOfIterations_PlayerIndex_PlayerInTeam_playerTime_vdouble__170_isDone) {
				return ;
			}
			DistributionStructArray<Gaussian,double> vdouble__172_F;
			// Create array for 'vdouble__172' Forwards messages.
			vdouble__172_F = new DistributionStructArray<Gaussian,double>(1000);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				vdouble__172_F[nMatches] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble____52_F'
			DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>[] vdouble____52_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>[1000];
			// Create array for replicates of 'vdouble603_F'
			Gaussian[][][] vdouble603_F = new Gaussian[1000][][];
			// Create array for replicates of 'vdouble607_F'
			Gaussian[] vdouble607_F = new Gaussian[1000];
			// Create array for replicates of 'vdouble608_F'
			Gaussian[] vdouble608_F = new Gaussian[1000];
			// Create array for replicates of 'vdouble601_F'
			Gaussian[][][] vdouble601_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'vdouble____52' Forwards messages.
				vdouble____52_F[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
				// Create array for replicates of 'vdouble601_F'
				vdouble601_F[nMatches] = new Gaussian[2][];
				// Create array for replicates of 'vdouble603_F'
				vdouble603_F[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for 'vdouble____52' Forwards messages.
					vdouble____52_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					// Create array for replicates of 'vdouble601_F'
					vdouble601_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble603_F'
					vdouble603_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble____52_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						vdouble601_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						// Message to 'vdouble601' from Gaussian factor
						vdouble601_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.SampleAverageConditional(this.Vdouble__170[this.playerIndex[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]], 1.0);
						vdouble603_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						// Message to 'vdouble603' from Product factor
						vdouble603_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(vdouble601_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.PlayerTime[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'vdouble____52' from Ratio factor
						vdouble____52_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.RatioAverageConditional(vdouble603_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.MatchTime[nMatches]);
					}
				}
				vdouble607_F[nMatches] = Gaussian.Uniform();
				// Message to 'vdouble607' from Sum factor
				vdouble607_F[nMatches] = FastSumOp.SumAverageConditional(vdouble____52_F[nMatches][0]);
				vdouble608_F[nMatches] = Gaussian.Uniform();
				// Message to 'vdouble608' from Sum factor
				vdouble608_F[nMatches] = FastSumOp.SumAverageConditional(vdouble____52_F[nMatches][1]);
				// Message to 'vdouble__172' from Difference factor
				vdouble__172_F[nMatches] = Tracing.FireEvent<Gaussian>(DoublePlusOp.AAverageConditional(vdouble607_F[nMatches], vdouble608_F[nMatches]), string.Format("vdouble__172_F[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
			}
			Gaussian vdouble__172_use_B_reduced;
			vdouble__172_use_B_reduced = Gaussian.Uniform();
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				for(int nMatches = 0; nMatches<1000; nMatches++) {
					this.vdouble__172_use_B_nMatches__buffer[nMatches] = VariablePointOp_Rprop.Buffer(vdouble__172_use_B_reduced, vdouble__172_F[nMatches], this.vdouble__172_marginal_F[nMatches], this.vdouble__172_use_B_nMatches__buffer[nMatches]);
					// Message to 'vdouble__172_marginal' from VariablePoint factor
					this.vdouble__172_marginal_F[nMatches] = Tracing.FireEvent<Gaussian>(VariablePointOp_Rprop.MarginalAverageConditional(vdouble__172_use_B_reduced, vdouble__172_F[nMatches], this.vdouble__172_use_B_nMatches__buffer[nMatches], this.vdouble__172_marginal_F[nMatches]), string.Format("vdouble__172_marginal_F[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
				}
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			this.Changed_matchTime_numberOfIterations_PlayerIndex_PlayerInTeam_playerTime_vdouble__170_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterations and PlayerIndex and PlayerInTeam and time_passed and vdouble__170 and vdouble__171 and vint__50</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_numberOfIterations_PlayerIndex_PlayerInTeam_time_passed_vdouble__170_vdouble__171_vint__50(int numberOfIterations)
		{
			if (this.Changed_numberOfIterations_PlayerIndex_PlayerInTeam_time_passed_vdouble__170_vdouble__171_vint__50_isDone) {
				return ;
			}
			DistributionStructArray<Gaussian,double> vdouble__179_F;
			// Create array for 'vdouble__179' Forwards messages.
			vdouble__179_F = new DistributionStructArray<Gaussian,double>(6495);
			// Create array for 'vdouble__179_marginal' Forwards messages.
			this.vdouble__179_marginal_F = new DistributionStructArray<Gaussian,double>(6495);
			DistributionStructArray<Gaussian,double> vdouble__179_use_B;
			// Create array for 'vdouble__179_use' Backwards messages.
			vdouble__179_use_B = new DistributionStructArray<Gaussian,double>(6495);
			for(int nPlayers = 0; nPlayers<6495; nPlayers++) {
				vdouble__179_use_B[nPlayers] = Gaussian.Uniform();
			}
			DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> vdouble__179_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B;
			// Create array for 'vdouble__179_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' Backwards messages.
			vdouble__179_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(1000);
			// Create array for replicates of 'vdouble621'
			double[][][] vdouble621 = new double[1000][][];
			// Create array for replicates of 'vdouble619_B'
			Gaussian[][][] vdouble619_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble621'
				vdouble621[nMatches] = new double[2][];
				// Create array for replicates of 'vdouble619_B'
				vdouble619_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble621'
					vdouble621[nMatches][nTeamsPerMatch] = new double[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble619_B'
					vdouble619_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						if (this.Vint__50[this.playerIndex[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]]==1) {
							vdouble621[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Factor.Product(1.6484251002148446E-15, this.Time_passed[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							vdouble619_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
							// Message to 'vdouble619' from Gaussian factor
							vdouble619_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.MeanAverageConditional(this.Vdouble__170[this.playerIndex[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]], vdouble621[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						}
					}
				}
			}
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				for(int nMatches = 0; nMatches<1000; nMatches++) {
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							if (this.Vint__50[this.playerIndex[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]]==1) {
								// Message to 'vdouble__179_PlayerIndex_nMatches_nTeamsPerMatch_nPlayersMinusPerTeam_1_' from Backward factor
								this.vdouble__179_PlayerIndex_nMatches_nTeamsPerMatch_nPlayersMinusPerTeam_1__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DampBackwardOp.ValueAverageConditional<Gaussian>(vdouble619_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0.5, this.vdouble__179_PlayerIndex_nMatches_nTeamsPerMatch_nPlayersMinusPerTeam_1__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							}
						}
					}
				}
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'vdouble__179_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' Backwards messages.
				vdouble__179_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for 'vdouble__179_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' Backwards messages.
					vdouble__179_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble__179_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						if (this.Vint__50[this.playerIndex[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]]==1) {
							// Message to 'vdouble__179_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' from Copy factor
							vdouble__179_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ArrayHelper.SetTo<Gaussian>(vdouble__179_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble__179_PlayerIndex_nMatches_nTeamsPerMatch_nPlayersMinusPerTeam_1__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						}
					}
				}
			}
			// Message to 'vdouble__179_use' from GetDeepJaggedItems factor
			vdouble__179_use_B = GetDeepJaggedItemsOp<double>.ArrayAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>,Gaussian,DistributionStructArray<Gaussian,double>>(vdouble__179_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B, this.playerIndex, vdouble__179_use_B);
			for(int nPlayers = 0; nPlayers<6495; nPlayers++) {
				vdouble__179_F[nPlayers] = Gaussian.Uniform();
				this.vdouble__179_marginal_F[nPlayers] = Gaussian.Uniform();
				// Message to 'vdouble__179' from Gaussian factor
				vdouble__179_F[nPlayers] = GaussianOpBase.SampleAverageConditional(this.Vdouble__170[nPlayers], this.Vdouble__171[nPlayers]);
				// Message to 'vdouble__179_marginal' from Variable factor
				this.vdouble__179_marginal_F[nPlayers] = VariableOp.MarginalAverageConditional<Gaussian>(vdouble__179_use_B[nPlayers], vdouble__179_F[nPlayers], this.vdouble__179_marginal_F[nPlayers]);
			}
			this.Changed_numberOfIterations_PlayerIndex_PlayerInTeam_time_passed_vdouble__170_vdouble__171_vint__50_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and must reset on changes to matchTime and PlayerIndex and PlayerInTeam and playerTime and vdouble__170</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_Init_matchTime_PlayerIndex_PlayerInTeam_playerTime_vdouble__170(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_Init_matchTime_PlayerIndex_PlayerInTeam_playerTime_vdouble__170_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_Init_matchTime_PlayerIndex_PlayerInTeam_playerTime_vdouble__170_isInitialised)) {
				return ;
			}
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				this.vdouble__172_marginal_F[nMatches] = Gaussian.Uniform();
				this.vdouble__172_use_B_nMatches__buffer[nMatches] = VariablePointOp_Rprop.BufferInit();
			}
			this.Changed_numberOfIterationsDecreased_Init_matchTime_PlayerIndex_PlayerInTeam_playerTime_vdouble__170_isDone = true;
			this.Changed_numberOfIterationsDecreased_Init_matchTime_PlayerIndex_PlayerInTeam_playerTime_vdouble__170_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and PlayerIndex and PlayerInTeam and vint__50 and must reset on changes to time_passed and vdouble__170 and vdouble__171</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__50_Init_time_passed_vdouble__170_5(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__50_Init_time_passed_vdouble__170_5_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__50_Init_time_passed_vdouble__170_5_isInitialised)) {
				return ;
			}
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						if (this.Vint__50[this.playerIndex[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]]==1) {
							this.vdouble__179_PlayerIndex_nMatches_nTeamsPerMatch_nPlayersMinusPerTeam_1__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						}
					}
				}
			}
			this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__50_Init_time_passed_vdouble__170_5_isDone = true;
			this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__50_Init_time_passed_vdouble__170_5_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of PlayerIndex</summary>
		private void Changed_PlayerIndex()
		{
			if (this.Changed_PlayerIndex_isDone) {
				return ;
			}
			// Create array for 'PlayerIndex_marginal' Forwards messages.
			this.PlayerIndex_marginal_F = new PointMass<int[][][]>(this.playerIndex);
			// Message to 'PlayerIndex_marginal' from DerivedVariable factor
			this.PlayerIndex_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int[][][]>,int[][][]>(this.playerIndex, this.PlayerIndex_marginal_F);
			this.Changed_PlayerIndex_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of PlayerIndex and PlayerInTeam and vint__50</summary>
		private void Changed_PlayerIndex_PlayerInTeam_vint__50()
		{
			if (this.Changed_PlayerIndex_PlayerInTeam_vint__50_isDone) {
				return ;
			}
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble__179_PlayerIndex_nMatches_nTeamsPerMatch_nPlayersMinusPerTeam_1__B'
					this.vdouble__179_PlayerIndex_nMatches_nTeamsPerMatch_nPlayersMinusPerTeam_1__B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
				}
			}
			this.Changed_PlayerIndex_PlayerInTeam_vint__50_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of PlayerInTeam</summary>
		private void Changed_PlayerInTeam()
		{
			if (this.Changed_PlayerInTeam_isDone) {
				return ;
			}
			// Create array for 'PlayerInTeam_marginal' Forwards messages.
			this.PlayerInTeam_marginal_F = new PointMass<int[][]>(this.playerInTeam);
			// Message to 'PlayerInTeam_marginal' from DerivedVariable factor
			this.PlayerInTeam_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int[][]>,int[][]>(this.playerInTeam, this.PlayerInTeam_marginal_F);
			this.Changed_PlayerInTeam_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of PlayerInTeam and playerTime</summary>
		private void Changed_PlayerInTeam_playerTime()
		{
			if (this.Changed_PlayerInTeam_playerTime_isDone) {
				return ;
			}
			// Create array for 'playerTime_marginal' Forwards messages.
			this.playerTime_marginal_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(1000);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'playerTime_marginal' Forwards messages.
				this.playerTime_marginal_F[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for 'playerTime_marginal' Forwards messages.
					this.playerTime_marginal_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						this.playerTime_marginal_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Message to 'playerTime_marginal' from DerivedVariable factor
			this.playerTime_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>,double[][][]>(this.PlayerTime, this.playerTime_marginal_F);
			this.Changed_PlayerInTeam_playerTime_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of PlayerInTeam and time_passed</summary>
		private void Changed_PlayerInTeam_time_passed()
		{
			if (this.Changed_PlayerInTeam_time_passed_isDone) {
				return ;
			}
			// Create array for 'time_passed_marginal' Forwards messages.
			this.time_passed_marginal_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(1000);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'time_passed_marginal' Forwards messages.
				this.time_passed_marginal_F[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for 'time_passed_marginal' Forwards messages.
					this.time_passed_marginal_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						this.time_passed_marginal_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Message to 'time_passed_marginal' from DerivedVariable factor
			this.time_passed_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>,double[][][]>(this.Time_passed, this.time_passed_marginal_F);
			this.Changed_PlayerInTeam_time_passed_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vdouble__170</summary>
		private void Changed_vdouble__170()
		{
			if (this.Changed_vdouble__170_isDone) {
				return ;
			}
			// Create array for 'vdouble__170_marginal' Forwards messages.
			this.vdouble__170_marginal_F = new DistributionStructArray<Gaussian,double>(6495);
			for(int nPlayers = 0; nPlayers<6495; nPlayers++) {
				this.vdouble__170_marginal_F[nPlayers] = Gaussian.Uniform();
			}
			// Message to 'vdouble__170_marginal' from DerivedVariable factor
			this.vdouble__170_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Gaussian,double>,double[]>(this.Vdouble__170, this.vdouble__170_marginal_F);
			this.Changed_vdouble__170_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vdouble__171</summary>
		private void Changed_vdouble__171()
		{
			if (this.Changed_vdouble__171_isDone) {
				return ;
			}
			// Create array for 'vdouble__171_marginal' Forwards messages.
			this.vdouble__171_marginal_F = new DistributionStructArray<Gaussian,double>(6495);
			for(int nPlayers = 0; nPlayers<6495; nPlayers++) {
				this.vdouble__171_marginal_F[nPlayers] = Gaussian.Uniform();
			}
			// Message to 'vdouble__171_marginal' from DerivedVariable factor
			this.vdouble__171_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Gaussian,double>,double[]>(this.Vdouble__171, this.vdouble__171_marginal_F);
			this.Changed_vdouble__171_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vint__50</summary>
		private void Changed_vint__50()
		{
			if (this.Changed_vint__50_isDone) {
				return ;
			}
			// Create array for 'vint__50_marginal' Forwards messages.
			this.vint__50_marginal_F = new PointMass<int[]>(this.Vint__50);
			// Message to 'vint__50_marginal' from DerivedVariable factor
			this.vint__50_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int[]>,int[]>(this.Vint__50, this.vint__50_marginal_F);
			this.Changed_vint__50_isDone = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			// Create array for 'vdouble__172_marginal' Forwards messages.
			this.vdouble__172_marginal_F = new DistributionStructArray<Gaussian,double>(1000);
			// Create array for replicates of 'vdouble__172_use_B_nMatches__buffer'
			this.vdouble__172_use_B_nMatches__buffer = new RpropBufferData[1000];
			// Create array for replicates of 'vdouble__179_PlayerIndex_nMatches_nTeamsPerMatch_nPlayersMinusPerTeam_1__B'
			this.vdouble__179_PlayerIndex_nMatches_nTeamsPerMatch_nPlayersMinusPerTeam_1__B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble__179_PlayerIndex_nMatches_nTeamsPerMatch_nPlayersMinusPerTeam_1__B'
				this.vdouble__179_PlayerIndex_nMatches_nTeamsPerMatch_nPlayersMinusPerTeam_1__B[nMatches] = new Gaussian[2][];
			}
			this.Constant_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__50_Init_time_passed_vdouble__170_5_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_matchTime_PlayerIndex_PlayerInTeam_playerTime_vdouble__170_isDone = false;
				}
				this.Changed_numberOfIterations_PlayerIndex_PlayerInTeam_time_passed_vdouble__170_vdouble__171_vint__50_isDone = false;
				this.Changed_matchTime_numberOfIterations_PlayerIndex_PlayerInTeam_playerTime_vdouble__170_isDone = false;
			}
			this.Changed_vdouble__171();
			this.Changed_vdouble__170();
			this.Changed_vint__50();
			this.Changed_PlayerInTeam_time_passed();
			this.Changed_PlayerInTeam_playerTime();
			this.Changed_matchTime();
			this.Changed_PlayerIndex();
			this.Changed_PlayerInTeam();
			this.Constant();
			this.Changed_PlayerIndex_PlayerInTeam_vint__50();
			this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vint__50_Init_time_passed_vdouble__170_5(initialise);
			this.Changed_numberOfIterations_PlayerIndex_PlayerInTeam_time_passed_vdouble__170_vdouble__171_vint__50(numberOfIterations);
			this.Changed_numberOfIterationsDecreased_Init_matchTime_PlayerIndex_PlayerInTeam_playerTime_vdouble__170(initialise);
			this.Changed_matchTime_numberOfIterations_PlayerIndex_PlayerInTeam_playerTime_vdouble__170(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="PlayerInTeam") {
				return this.PlayerInTeam;
			}
			if (variableName=="PlayerIndex") {
				return this.PlayerIndex;
			}
			if (variableName=="matchTime") {
				return this.matchTime;
			}
			if (variableName=="playerTime") {
				return this.playerTime;
			}
			if (variableName=="time_passed") {
				return this.time_passed;
			}
			if (variableName=="vint__50") {
				return this.vint__50;
			}
			if (variableName=="vdouble__170") {
				return this.vdouble__170;
			}
			if (variableName=="vdouble__171") {
				return this.vdouble__171;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="vdouble__171") {
				return this.Vdouble__171Marginal();
			}
			if (variableName=="vdouble__170") {
				return this.Vdouble__170Marginal();
			}
			if (variableName=="vint__50") {
				return this.Vint__50Marginal();
			}
			if (variableName=="time_passed") {
				return this.Time_passedMarginal();
			}
			if (variableName=="playerTime") {
				return this.PlayerTimeMarginal();
			}
			if (variableName=="matchTime") {
				return this.MatchTimeMarginal();
			}
			if (variableName=="PlayerIndex") {
				return this.PlayerIndexMarginal();
			}
			if (variableName=="PlayerInTeam") {
				return this.PlayerInTeamMarginal();
			}
			if (variableName=="vdouble__179") {
				return this.Vdouble__179Marginal();
			}
			if (variableName=="vdouble__172") {
				return this.Vdouble__172Marginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		/// <summary>
		/// Returns the marginal distribution for 'matchTime' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> MatchTimeMarginal()
		{
			return this.matchTime_marginal_F;
		}

		private void OnMessageUpdated(MessageUpdatedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<MessageUpdatedEventArgs> handler = this.MessageUpdated;
			if (handler!=null) {
				handler(this, e);
			}
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>
		/// Returns the marginal distribution for 'PlayerIndex' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[][][]> PlayerIndexMarginal()
		{
			return this.PlayerIndex_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'PlayerInTeam' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[][]> PlayerInTeamMarginal()
		{
			return this.PlayerInTeam_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'playerTime' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> PlayerTimeMarginal()
		{
			return this.playerTime_marginal_F;
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="PlayerInTeam") {
				this.PlayerInTeam = (int[][])value;
				return ;
			}
			if (variableName=="PlayerIndex") {
				this.PlayerIndex = (int[][][])value;
				return ;
			}
			if (variableName=="matchTime") {
				this.matchTime = (double[])value;
				return ;
			}
			if (variableName=="playerTime") {
				this.playerTime = (double[][][])value;
				return ;
			}
			if (variableName=="time_passed") {
				this.time_passed = (double[][][])value;
				return ;
			}
			if (variableName=="vint__50") {
				this.vint__50 = (int[])value;
				return ;
			}
			if (variableName=="vdouble__170") {
				this.vdouble__170 = (double[])value;
				return ;
			}
			if (variableName=="vdouble__171") {
				this.vdouble__171 = (double[])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'time_passed' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> Time_passedMarginal()
		{
			return this.time_passed_marginal_F;
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__170' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__170Marginal()
		{
			return this.vdouble__170_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__171' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__171Marginal()
		{
			return this.vdouble__171_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__172' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__172Marginal()
		{
			return ArrayHelper.MakeCopy<DistributionStructArray<Gaussian,double>>(this.vdouble__172_marginal_F);
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__179' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__179Marginal()
		{
			return this.vdouble__179_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vint__50' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[]> Vint__50Marginal()
		{
			return this.vint__50_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		/// <summary>Event that is fired when a message that is being monitored is updated.</summary>
		public event EventHandler<MessageUpdatedEventArgs> MessageUpdated;
		#endregion

	}

}
