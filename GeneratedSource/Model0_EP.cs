// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;
using Microsoft.ML.Probabilistic.Collections;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.4.2203.202 at 14:54 on gioved√¨ 14 luglio 2022.
	/// </remarks>
	public partial class Model0_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>Message to marginal of '_gamma'</summary>
		public Gamma _gamma_marginal_F;
		/// <summary>Message from use of '_gamma'</summary>
		public Gamma _gamma_use_B;
		/// <summary>Buffer for VariablePointOp_RpropGamma.MarginalAverageConditional</summary>
		public RpropBufferData _gamma_use_B_buffer0_;
		public Gaussian _m_q_F;
		/// <summary>Message to marginal of '_m_q'</summary>
		public Gaussian _m_q_marginal_F;
		public Gaussian[] _m_q_rep_F;
		public Gaussian[][] _m_q_rep_rep_F;
		public Gaussian[][][] _m_q_rep_rep_rep_F;
		/// <summary>Message from use of '_m_q'</summary>
		public Gaussian _m_q_use_B;
		/// <summary>Buffer for VariablePointOp_Rprop.MarginalAverageConditional</summary>
		public RpropBufferData _m_q_use_B_buffer;
		/// <summary>Message to use of '_m_q'</summary>
		public Gaussian _m_q_use_F;
		public Gamma _v_c_F;
		/// <summary>Message to marginal of '_v_c'</summary>
		public Gamma _v_c_marginal_F;
		public Gamma[] _v_c_rep_F;
		public Gamma[][] _v_c_rep_rep_F;
		public Gamma[][][] _v_c_rep_rep_rep_F;
		/// <summary>Message from use of '_v_c'</summary>
		public Gamma _v_c_use_B;
		/// <summary>Buffer for VariablePointOp_RpropGamma.MarginalAverageConditional</summary>
		public RpropBufferData _v_c_use_B_buffer0_;
		/// <summary>Message to use of '_v_c'</summary>
		public Gamma _v_c_use_F;
		public Gamma _v_q_F;
		/// <summary>Message to marginal of '_v_q'</summary>
		public Gamma _v_q_marginal_F;
		public Gamma[] _v_q_rep_F;
		public Gamma[][] _v_q_rep_rep_F;
		public Gamma[][][] _v_q_rep_rep_rep_B;
		public Gamma[][][] _v_q_rep_rep_rep_F;
		/// <summary>Message from use of '_v_q'</summary>
		public Gamma _v_q_use_B;
		/// <summary>Buffer for VariablePointOp_RpropGamma.MarginalAverageConditional</summary>
		public RpropBufferData _v_q_use_B_buffer0_;
		/// <summary>Message to use of '_v_q'</summary>
		public Gamma _v_q_use_F;
		public Gaussian _w_d_o_F;
		/// <summary>Message to marginal of '_w_d_o'</summary>
		public Gaussian _w_d_o_marginal_F;
		public Gaussian[] _w_d_o_rep_F;
		public Gaussian[][] _w_d_o_rep_rep_F;
		public Gaussian[][][] _w_d_o_rep_rep_rep_F;
		/// <summary>Message from use of '_w_d_o'</summary>
		public Gaussian _w_d_o_use_B;
		/// <summary>Buffer for VariablePointOp_Rprop.MarginalAverageConditional</summary>
		public RpropBufferData _w_d_o_use_B_buffer;
		/// <summary>Message to use of '_w_d_o'</summary>
		public Gaussian _w_d_o_use_F;
		public Gaussian _w_d_p_F;
		/// <summary>Message to marginal of '_w_d_p'</summary>
		public Gaussian _w_d_p_marginal_F;
		public Gaussian _w_k_o_F;
		/// <summary>Message to marginal of '_w_k_o'</summary>
		public Gaussian _w_k_o_marginal_F;
		public Gaussian _w_k_p_F;
		/// <summary>Message to marginal of '_w_k_p'</summary>
		public Gaussian _w_k_p_marginal_F;
		public Gaussian[] _w_k_p_rep_F;
		public Gaussian[][] _w_k_p_rep_rep_F;
		public Gaussian[][][] _w_k_p_rep_rep_rep_F;
		/// <summary>Message from use of '_w_k_p'</summary>
		public Gaussian _w_k_p_use_B;
		/// <summary>Buffer for VariablePointOp_Rprop.MarginalAverageConditional</summary>
		public RpropBufferData _w_k_p_use_B_buffer;
		/// <summary>Message to use of '_w_k_p'</summary>
		public Gaussian _w_k_p_use_F;
		public double[][] Avg_play_time_team_reduced;
		/// <summary>True if Changed_deathcount_draw_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerI4 has executed. Set this to false to force re-execution of Changed_deathcount_draw_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerI4</summary>
		public bool Changed_deathcount_draw_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerI4_isDone;
		/// <summary>True if Changed_deathcount_PlayerInTeam has executed. Set this to false to force re-execution of Changed_deathcount_PlayerInTeam</summary>
		public bool Changed_deathcount_PlayerInTeam_isDone;
		/// <summary>True if Changed_draw has executed. Set this to false to force re-execution of Changed_draw</summary>
		public bool Changed_draw_isDone;
		/// <summary>True if Changed_draw_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_Playe6 has executed. Set this to false to force re-execution of Changed_draw_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_Playe6</summary>
		public bool Changed_draw_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_Playe6_isDone;
		/// <summary>True if Changed_draw_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_Playe6 has performed initialisation. Set this to false to force re-execution of Changed_draw_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_Playe6</summary>
		public bool Changed_draw_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_Playe6_isInitialised;
		/// <summary>True if Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_I13 has executed. Set this to false to force re-execution of Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_I13</summary>
		public bool Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_I13_isDone;
		/// <summary>True if Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_I13 has performed initialisation. Set this to false to force re-execution of Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_I13</summary>
		public bool Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_I13_isInitialised;
		/// <summary>True if Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_q14 has executed. Set this to false to force re-execution of Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_q14</summary>
		public bool Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_q14_isDone;
		/// <summary>True if Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_q14 has performed initialisation. Set this to false to force re-execution of Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_q14</summary>
		public bool Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_q14_isInitialised;
		/// <summary>True if Changed_killcount_PlayerInTeam has executed. Set this to false to force re-execution of Changed_killcount_PlayerInTeam</summary>
		public bool Changed_killcount_PlayerInTeam_isDone;
		/// <summary>True if Changed_Match_time_m has executed. Set this to false to force re-execution of Changed_Match_time_m</summary>
		public bool Changed_Match_time_m_isDone;
		/// <summary>True if Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathc11 has executed. Set this to false to force re-execution of Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathc11</summary>
		public bool Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathc11_isDone;
		/// <summary>True if Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathc11 has performed initialisation. Set this to false to force re-execution of Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathc11</summary>
		public bool Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathc11_isInitialised;
		/// <summary>True if Changed_Match_time_m_p_time_m__t__n_PlayerInTeam has executed. Set this to false to force re-execution of Changed_Match_time_m_p_time_m__t__n_PlayerInTeam</summary>
		public bool Changed_Match_time_m_p_time_m__t__n_PlayerInTeam_isDone;
		/// <summary>True if Changed_numberOfIterations_PlayerIndex_PlayerInTeam_vdouble__20_vdouble__6_vint____2 has executed. Set this to false to force re-execution of Changed_numberOfIterations_PlayerIndex_PlayerInTeam_vdouble__20_vdouble__6_vint____2</summary>
		public bool Changed_numberOfIterations_PlayerIndex_PlayerInTeam_vdouble__20_vdouble__6_vint____2_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_deathcount_draw_killcount_Match_time_m_p_time_m__t__n_Playe1 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_deathcount_draw_killcount_Match_time_m_p_time_m__t__n_Playe1</summary>
		public bool Changed_numberOfIterationsDecreased_Init_deathcount_draw_killcount_Match_time_m_p_time_m__t__n_Playe1_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_deathcount_draw_killcount_Match_time_m_p_time_m__t__n_Playe1 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_deathcount_draw_killcount_Match_time_m_p_time_m__t__n_Playe1</summary>
		public bool Changed_numberOfIterationsDecreased_Init_deathcount_draw_killcount_Match_time_m_p_time_m__t__n_Playe1_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_PlayerIndex_PlayerInTeam_vdouble__20_vdouble__6_vint____2 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_PlayerIndex_PlayerInTeam_vdouble__20_vdouble__6_vint____2</summary>
		public bool Changed_numberOfIterationsDecreased_Init_PlayerIndex_PlayerInTeam_vdouble__20_vdouble__6_vint____2_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_PlayerIndex_PlayerInTeam_vdouble__20_vdouble__6_vint____2 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_PlayerIndex_PlayerInTeam_vdouble__20_vdouble__6_vint____2</summary>
		public bool Changed_numberOfIterationsDecreased_Init_PlayerIndex_PlayerInTeam_vdouble__20_vdouble__6_vint____2_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathcount_draw_kil10 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathcount_draw_kil10</summary>
		public bool Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathcount_draw_kil10_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathcount_draw_kil10 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathcount_draw_kil10</summary>
		public bool Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathcount_draw_kil10_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerInTeam_Init_deathcount_draw_killcount_Match12 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerInTeam_Init_deathcount_draw_killcount_Match12</summary>
		public bool Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerInTeam_Init_deathcount_draw_killcount_Match12_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerInTeam_Init_deathcount_draw_killcount_Match12 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerInTeam_Init_deathcount_draw_killcount_Match12</summary>
		public bool Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerInTeam_Init_deathcount_draw_killcount_Match12_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_Init_deathcount_draw_killcount_Match_ti9 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_Init_deathcount_draw_killcount_Match_ti9</summary>
		public bool Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_Init_deathcount_draw_killcount_Match_ti9_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_Init_deathcount_draw_killcount_Match_ti9 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_Init_deathcount_draw_killcount_Match_ti9</summary>
		public bool Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_Init_deathcount_draw_killcount_Match_ti9_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_draw_killcount_Match_time_m_p_time_3 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_draw_killcount_Match_time_m_p_time_3</summary>
		public bool Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_draw_killcount_Match_time_m_p_time_3_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_draw_killcount_Match_time_m_p_time_3 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_draw_killcount_Match_time_m_p_time_3</summary>
		public bool Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_draw_killcount_Match_time_m_p_time_3_isInitialised;
		/// <summary>True if Changed_p_time_m__t__n_PlayerInTeam has executed. Set this to false to force re-execution of Changed_p_time_m__t__n_PlayerInTeam</summary>
		public bool Changed_p_time_m__t__n_PlayerInTeam_isDone;
		/// <summary>True if Changed_PlayerIndex has executed. Set this to false to force re-execution of Changed_PlayerIndex</summary>
		public bool Changed_PlayerIndex_isDone;
		/// <summary>True if Changed_PlayerInTeam has executed. Set this to false to force re-execution of Changed_PlayerInTeam</summary>
		public bool Changed_PlayerInTeam_isDone;
		/// <summary>True if Changed_PlayerInTeam_quit has executed. Set this to false to force re-execution of Changed_PlayerInTeam_quit</summary>
		public bool Changed_PlayerInTeam_quit_isDone;
		/// <summary>True if Changed_vdouble__20 has executed. Set this to false to force re-execution of Changed_vdouble__20</summary>
		public bool Changed_vdouble__20_isDone;
		/// <summary>True if Changed_vdouble__6 has executed. Set this to false to force re-execution of Changed_vdouble__6</summary>
		public bool Changed_vdouble__6_isDone;
		/// <summary>True if Changed_vint____2 has executed. Set this to false to force re-execution of Changed_vint____2</summary>
		public bool Changed_vint____2_isDone;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		public Gaussian[][][] death_count_m__t__n_F;
		/// <summary>Field backing the deathcount property</summary>
		private double[][][] Deathcount;
		/// <summary>Message to marginal of 'deathcount'</summary>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> deathcount_marginal_F;
		/// <summary>Messages from uses of 'Diff_2_'</summary>
		public Gaussian[][] Diff_2__uses_B;
		/// <summary>Field backing the draw property</summary>
		private int[] Draw;
		/// <summary>Message to marginal of 'draw'</summary>
		public PointMass<int[]> draw_marginal_F;
		/// <summary>Message to marginal of 'Epsilon'</summary>
		public Gaussian Epsilon_marginal_F;
		/// <summary>Message from use of 'Epsilon'</summary>
		public Gaussian Epsilon_use_B;
		/// <summary>Buffer for VariablePointOp_Rprop.MarginalAverageConditional</summary>
		public RpropBufferData Epsilon_use_B_buffer;
		public Gaussian[][][] kill_count_m__t__n_B;
		public Gaussian[][][] kill_count_m__t__n_F;
		/// <summary>Field backing the killcount property</summary>
		private double[][][] Killcount;
		/// <summary>Message to marginal of 'killcount'</summary>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> killcount_marginal_F;
		public Gaussian m0_F;
		/// <summary>Message to marginal of 'm0'</summary>
		public Gaussian m0_marginal_F;
		public Gaussian[] m0_rep_F;
		/// <summary>Message from use of 'm0'</summary>
		public Gaussian m0_use_B;
		/// <summary>Buffer for VariablePointOp_Rprop.MarginalAverageConditional</summary>
		public RpropBufferData m0_use_B_buffer;
		/// <summary>Message to use of 'm0'</summary>
		public Gaussian m0_use_F;
		/// <summary>Field backing the Match_time_m property</summary>
		private double[] match_time_m;
		/// <summary>Message to marginal of 'Match_time_m'</summary>
		public DistributionStructArray<Gaussian,double> Match_time_m_marginal_F;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Field backing the p_time_m__t__n property</summary>
		private double[][][] P_time_m__t__n;
		/// <summary>Message to marginal of 'p_time_m__t__n'</summary>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> p_time_m__t__n_marginal_F;
		public Gamma p0_F;
		/// <summary>Message to marginal of 'p0'</summary>
		public Gamma p0_marginal_F;
		public Gamma[] p0_rep_B;
		public Gamma[] p0_rep_F;
		/// <summary>Message from use of 'p0'</summary>
		public Gamma p0_use_B;
		/// <summary>Buffer for VariablePointOp_RpropGamma.MarginalAverageConditional</summary>
		public RpropBufferData p0_use_B_buffer0_;
		/// <summary>Message to use of 'p0'</summary>
		public Gamma p0_use_F;
		public Gaussian[][][] perf_from_ds_F;
		public Gaussian[][][] perf_n_m_F;
		public Gaussian[][][] Perfomance_opposing_team_0__F;
		public Gaussian[][][] Perfomance_opposing_team_1__F;
		public Gaussian[][][] Perfomance_opposing_team_F;
		/// <summary>Messages from uses of 'Perfomance_opposing_team'</summary>
		public Gaussian[][][][] Perfomance_opposing_team_uses_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Gaussian&gt;</summary>
		public Gaussian[][][] Perfomance_opposing_team_uses_B_toDef;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Gaussian&gt;</summary>
		public Gaussian[][][] Perfomance_opposing_team_uses_B_toDef2;
		/// <summary>Messages to uses of 'Perfomance_opposing_team'</summary>
		public Gaussian[][][][] Perfomance_opposing_team_uses_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Gaussian&gt;</summary>
		public Gaussian[][][] Perfomance_opposing_team_uses_F_marginal;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Gaussian&gt;</summary>
		public Gaussian[][][] Perfomance_opposing_team_uses_F_marginal2;
		public DistributionStructArray<Gaussian,double>[][][] player_perf_t__n_0_0__B;
		public DistributionStructArray<Gaussian,double>[][][] player_perf_t__n_1_1__B;
		public DistributionStructArray<Gaussian,double>[][] player_perf_t__n_depth1_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>[] player_perf_t__n_F;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;DistributionStructArray&lt;Gaussian, double&gt;&gt;</summary>
		public DistributionStructArray<Gaussian,double>[][] player_perf_t__n_item0_rep_B_toDef;
		public DistributionStructArray<Gaussian,double>[][][] player_perf_t__n_item0_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;DistributionStructArray&lt;Gaussian, double&gt;&gt;</summary>
		public DistributionStructArray<Gaussian,double>[][] player_perf_t__n_item0_rep_F_marginal;
		/// <summary>Messages from uses of 'player_perf_t__n_item0'</summary>
		public DistributionStructArray<Gaussian,double>[][] player_perf_t__n_item0_uses_B;
		/// <summary>Messages to uses of 'player_perf_t__n_item0'</summary>
		public DistributionStructArray<Gaussian,double>[][] player_perf_t__n_item0_uses_F;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;DistributionStructArray&lt;Gaussian, double&gt;&gt;</summary>
		public DistributionStructArray<Gaussian,double>[][] player_perf_t__n_item1_rep_B_toDef;
		/// <summary>Messages from uses of 'player_perf_t__n_item1'</summary>
		public DistributionStructArray<Gaussian,double>[][] player_perf_t__n_item1_uses_B;
		/// <summary>Messages to uses of 'player_perf_t__n_item1'</summary>
		public DistributionStructArray<Gaussian,double>[][] player_perf_t__n_item1_uses_F;
		/// <summary>Messages from uses of 'player_perf_t__n'</summary>
		public Gaussian[][][][] player_perf_t__n_uses_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Gaussian&gt;</summary>
		public Gaussian[][][] player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef;
		/// <summary>Messages to uses of 'player_perf_t__n'</summary>
		public Gaussian[][][][] player_perf_t__n_uses_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Gaussian&gt;</summary>
		public Gaussian[][][] player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal;
		/// <summary>Field backing the PlayerIndex property</summary>
		private int[][][] playerIndex;
		/// <summary>Message to marginal of 'PlayerIndex'</summary>
		public PointMass<int[][][]> PlayerIndex_marginal_F;
		/// <summary>Field backing the PlayerInTeam property</summary>
		private int[][] playerInTeam;
		/// <summary>Message to marginal of 'PlayerInTeam'</summary>
		public PointMass<int[][]> PlayerInTeam_marginal_F;
		/// <summary>Field backing the quit property</summary>
		private bool[][][] Quit;
		/// <summary>Message to marginal of 'quit'</summary>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]> quit_marginal_F;
		public DistributionStructArray<Gaussian,double> skills_F;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> skills_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> skills_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F;
		/// <summary>Message to marginal of 'skills'</summary>
		public DistributionStructArray<Gaussian,double> skills_marginal_F;
		/// <summary>Message from use of 'skills'</summary>
		public DistributionStructArray<Gaussian,double> skills_use_B;
		/// <summary>Buffer for GetDeepJaggedItemsOp&lt;double&gt;.ItemsAverageConditional&lt;DistributionStructArray&lt;Gaussian, double&gt;, DistributionRefArray&lt;DistributionStructArray&lt;Gaussian, double&gt;, double[]&gt;, DistributionStructArray&lt;Gaussian, double&gt;, Gaussian&gt;</summary>
		public DistributionStructArray<Gaussian,double> skills_use_F_marginal;
		public Bernoulli[][][] Under_performing_B;
		public Bernoulli[][][] Under_performing_F;
		public Bernoulli vbool3_F;
		/// <summary>Message to marginal of 'vbool3'</summary>
		public Bernoulli vbool3_marginal_F;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Bernoulli&gt;</summary>
		public Bernoulli vbool3_rep_B_toDef;
		public Bernoulli[] vbool3_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Bernoulli&gt;</summary>
		public Bernoulli vbool3_rep_F_marginal;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Bernoulli&gt;</summary>
		public Bernoulli[] vbool3_rep_rep_B_toDef;
		public Bernoulli[][] vbool3_rep_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Bernoulli&gt;</summary>
		public Bernoulli[] vbool3_rep_rep_F_marginal;
		public Bernoulli[][][] vbool3_rep_rep_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Bernoulli&gt;</summary>
		public Bernoulli[][] vbool3_rep_rep_rep_B_toDef;
		public Bernoulli[][][] vbool3_rep_rep_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Bernoulli&gt;</summary>
		public Bernoulli[][] vbool3_rep_rep_rep_F_marginal;
		public Bernoulli vbool4_F;
		/// <summary>Message to marginal of 'vbool4'</summary>
		public Bernoulli vbool4_marginal_F;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Bernoulli&gt;</summary>
		public Bernoulli vbool4_rep_B_toDef;
		public Bernoulli[] vbool4_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Bernoulli&gt;</summary>
		public Bernoulli vbool4_rep_F_marginal;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Bernoulli&gt;</summary>
		public Bernoulli[] vbool4_rep_rep_B_toDef;
		public Bernoulli[][] vbool4_rep_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Bernoulli&gt;</summary>
		public Bernoulli[] vbool4_rep_rep_F_marginal;
		public Bernoulli[][][] vbool4_rep_rep_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Bernoulli&gt;</summary>
		public Bernoulli[][] vbool4_rep_rep_rep_B_toDef;
		public Bernoulli[][][] vbool4_rep_rep_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Bernoulli&gt;</summary>
		public Bernoulli[][] vbool4_rep_rep_rep_F_marginal;
		public Bernoulli[][][] vbool6_B;
		public Bernoulli[][][] vbool6_F;
		public Gamma[][][] vc_Times_p_time_F;
		/// <summary>Messages from uses of 'vc_Times_p_time'</summary>
		public Gamma[][][][] vc_Times_p_time_uses_B;
		/// <summary>Field backing the vdouble__20 property</summary>
		private double[] Vdouble__20;
		/// <summary>Message to marginal of 'vdouble__20'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__20_marginal_F;
		/// <summary>Message to marginal of 'vdouble__22'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__22_marginal_F;
		/// <summary>Field backing the vdouble__6 property</summary>
		private double[] Vdouble__6;
		/// <summary>Message to marginal of 'vdouble__6'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__6_marginal_F;
		public Gaussian vdouble23_F;
		/// <summary>Message to marginal of 'vdouble23'</summary>
		public Gaussian vdouble23_marginal_F;
		public Gaussian[] vdouble23_rep_F;
		public Gaussian[][] vdouble23_rep_rep_F;
		public Gaussian[][][] vdouble23_rep_rep_rep_F;
		/// <summary>Message from use of 'vdouble23'</summary>
		public Gaussian vdouble23_use_B;
		/// <summary>Buffer for VariablePointOp_Rprop.MarginalAverageConditional</summary>
		public RpropBufferData vdouble23_use_B_buffer;
		/// <summary>Message to use of 'vdouble23'</summary>
		public Gaussian vdouble23_use_F;
		public Gaussian vdouble28_F;
		/// <summary>Message to marginal of 'vdouble28'</summary>
		public Gaussian vdouble28_marginal_F;
		public Gaussian[] vdouble28_rep_F;
		public Gaussian[][] vdouble28_rep_rep_F;
		public Gaussian[][][] vdouble28_rep_rep_rep_F;
		/// <summary>Message from use of 'vdouble28'</summary>
		public Gaussian vdouble28_use_B;
		/// <summary>Buffer for VariablePointOp_Rprop.MarginalAverageConditional</summary>
		public RpropBufferData vdouble28_use_B_buffer;
		/// <summary>Message to use of 'vdouble28'</summary>
		public Gaussian vdouble28_use_F;
		public Beta vdouble41_F;
		/// <summary>Message to marginal of 'vdouble41'</summary>
		public Beta vdouble41_marginal_F;
		/// <summary>Message from use of 'vdouble41'</summary>
		public Beta vdouble41_use_B;
		/// <summary>Buffer for VariablePointOp_RpropBeta.MarginalAverageConditional</summary>
		public RpropBufferData vdouble41_use_B_bufferBeta;
		/// <summary>Message to use of 'vdouble41'</summary>
		public Beta vdouble41_use_F;
		public Beta vdouble42_F;
		/// <summary>Message to marginal of 'vdouble42'</summary>
		public Beta vdouble42_marginal_F;
		/// <summary>Message from use of 'vdouble42'</summary>
		public Beta vdouble42_use_B;
		/// <summary>Buffer for VariablePointOp_RpropBeta.MarginalAverageConditional</summary>
		public RpropBufferData vdouble42_use_B_bufferBeta;
		/// <summary>Message to use of 'vdouble42'</summary>
		public Beta vdouble42_use_F;
		public double[][] vdouble57_reduced;
		public double[][] vdouble63_reduced;
		public double[][] vdouble64_reduced;
		public Gaussian[][][] vdouble65_F;
		public Gaussian[][][] vdouble66_F;
		public Gaussian[][][] vdouble73_B;
		public Gaussian[][][] vdouble73_F;
		public Gaussian[][][] vdouble74_B;
		public Gaussian[][][] vdouble74_F;
		public Gaussian[][][] vdouble75_B;
		public Gaussian[][][] vdouble75_F;
		public Gaussian[][][] vdouble78_F;
		/// <summary>Message from use of 'vdouble78'</summary>
		public Gaussian[][][] vdouble78_use_B;
		public Gaussian[][][] vdouble81_B;
		public Gaussian[][][] vdouble81_F;
		public Gaussian[][][] vdouble82_B;
		public Gaussian[][][] vdouble82_F;
		public Gaussian[][][] vdouble83_F;
		/// <summary>Message from use of 'vdouble86'</summary>
		public Gaussian[][][] vdouble86_use_B;
		public Gaussian[][][] vdouble89_B;
		public Gaussian[][][] vdouble89_F;
		public Gaussian[][][] vdouble90_B;
		public Gaussian[][][] vdouble90_F;
		public Gaussian[][][] vdouble91_F;
		/// <summary>Message from use of 'vdouble91'</summary>
		public Gaussian[][][] vdouble91_use_B;
		public Gaussian[][][] vdouble93_B;
		public Gaussian[][][] vdouble93_F;
		/// <summary>Field backing the vint____2 property</summary>
		private int[][] Vint____2;
		/// <summary>Message to marginal of 'vint____2'</summary>
		public PointMass<int[][]> vint____2_marginal_F;
		#endregion

		#region Properties
		/// <summary>The externally-specified value of 'deathcount'</summary>
		public double[][][] deathcount
		{
			get {
				return this.Deathcount;
			}
			set {
				if ((value!=null)&&(value.Length!=1000)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+1000)+" was expected for variable \'deathcount\'");
				}
				this.Deathcount = value;
				this.numberOfIterationsDone = 0;
				this.Changed_deathcount_PlayerInTeam_isDone = false;
				this.Changed_draw_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_Playe6_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_deathcount_draw_killcount_Match_time_m_p_time_m__t__n_Playe1_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_draw_killcount_Match_time_m_p_time_3_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerInTeam_Init_deathcount_draw_killcount_Match12_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_Init_deathcount_draw_killcount_Match_ti9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathcount_draw_kil10_isInitialised = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathc11_isInitialised = false;
				this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_I13_isInitialised = false;
				this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_q14_isInitialised = false;
				this.Changed_deathcount_draw_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerI4_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'draw'</summary>
		public int[] draw
		{
			get {
				return this.Draw;
			}
			set {
				if ((value!=null)&&(value.Length!=1000)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+1000)+" was expected for variable \'draw\'");
				}
				this.Draw = value;
				this.numberOfIterationsDone = 0;
				this.Changed_draw_isDone = false;
				this.Changed_draw_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_Playe6_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_deathcount_draw_killcount_Match_time_m_p_time_m__t__n_Playe1_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_draw_killcount_Match_time_m_p_time_3_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerInTeam_Init_deathcount_draw_killcount_Match12_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_Init_deathcount_draw_killcount_Match_ti9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathcount_draw_kil10_isInitialised = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathc11_isInitialised = false;
				this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_I13_isInitialised = false;
				this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_q14_isInitialised = false;
				this.Changed_deathcount_draw_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerI4_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'killcount'</summary>
		public double[][][] killcount
		{
			get {
				return this.Killcount;
			}
			set {
				if ((value!=null)&&(value.Length!=1000)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+1000)+" was expected for variable \'killcount\'");
				}
				this.Killcount = value;
				this.numberOfIterationsDone = 0;
				this.Changed_killcount_PlayerInTeam_isDone = false;
				this.Changed_draw_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_Playe6_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_deathcount_draw_killcount_Match_time_m_p_time_m__t__n_Playe1_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_draw_killcount_Match_time_m_p_time_3_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerInTeam_Init_deathcount_draw_killcount_Match12_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_Init_deathcount_draw_killcount_Match_ti9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathcount_draw_kil10_isInitialised = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathc11_isInitialised = false;
				this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_I13_isDone = false;
				this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_q14_isDone = false;
				this.Changed_deathcount_draw_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerI4_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'Match_time_m'</summary>
		public double[] Match_time_m
		{
			get {
				return this.match_time_m;
			}
			set {
				if ((value!=null)&&(value.Length!=1000)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+1000)+" was expected for variable \'Match_time_m\'");
				}
				this.match_time_m = value;
				this.numberOfIterationsDone = 0;
				this.Changed_Match_time_m_isDone = false;
				this.Changed_draw_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_Playe6_isInitialised = false;
				this.Changed_Match_time_m_p_time_m__t__n_PlayerInTeam_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_deathcount_draw_killcount_Match_time_m_p_time_m__t__n_Playe1_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_draw_killcount_Match_time_m_p_time_3_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerInTeam_Init_deathcount_draw_killcount_Match12_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_Init_deathcount_draw_killcount_Match_ti9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathcount_draw_kil10_isInitialised = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathc11_isDone = false;
				this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_I13_isDone = false;
				this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_q14_isDone = false;
				this.Changed_deathcount_draw_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerI4_isDone = false;
			}
		}

		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'p_time_m__t__n'</summary>
		public double[][][] p_time_m__t__n
		{
			get {
				return this.P_time_m__t__n;
			}
			set {
				if ((value!=null)&&(value.Length!=1000)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+1000)+" was expected for variable \'p_time_m__t__n\'");
				}
				this.P_time_m__t__n = value;
				this.numberOfIterationsDone = 0;
				this.Changed_draw_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_Playe6_isInitialised = false;
				this.Changed_p_time_m__t__n_PlayerInTeam_isDone = false;
				this.Changed_Match_time_m_p_time_m__t__n_PlayerInTeam_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_deathcount_draw_killcount_Match_time_m_p_time_m__t__n_Playe1_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_draw_killcount_Match_time_m_p_time_3_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerInTeam_Init_deathcount_draw_killcount_Match12_isDone = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_Init_deathcount_draw_killcount_Match_ti9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathcount_draw_kil10_isDone = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathc11_isDone = false;
				this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_I13_isDone = false;
				this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_q14_isDone = false;
				this.Changed_deathcount_draw_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerI4_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'PlayerIndex'</summary>
		public int[][][] PlayerIndex
		{
			get {
				return this.playerIndex;
			}
			set {
				if ((value!=null)&&(value.Length!=1000)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+1000)+" was expected for variable \'PlayerIndex\'");
				}
				this.playerIndex = value;
				this.numberOfIterationsDone = 0;
				this.Changed_PlayerIndex_isDone = false;
				this.Changed_draw_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_Playe6_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_PlayerIndex_PlayerInTeam_vdouble__20_vdouble__6_vint____2_isInitialised = false;
				this.Changed_numberOfIterations_PlayerIndex_PlayerInTeam_vdouble__20_vdouble__6_vint____2_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_deathcount_draw_killcount_Match_time_m_p_time_m__t__n_Playe1_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_draw_killcount_Match_time_m_p_time_3_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerInTeam_Init_deathcount_draw_killcount_Match12_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_Init_deathcount_draw_killcount_Match_ti9_isDone = false;
				this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathcount_draw_kil10_isDone = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathc11_isDone = false;
				this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_I13_isDone = false;
				this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_q14_isDone = false;
				this.Changed_deathcount_draw_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerI4_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'PlayerInTeam'</summary>
		public int[][] PlayerInTeam
		{
			get {
				return this.playerInTeam;
			}
			set {
				if ((value!=null)&&(value.Length!=1000)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+1000)+" was expected for variable \'PlayerInTeam\'");
				}
				this.playerInTeam = value;
				this.numberOfIterationsDone = 0;
				this.Changed_PlayerInTeam_quit_isDone = false;
				this.Changed_deathcount_PlayerInTeam_isDone = false;
				this.Changed_killcount_PlayerInTeam_isDone = false;
				this.Changed_draw_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_Playe6_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_PlayerIndex_PlayerInTeam_vdouble__20_vdouble__6_vint____2_isInitialised = false;
				this.Changed_numberOfIterations_PlayerIndex_PlayerInTeam_vdouble__20_vdouble__6_vint____2_isDone = false;
				this.Changed_PlayerInTeam_isDone = false;
				this.Changed_p_time_m__t__n_PlayerInTeam_isDone = false;
				this.Changed_Match_time_m_p_time_m__t__n_PlayerInTeam_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_deathcount_draw_killcount_Match_time_m_p_time_m__t__n_Playe1_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_draw_killcount_Match_time_m_p_time_3_isDone = false;
				this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerInTeam_Init_deathcount_draw_killcount_Match12_isDone = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_Init_deathcount_draw_killcount_Match_ti9_isDone = false;
				this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathcount_draw_kil10_isDone = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathc11_isDone = false;
				this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_I13_isDone = false;
				this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_q14_isDone = false;
				this.Changed_deathcount_draw_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerI4_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'quit'</summary>
		public bool[][][] quit
		{
			get {
				return this.Quit;
			}
			set {
				if ((value!=null)&&(value.Length!=1000)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+1000)+" was expected for variable \'quit\'");
				}
				this.Quit = value;
				this.numberOfIterationsDone = 0;
				this.Changed_PlayerInTeam_quit_isDone = false;
				this.Changed_draw_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_Playe6_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_deathcount_draw_killcount_Match_time_m_p_time_m__t__n_Playe1_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_draw_killcount_Match_time_m_p_time_3_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerInTeam_Init_deathcount_draw_killcount_Match12_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_Init_deathcount_draw_killcount_Match_ti9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathcount_draw_kil10_isInitialised = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathc11_isInitialised = false;
				this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_I13_isInitialised = false;
				this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_q14_isDone = false;
				this.Changed_deathcount_draw_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerI4_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vdouble__20'</summary>
		public double[] vdouble__20
		{
			get {
				return this.Vdouble__20;
			}
			set {
				if ((value!=null)&&(value.Length!=6688)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+6688)+" was expected for variable \'vdouble__20\'");
				}
				this.Vdouble__20 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vdouble__20_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_PlayerIndex_PlayerInTeam_vdouble__20_vdouble__6_vint____2_isInitialised = false;
				this.Changed_numberOfIterations_PlayerIndex_PlayerInTeam_vdouble__20_vdouble__6_vint____2_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vdouble__6'</summary>
		public double[] vdouble__6
		{
			get {
				return this.Vdouble__6;
			}
			set {
				if ((value!=null)&&(value.Length!=200)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+200)+" was expected for variable \'vdouble__6\'");
				}
				this.Vdouble__6 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vdouble__6_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_PlayerIndex_PlayerInTeam_vdouble__20_vdouble__6_vint____2_isInitialised = false;
				this.Changed_numberOfIterations_PlayerIndex_PlayerInTeam_vdouble__20_vdouble__6_vint____2_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vint____2'</summary>
		public int[][] vint____2
		{
			get {
				return this.Vint____2;
			}
			set {
				if ((value!=null)&&(value.Length!=6688)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+6688)+" was expected for variable \'vint____2\'");
				}
				this.Vint____2 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vint____2_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_PlayerIndex_PlayerInTeam_vdouble__20_vdouble__6_vint____2_isInitialised = false;
				this.Changed_numberOfIterations_PlayerIndex_PlayerInTeam_vdouble__20_vdouble__6_vint____2_isDone = false;
			}
		}

		#endregion

		#region Methods
		/// <summary>
		/// Returns the marginal distribution for '_gamma' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gamma _gammaMarginal()
		{
			return this._gamma_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for '_m_q' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian _m_qMarginal()
		{
			return this._m_q_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for '_v_c' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gamma _v_cMarginal()
		{
			return this._v_c_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for '_v_q' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gamma _v_qMarginal()
		{
			return this._v_q_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for '_w_d_o' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian _w_d_oMarginal()
		{
			return this._w_d_o_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for '_w_d_p' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian _w_d_pMarginal()
		{
			return this._w_d_p_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for '_w_k_o' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian _w_k_oMarginal()
		{
			return this._w_k_o_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for '_w_k_p' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian _w_k_pMarginal()
		{
			return this._w_k_p_marginal_F;
		}

		/// <summary>Computations that depend on the observed value of deathcount and draw and killcount and Match_time_m and numberOfIterations and p_time_m__t__n and PlayerIndex and PlayerInTeam and quit</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_deathcount_draw_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerI4(int numberOfIterations)
		{
			if (this.Changed_deathcount_draw_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerI4_isDone) {
				return ;
			}
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'player_perf_t__n_item1_uses' Forwards messages.
				this.player_perf_t__n_item1_uses_F[nMatches][1] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][1]);
				for(int _a4 = 0; _a4<this.playerInTeam[nMatches][1]; _a4++) {
					this.player_perf_t__n_item1_uses_F[nMatches][1][_a4] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'SumTeam2_F'
			Gaussian[] SumTeam2_F = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				SumTeam2_F[nMatches] = Gaussian.Uniform();
				// Create array for 'player_perf_t__n_item0_uses' Forwards messages.
				this.player_perf_t__n_item0_uses_F[nMatches][1] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][0]);
				for(int _a3 = 0; _a3<this.playerInTeam[nMatches][0]; _a3++) {
					this.player_perf_t__n_item0_uses_F[nMatches][1][_a3] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'SumTeam1_F'
			Gaussian[] SumTeam1_F = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				SumTeam1_F[nMatches] = Gaussian.Uniform();
			}
			Gaussian Epsilon_F = default(Gaussian);
			// Message to 'Epsilon' from GaussianFromMeanAndVariance factor
			Epsilon_F = Tracing.FireEvent<Gaussian>(GaussianFromMeanAndVarianceOp.SampleAverageConditional(1258.0, 810000.0), "Epsilon_F", this.OnMessageUpdated, false);
			// Create array for replicates of 'Diff_F'
			Gaussian[] Diff_F = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				Diff_F[nMatches] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble97_F'
			Gaussian[] vdouble97_F = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Draw[nMatches]==0) {
					vdouble97_F[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble97_B'
			Gaussian[] vdouble97_B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Draw[nMatches]==0) {
					vdouble97_B[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'Epsilon_0__B'
			Gaussian[] Epsilon_0__B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Draw[nMatches]==0) {
					Epsilon_0__B[nMatches] = Gaussian.Uniform();
				}
			}
			Gaussian[] Epsilon_rep_B;
			// Create array for 'Epsilon_rep' Backwards messages.
			Epsilon_rep_B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				Epsilon_rep_B[nMatches] = Gaussian.Uniform();
			}
			Gaussian[] Epsilon_uses_F;
			// Create array for 'Epsilon_uses' Forwards messages.
			Epsilon_uses_F = new Gaussian[3];
			Epsilon_uses_F[0] = Gaussian.Uniform();
			Gaussian Epsilon_rep_B_toDef;
			Epsilon_rep_B_toDef = ReplicatePointOp.ToDefInit<Gaussian>(Epsilon_uses_F[0]);
			Gaussian[] Epsilon_uses_B;
			// Create array for 'Epsilon_uses' Backwards messages.
			Epsilon_uses_B = new Gaussian[3];
			Epsilon_uses_B[0] = Gaussian.Uniform();
			Epsilon_uses_F[1] = Gaussian.Uniform();
			Gaussian Epsilon_rep2_B_toDef;
			Epsilon_rep2_B_toDef = ReplicatePointOp.ToDefInit<Gaussian>(Epsilon_uses_F[1]);
			Gaussian[] Epsilon_rep2_F;
			// Create array for 'Epsilon_rep2' Forwards messages.
			Epsilon_rep2_F = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				Epsilon_rep2_F[nMatches] = Gaussian.Uniform();
			}
			// Create array for replicates of 'Epsilon_1__F'
			Gaussian[] Epsilon_1__F = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Draw[nMatches]==1) {
					Epsilon_1__F[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble99_F'
			Gaussian[] vdouble99_F = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Draw[nMatches]==1) {
					vdouble99_F[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble100_F'
			Gaussian[] vdouble100_F = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Draw[nMatches]==1) {
					vdouble100_F[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble100_B'
			Gaussian[] vdouble100_B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Draw[nMatches]==1) {
					vdouble100_B[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble99_B'
			Gaussian[] vdouble99_B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Draw[nMatches]==1) {
					vdouble99_B[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'Epsilon_1__B'
			Gaussian[] Epsilon_1__B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Draw[nMatches]==1) {
					Epsilon_1__B[nMatches] = Gaussian.Uniform();
				}
			}
			Gaussian[] Epsilon_rep2_B;
			// Create array for 'Epsilon_rep2' Backwards messages.
			Epsilon_rep2_B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				Epsilon_rep2_B[nMatches] = Gaussian.Uniform();
			}
			Epsilon_uses_B[1] = Gaussian.Uniform();
			Epsilon_uses_F[2] = Gaussian.Uniform();
			Gaussian Epsilon_rep3_B_toDef;
			Epsilon_rep3_B_toDef = ReplicatePointOp.ToDefInit<Gaussian>(Epsilon_uses_F[2]);
			Gaussian[] Epsilon_rep3_F;
			// Create array for 'Epsilon_rep3' Forwards messages.
			Epsilon_rep3_F = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				Epsilon_rep3_F[nMatches] = Gaussian.Uniform();
			}
			// Create array for replicates of 'Epsilon_2__F'
			Gaussian[] Epsilon_2__F = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Draw[nMatches]==2) {
					Epsilon_2__F[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'Epsilon_2__uses_B_toDef'
			Gaussian[] Epsilon_2__uses_B_toDef = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Draw[nMatches]==2) {
					Epsilon_2__uses_B_toDef[nMatches] = ReplicatePointOp.ToDefInit<Gaussian>(Epsilon_2__F[nMatches]);
				}
			}
			// Create array for replicates of 'Epsilon_2__uses_F'
			Gaussian[][] Epsilon_2__uses_F = new Gaussian[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Draw[nMatches]==2) {
					// Create array for 'Epsilon_2__uses' Forwards messages.
					Epsilon_2__uses_F[nMatches] = new Gaussian[2];
					Epsilon_2__uses_F[nMatches][1] = Gaussian.Uniform();
					Epsilon_2__uses_F[nMatches][0] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble103_F'
			Gaussian[] vdouble103_F = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Draw[nMatches]==2) {
					vdouble103_F[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble101_F'
			Gaussian[] vdouble101_F = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Draw[nMatches]==2) {
					vdouble101_F[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vbool13_B'
			Bernoulli[] vbool13_B = new Bernoulli[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Draw[nMatches]==2) {
					vbool13_B[nMatches] = Bernoulli.Uniform();
					// Message to 'vbool13' from Not factor
					vbool13_B[nMatches] = BooleanNotOp.BAverageConditional(true);
				}
			}
			// Create array for replicates of 'vdouble101_B'
			Gaussian[] vdouble101_B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Draw[nMatches]==2) {
					vdouble101_B[nMatches] = Gaussian.Uniform();
					this.Diff_2__uses_B[nMatches][1] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'Diff_2__uses_F'
			Gaussian[][] Diff_2__uses_F = new Gaussian[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Draw[nMatches]==2) {
					// Create array for 'Diff_2__uses' Forwards messages.
					Diff_2__uses_F[nMatches] = new Gaussian[2];
					Diff_2__uses_F[nMatches][1] = Gaussian.Uniform();
					Diff_2__uses_F[nMatches][0] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble104_F'
			Gaussian[] vdouble104_F = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Draw[nMatches]==2) {
					vdouble104_F[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vbool16_B'
			Bernoulli[] vbool16_B = new Bernoulli[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Draw[nMatches]==2) {
					vbool16_B[nMatches] = Bernoulli.Uniform();
					// Message to 'vbool16' from Not factor
					vbool16_B[nMatches] = BooleanNotOp.BAverageConditional(true);
				}
			}
			// Create array for replicates of 'vdouble104_B'
			Gaussian[] vdouble104_B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Draw[nMatches]==2) {
					vdouble104_B[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'Epsilon_2__uses_B'
			Gaussian[][] Epsilon_2__uses_B = new Gaussian[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Draw[nMatches]==2) {
					// Create array for 'Epsilon_2__uses' Backwards messages.
					Epsilon_2__uses_B[nMatches] = new Gaussian[2];
					Epsilon_2__uses_B[nMatches][0] = Gaussian.Uniform();
					Epsilon_2__uses_B[nMatches][1] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble103_B'
			Gaussian[] vdouble103_B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Draw[nMatches]==2) {
					vdouble103_B[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'Epsilon_2__B'
			Gaussian[] Epsilon_2__B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Draw[nMatches]==2) {
					Epsilon_2__B[nMatches] = Gaussian.Uniform();
				}
			}
			Gaussian[] Epsilon_rep3_B;
			// Create array for 'Epsilon_rep3' Backwards messages.
			Epsilon_rep3_B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				Epsilon_rep3_B[nMatches] = Gaussian.Uniform();
			}
			Epsilon_uses_B[2] = Gaussian.Uniform();
			Gaussian Epsilon_use_F = Gaussian.Uniform();
			Gaussian Epsilon_uses_B_toDef;
			Epsilon_uses_B_toDef = ReplicatePointOp.ToDefInit<Gaussian>(Epsilon_use_F);
			Gaussian[] Epsilon_rep_F;
			// Create array for 'Epsilon_rep' Forwards messages.
			Epsilon_rep_F = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				Epsilon_rep_F[nMatches] = Gaussian.Uniform();
			}
			// Create array for replicates of 'Epsilon_0__F'
			Gaussian[] Epsilon_0__F = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Draw[nMatches]==0) {
					Epsilon_0__F[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'Diff_0__B'
			Gaussian[] Diff_0__B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Draw[nMatches]==0) {
					Diff_0__B[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'Diff_B'
			Gaussian[] Diff_B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				Diff_B[nMatches] = Gaussian.Uniform();
			}
			// Create array for replicates of 'Diff_1__B'
			Gaussian[] Diff_1__B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Draw[nMatches]==1) {
					Diff_1__B[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'Diff_2__B'
			Gaussian[] Diff_2__B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Draw[nMatches]==2) {
					Diff_2__B[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'SumTeam2_B'
			Gaussian[] SumTeam2_B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				SumTeam2_B[nMatches] = Gaussian.Uniform();
				// Create array for 'player_perf_t__n_item1_uses' Backwards messages.
				this.player_perf_t__n_item1_uses_B[nMatches][1] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][1]);
				for(int _a4 = 0; _a4<this.playerInTeam[nMatches][1]; _a4++) {
					this.player_perf_t__n_item1_uses_B[nMatches][1][_a4] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'player_perf_t__n_item1_rep_F_marginal'
			DistributionStructArray<Gaussian,double>[][] player_perf_t__n_item1_rep_F_marginal = new DistributionStructArray<Gaussian,double>[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'player_perf_t__n_item1_rep_F_marginal'
				player_perf_t__n_item1_rep_F_marginal[nMatches] = new DistributionStructArray<Gaussian,double>[2];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					if (nTeamsPerMatch==1) {
						player_perf_t__n_item1_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.MarginalInit<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item1_uses_F[nMatches][0]);
					}
				}
			}
			// Create array for replicates of 'player_perf_t__n_item1_rep_F'
			DistributionStructArray<Gaussian,double>[][][] player_perf_t__n_item1_rep_F = new DistributionStructArray<Gaussian,double>[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'player_perf_t__n_item1_rep_F'
				player_perf_t__n_item1_rep_F[nMatches] = new DistributionStructArray<Gaussian,double>[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					if (nTeamsPerMatch==1) {
						// Create array for 'player_perf_t__n_item1_rep' Forwards messages.
						player_perf_t__n_item1_rep_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>[this.playerInTeam[nMatches][nTeamsPerMatch]];
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Create array for 'player_perf_t__n_item1_rep' Forwards messages.
							player_perf_t__n_item1_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][1]);
							for(int _a4 = 0; _a4<this.playerInTeam[nMatches][1]; _a4++) {
								player_perf_t__n_item1_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][_a4] = Gaussian.Uniform();
							}
						}
					}
				}
			}
			// Create array for replicates of 'vdouble70_F'
			Gaussian[][][] vdouble70_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble70_F'
				vdouble70_F[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble70_F'
					vdouble70_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						if (nTeamsPerMatch==1) {
							vdouble70_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						}
					}
				}
			}
			double[][] vdouble68_reduced = new double[1000][];
			double[][] vdouble69_reduced = new double[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				vdouble68_reduced[nMatches] = new double[2];
				vdouble69_reduced[nMatches] = new double[2];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					vdouble68_reduced[nMatches][nTeamsPerMatch] = default(double);
					vdouble69_reduced[nMatches][nTeamsPerMatch] = default(double);
					if (this.playerInTeam[nMatches][nTeamsPerMatch]>0) {
						if (nTeamsPerMatch==1) {
							vdouble68_reduced[nMatches][nTeamsPerMatch] = Factor.Sum(this.P_time_m__t__n[nMatches][0]);
							vdouble69_reduced[nMatches][nTeamsPerMatch] = Factor.Ratio(vdouble68_reduced[nMatches][nTeamsPerMatch], this.match_time_m[nMatches]);
						}
					}
				}
			}
			// Create array for replicates of 'vdouble71_F'
			Gaussian[][][] vdouble71_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble71_F'
				vdouble71_F[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble71_F'
					vdouble71_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						if (nTeamsPerMatch==1) {
							vdouble71_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						}
					}
				}
			}
			// Create array for replicates of 'vdouble23_rep_rep_rep_B'
			Gaussian[][][] vdouble23_rep_rep_rep_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble23_rep_rep_rep_B'
				vdouble23_rep_rep_rep_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for 'vdouble23_rep_rep_rep' Backwards messages.
					vdouble23_rep_rep_rep_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble23_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble23_rep_rep_rep_B_toDef'
			Gaussian[][] vdouble23_rep_rep_rep_B_toDef = new Gaussian[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble23_rep_rep_rep_B_toDef'
				vdouble23_rep_rep_rep_B_toDef[nMatches] = new Gaussian[2];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					vdouble23_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicatePointOp.ToDefInit<Gaussian>(this.vdouble23_rep_rep_F[nMatches][nTeamsPerMatch]);
				}
			}
			// Create array for replicates of 'vdouble23_rep_rep_B'
			Gaussian[][] vdouble23_rep_rep_B = new Gaussian[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'vdouble23_rep_rep' Backwards messages.
				vdouble23_rep_rep_B[nMatches] = new Gaussian[2];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					vdouble23_rep_rep_B[nMatches][nTeamsPerMatch] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble23_rep_rep_B_toDef'
			Gaussian[] vdouble23_rep_rep_B_toDef = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				vdouble23_rep_rep_B_toDef[nMatches] = ReplicatePointOp.ToDefInit<Gaussian>(this.vdouble23_rep_F[nMatches]);
			}
			Gaussian[] vdouble23_rep_B;
			// Create array for 'vdouble23_rep' Backwards messages.
			vdouble23_rep_B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				vdouble23_rep_B[nMatches] = Gaussian.Uniform();
			}
			Gaussian vdouble23_rep_B_toDef;
			vdouble23_rep_B_toDef = ReplicatePointOp.ToDefInit<Gaussian>(this.vdouble23_use_F);
			// Create array for replicates of '_w_k_p_rep_rep_rep_B'
			Gaussian[][][] _w_k_p_rep_rep_rep_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of '_w_k_p_rep_rep_rep_B'
				_w_k_p_rep_rep_rep_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for '_w_k_p_rep_rep_rep' Backwards messages.
					_w_k_p_rep_rep_rep_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						_w_k_p_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of '_w_k_p_rep_rep_rep_B_toDef'
			Gaussian[][] _w_k_p_rep_rep_rep_B_toDef = new Gaussian[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of '_w_k_p_rep_rep_rep_B_toDef'
				_w_k_p_rep_rep_rep_B_toDef[nMatches] = new Gaussian[2];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					_w_k_p_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicatePointOp.ToDefInit<Gaussian>(this._w_k_p_rep_rep_F[nMatches][nTeamsPerMatch]);
				}
			}
			// Create array for replicates of '_w_k_p_rep_rep_B'
			Gaussian[][] _w_k_p_rep_rep_B = new Gaussian[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for '_w_k_p_rep_rep' Backwards messages.
				_w_k_p_rep_rep_B[nMatches] = new Gaussian[2];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					_w_k_p_rep_rep_B[nMatches][nTeamsPerMatch] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of '_w_k_p_rep_rep_B_toDef'
			Gaussian[] _w_k_p_rep_rep_B_toDef = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				_w_k_p_rep_rep_B_toDef[nMatches] = ReplicatePointOp.ToDefInit<Gaussian>(this._w_k_p_rep_F[nMatches]);
			}
			Gaussian[] _w_k_p_rep_B;
			// Create array for '_w_k_p_rep' Backwards messages.
			_w_k_p_rep_B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				_w_k_p_rep_B[nMatches] = Gaussian.Uniform();
			}
			Gaussian _w_k_p_rep_B_toDef;
			_w_k_p_rep_B_toDef = ReplicatePointOp.ToDefInit<Gaussian>(this._w_k_p_use_F);
			// Create array for replicates of 'vdouble86_F'
			Gaussian[][][] vdouble86_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble86_F'
				vdouble86_F[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble86_F'
					vdouble86_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble86_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vc_Times_p_time_uses_B_toDef'
			Gamma[][][] vc_Times_p_time_uses_B_toDef = new Gamma[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vc_Times_p_time_uses_B_toDef'
				vc_Times_p_time_uses_B_toDef[nMatches] = new Gamma[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vc_Times_p_time_uses_B_toDef'
					vc_Times_p_time_uses_B_toDef[nMatches][nTeamsPerMatch] = new Gamma[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vc_Times_p_time_uses_B_toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicatePointOp.ToDefInit<Gamma>(this.vc_Times_p_time_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
					}
				}
			}
			// Create array for replicates of '_v_c_rep_rep_rep_B'
			Gamma[][][] _v_c_rep_rep_rep_B = new Gamma[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of '_v_c_rep_rep_rep_B'
				_v_c_rep_rep_rep_B[nMatches] = new Gamma[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for '_v_c_rep_rep_rep' Backwards messages.
					_v_c_rep_rep_rep_B[nMatches][nTeamsPerMatch] = new Gamma[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						_v_c_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gamma.Uniform();
					}
				}
			}
			// Create array for replicates of '_v_c_rep_rep_rep_B_toDef'
			Gamma[][] _v_c_rep_rep_rep_B_toDef = new Gamma[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of '_v_c_rep_rep_rep_B_toDef'
				_v_c_rep_rep_rep_B_toDef[nMatches] = new Gamma[2];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					_v_c_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicatePointOp.ToDefInit<Gamma>(this._v_c_rep_rep_F[nMatches][nTeamsPerMatch]);
				}
			}
			// Create array for replicates of '_v_c_rep_rep_B'
			Gamma[][] _v_c_rep_rep_B = new Gamma[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for '_v_c_rep_rep' Backwards messages.
				_v_c_rep_rep_B[nMatches] = new Gamma[2];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					_v_c_rep_rep_B[nMatches][nTeamsPerMatch] = Gamma.Uniform();
				}
			}
			// Create array for replicates of '_v_c_rep_rep_B_toDef'
			Gamma[] _v_c_rep_rep_B_toDef = new Gamma[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				_v_c_rep_rep_B_toDef[nMatches] = ReplicatePointOp.ToDefInit<Gamma>(this._v_c_rep_F[nMatches]);
			}
			Gamma[] _v_c_rep_B;
			// Create array for '_v_c_rep' Backwards messages.
			_v_c_rep_B = new Gamma[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				_v_c_rep_B[nMatches] = Gamma.Uniform();
			}
			Gamma _v_c_rep_B_toDef;
			_v_c_rep_B_toDef = ReplicatePointOp.ToDefInit<Gamma>(this._v_c_use_F);
			// Create array for replicates of 'death_count_m__t__n_B'
			Gaussian[][][] death_count_m__t__n_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'death_count_m__t__n_B'
				death_count_m__t__n_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'death_count_m__t__n_B'
					death_count_m__t__n_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						death_count_m__t__n_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble83_B'
			Gaussian[][][] vdouble83_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble83_B'
				vdouble83_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble83_B'
					vdouble83_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble83_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble28_rep_rep_rep_B'
			Gaussian[][][] vdouble28_rep_rep_rep_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble28_rep_rep_rep_B'
				vdouble28_rep_rep_rep_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for 'vdouble28_rep_rep_rep' Backwards messages.
					vdouble28_rep_rep_rep_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble28_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble28_rep_rep_rep_B_toDef'
			Gaussian[][] vdouble28_rep_rep_rep_B_toDef = new Gaussian[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble28_rep_rep_rep_B_toDef'
				vdouble28_rep_rep_rep_B_toDef[nMatches] = new Gaussian[2];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					vdouble28_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicatePointOp.ToDefInit<Gaussian>(this.vdouble28_rep_rep_F[nMatches][nTeamsPerMatch]);
				}
			}
			// Create array for replicates of 'vdouble28_rep_rep_B'
			Gaussian[][] vdouble28_rep_rep_B = new Gaussian[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'vdouble28_rep_rep' Backwards messages.
				vdouble28_rep_rep_B[nMatches] = new Gaussian[2];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					vdouble28_rep_rep_B[nMatches][nTeamsPerMatch] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble28_rep_rep_B_toDef'
			Gaussian[] vdouble28_rep_rep_B_toDef = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				vdouble28_rep_rep_B_toDef[nMatches] = ReplicatePointOp.ToDefInit<Gaussian>(this.vdouble28_rep_F[nMatches]);
			}
			Gaussian[] vdouble28_rep_B;
			// Create array for 'vdouble28_rep' Backwards messages.
			vdouble28_rep_B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				vdouble28_rep_B[nMatches] = Gaussian.Uniform();
			}
			Gaussian vdouble28_rep_B_toDef;
			vdouble28_rep_B_toDef = ReplicatePointOp.ToDefInit<Gaussian>(this.vdouble28_use_F);
			// Create array for replicates of '_w_d_o_rep_rep_rep_B'
			Gaussian[][][] _w_d_o_rep_rep_rep_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of '_w_d_o_rep_rep_rep_B'
				_w_d_o_rep_rep_rep_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for '_w_d_o_rep_rep_rep' Backwards messages.
					_w_d_o_rep_rep_rep_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						_w_d_o_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of '_w_d_o_rep_rep_rep_B_toDef'
			Gaussian[][] _w_d_o_rep_rep_rep_B_toDef = new Gaussian[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of '_w_d_o_rep_rep_rep_B_toDef'
				_w_d_o_rep_rep_rep_B_toDef[nMatches] = new Gaussian[2];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					_w_d_o_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicatePointOp.ToDefInit<Gaussian>(this._w_d_o_rep_rep_F[nMatches][nTeamsPerMatch]);
				}
			}
			// Create array for replicates of '_w_d_o_rep_rep_B'
			Gaussian[][] _w_d_o_rep_rep_B = new Gaussian[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for '_w_d_o_rep_rep' Backwards messages.
				_w_d_o_rep_rep_B[nMatches] = new Gaussian[2];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					_w_d_o_rep_rep_B[nMatches][nTeamsPerMatch] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of '_w_d_o_rep_rep_B_toDef'
			Gaussian[] _w_d_o_rep_rep_B_toDef = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				_w_d_o_rep_rep_B_toDef[nMatches] = ReplicatePointOp.ToDefInit<Gaussian>(this._w_d_o_rep_F[nMatches]);
			}
			Gaussian[] _w_d_o_rep_B;
			// Create array for '_w_d_o_rep' Backwards messages.
			_w_d_o_rep_B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				_w_d_o_rep_B[nMatches] = Gaussian.Uniform();
			}
			Gaussian _w_d_o_rep_B_toDef;
			_w_d_o_rep_B_toDef = ReplicatePointOp.ToDefInit<Gaussian>(this._w_d_o_use_F);
			// Create array for replicates of '_v_q_rep_rep_rep_B_toDef'
			Gamma[][] _v_q_rep_rep_rep_B_toDef = new Gamma[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of '_v_q_rep_rep_rep_B_toDef'
				_v_q_rep_rep_rep_B_toDef[nMatches] = new Gamma[2];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					_v_q_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicatePointOp.ToDefInit<Gamma>(this._v_q_rep_rep_F[nMatches][nTeamsPerMatch]);
				}
			}
			// Create array for replicates of '_v_q_rep_rep_B'
			Gamma[][] _v_q_rep_rep_B = new Gamma[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for '_v_q_rep_rep' Backwards messages.
				_v_q_rep_rep_B[nMatches] = new Gamma[2];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					_v_q_rep_rep_B[nMatches][nTeamsPerMatch] = Gamma.Uniform();
				}
			}
			// Create array for replicates of '_v_q_rep_rep_B_toDef'
			Gamma[] _v_q_rep_rep_B_toDef = new Gamma[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				_v_q_rep_rep_B_toDef[nMatches] = ReplicatePointOp.ToDefInit<Gamma>(this._v_q_rep_F[nMatches]);
			}
			Gamma[] _v_q_rep_B;
			// Create array for '_v_q_rep' Backwards messages.
			_v_q_rep_B = new Gamma[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				_v_q_rep_B[nMatches] = Gamma.Uniform();
			}
			Gamma _v_q_rep_B_toDef;
			_v_q_rep_B_toDef = ReplicatePointOp.ToDefInit<Gamma>(this._v_q_use_F);
			// Create array for replicates of '_m_q_rep_rep_rep_B'
			Gaussian[][][] _m_q_rep_rep_rep_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of '_m_q_rep_rep_rep_B'
				_m_q_rep_rep_rep_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for '_m_q_rep_rep_rep' Backwards messages.
					_m_q_rep_rep_rep_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						_m_q_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of '_m_q_rep_rep_rep_B_toDef'
			Gaussian[][] _m_q_rep_rep_rep_B_toDef = new Gaussian[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of '_m_q_rep_rep_rep_B_toDef'
				_m_q_rep_rep_rep_B_toDef[nMatches] = new Gaussian[2];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					_m_q_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicatePointOp.ToDefInit<Gaussian>(this._m_q_rep_rep_F[nMatches][nTeamsPerMatch]);
				}
			}
			// Create array for replicates of '_m_q_rep_rep_B'
			Gaussian[][] _m_q_rep_rep_B = new Gaussian[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for '_m_q_rep_rep' Backwards messages.
				_m_q_rep_rep_B[nMatches] = new Gaussian[2];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					_m_q_rep_rep_B[nMatches][nTeamsPerMatch] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of '_m_q_rep_rep_B_toDef'
			Gaussian[] _m_q_rep_rep_B_toDef = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				_m_q_rep_rep_B_toDef[nMatches] = ReplicatePointOp.ToDefInit<Gaussian>(this._m_q_rep_F[nMatches]);
			}
			Gaussian[] _m_q_rep_B;
			// Create array for '_m_q_rep' Backwards messages.
			_m_q_rep_B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				_m_q_rep_B[nMatches] = Gaussian.Uniform();
			}
			Gaussian _m_q_rep_B_toDef;
			_m_q_rep_B_toDef = ReplicatePointOp.ToDefInit<Gaussian>(this._m_q_use_F);
			// Create array for replicates of 'vdouble71_B'
			Gaussian[][][] vdouble71_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble71_B'
				vdouble71_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble71_B'
					vdouble71_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						if (nTeamsPerMatch==1) {
							vdouble71_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						}
					}
				}
			}
			// Create array for replicates of 'vdouble70_B'
			Gaussian[][][] vdouble70_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble70_B'
				vdouble70_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble70_B'
					vdouble70_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						if (nTeamsPerMatch==1) {
							vdouble70_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						}
					}
				}
			}
			// Create array for replicates of 'player_perf_t__n_item1_B'
			DistributionStructArray<Gaussian,double>[] player_perf_t__n_item1_B = new DistributionStructArray<Gaussian,double>[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'player_perf_t__n_item1' Backwards messages.
				player_perf_t__n_item1_B[nMatches] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][1]);
				for(int _a4 = 0; _a4<this.playerInTeam[nMatches][1]; _a4++) {
					player_perf_t__n_item1_B[nMatches][_a4] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'SumTeam1_B'
			Gaussian[] SumTeam1_B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				SumTeam1_B[nMatches] = Gaussian.Uniform();
				// Create array for 'player_perf_t__n_item0_uses' Backwards messages.
				this.player_perf_t__n_item0_uses_B[nMatches][0] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][0]);
				for(int _a3 = 0; _a3<this.playerInTeam[nMatches][0]; _a3++) {
					this.player_perf_t__n_item0_uses_B[nMatches][0][_a3] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'Perfomance_opposing_team_B'
			Gaussian[][][] Perfomance_opposing_team_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'Perfomance_opposing_team_B'
				Perfomance_opposing_team_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'Perfomance_opposing_team_B'
					Perfomance_opposing_team_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						Perfomance_opposing_team_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble66_B'
			Gaussian[][][] vdouble66_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble66_B'
				vdouble66_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble66_B'
					vdouble66_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						if (nTeamsPerMatch==0) {
							vdouble66_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						}
					}
				}
			}
			// Create array for replicates of 'vdouble65_B'
			Gaussian[][][] vdouble65_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble65_B'
				vdouble65_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble65_B'
					vdouble65_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						if (nTeamsPerMatch==0) {
							vdouble65_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						}
					}
				}
			}
			// Create array for replicates of 'player_perf_t__n_item0_B'
			DistributionStructArray<Gaussian,double>[] player_perf_t__n_item0_B = new DistributionStructArray<Gaussian,double>[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'player_perf_t__n_item0' Backwards messages.
				player_perf_t__n_item0_B[nMatches] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][0]);
				for(int _a3 = 0; _a3<this.playerInTeam[nMatches][0]; _a3++) {
					player_perf_t__n_item0_B[nMatches][_a3] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'perf_n_m_B'
			Gaussian[][][] perf_n_m_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'perf_n_m_B'
				perf_n_m_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'perf_n_m_B'
					perf_n_m_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						perf_n_m_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'perf_from_ds_use_B'
			Gaussian[][][] perf_from_ds_use_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'perf_from_ds_use_B'
				perf_from_ds_use_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'perf_from_ds_use_B'
					perf_from_ds_use_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						perf_from_ds_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'Damped_skill_B'
			Gaussian[][][] Damped_skill_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'Damped_skill_B'
				Damped_skill_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'Damped_skill_B'
					Damped_skill_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						Damped_skill_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			Gamma p0_rep_B_toDef;
			p0_rep_B_toDef = ReplicatePointOp.ToDefInit<Gamma>(this.p0_use_F);
			Gaussian[] m0_rep_B;
			// Create array for 'm0_rep' Backwards messages.
			m0_rep_B = new Gaussian[6688];
			for(int nPlayers = 0; nPlayers<6688; nPlayers++) {
				m0_rep_B[nPlayers] = Gaussian.Uniform();
			}
			Gaussian m0_rep_B_toDef;
			m0_rep_B_toDef = ReplicatePointOp.ToDefInit<Gaussian>(this.m0_use_F);
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				this.m0_use_B_buffer = VariablePointOp_Rprop.Buffer(this.m0_use_B, this.m0_F, this.m0_marginal_F, this.m0_use_B_buffer);
				// Message to 'm0_marginal' from VariablePoint factor
				this.m0_marginal_F = Tracing.FireEvent<Gaussian>(VariablePointOp_Rprop.MarginalAverageConditional(this.m0_use_B, this.m0_F, this.m0_use_B_buffer, this.m0_marginal_F), "m0_marginal_F", this.OnMessageUpdated, false);
				// Message to 'm0_use' from VariablePoint factor
				this.m0_use_F = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this.m0_use_F, this.m0_marginal_F), "m0_use_F", this.OnMessageUpdated, false);
				this._v_c_use_B_buffer0_ = VariablePointOp_RpropGamma.Buffer0(this._v_c_use_B, this._v_c_F, this._v_c_marginal_F, this._v_c_use_B_buffer0_);
				// Message to '_v_c_marginal' from VariablePoint factor
				this._v_c_marginal_F = Tracing.FireEvent<Gamma>(VariablePointOp_RpropGamma.MarginalAverageConditional(this._v_c_use_B, this._v_c_F, this._v_c_use_B_buffer0_, this._v_c_marginal_F), "_v_c_marginal_F", this.OnMessageUpdated, false);
				// Message to '_v_c_use' from VariablePoint factor
				this._v_c_use_F = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(this._v_c_use_F, this._v_c_marginal_F), "_v_c_use_F", this.OnMessageUpdated, false);
				for(int nMatches = 0; nMatches<1000; nMatches++) {
					// Message to '_v_c_rep' from Replicate factor
					this._v_c_rep_F[nMatches] = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(this._v_c_rep_F[nMatches], this._v_c_use_F), string.Format("_v_c_rep_F[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						// Message to '_v_c_rep_rep' from Replicate factor
						this._v_c_rep_rep_F[nMatches][nTeamsPerMatch] = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(this._v_c_rep_rep_F[nMatches][nTeamsPerMatch], this._v_c_rep_F[nMatches]), string.Format("_v_c_rep_rep_F[{0}]", new object[1] {nTeamsPerMatch}), this.OnMessageUpdated, false);
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Message to '_v_c_rep_rep_rep' from Replicate factor
							this._v_c_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(this._v_c_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this._v_c_rep_rep_F[nMatches][nTeamsPerMatch]), string.Format("_v_c_rep_rep_rep_F[{0}]", new object[1] {nPlayersMinusPerTeam}), this.OnMessageUpdated, false);
							// Message to 'vc_Times_p_time' from Product factor
							this.vc_Times_p_time_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GammaProductOp.ProductAverageConditional(this._v_c_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble78' from Gaussian factor
							this.vdouble78_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOp.SampleAverageConditional(this.vdouble78_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.kill_count_m__t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vc_Times_p_time_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vc_Times_p_time_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]);
							// Message to 'vdouble78_use' from Max factor
							this.vdouble78_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = MaxGaussianOp.BAverageConditional(this.Killcount[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0.0, this.vdouble78_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'kill_count_m__t__n' from Gaussian factor
							this.kill_count_m__t__n_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOp.MeanAverageConditional(this.vdouble78_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.kill_count_m__t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vc_Times_p_time_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vc_Times_p_time_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]);
							// Message to 'vdouble75' from Product factor
							this.vdouble75_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.AAverageConditional(this.kill_count_m__t__n_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble74' from Plus factor
							this.vdouble74_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.BAverageConditional(this.vdouble75_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble73_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						}
					}
				}
				this.Epsilon_use_B_buffer = VariablePointOp_Rprop.Buffer(this.Epsilon_use_B, Epsilon_F, this.Epsilon_marginal_F, this.Epsilon_use_B_buffer);
				// Message to 'Epsilon_marginal' from VariablePoint factor
				this.Epsilon_marginal_F = Tracing.FireEvent<Gaussian>(VariablePointOp_Rprop.MarginalAverageConditional(this.Epsilon_use_B, Epsilon_F, this.Epsilon_use_B_buffer, this.Epsilon_marginal_F), "Epsilon_marginal_F", this.OnMessageUpdated, false);
				// Message to 'Epsilon_use' from VariablePoint factor
				Epsilon_use_F = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(Epsilon_use_F, this.Epsilon_marginal_F), "Epsilon_use_F", this.OnMessageUpdated, false);
				// Message to 'Epsilon_uses' from Replicate factor
				Epsilon_uses_F[0] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(Epsilon_uses_F[0], Epsilon_use_F), "Epsilon_uses_F[0]", this.OnMessageUpdated, false);
				// Message to 'Epsilon_uses' from Replicate factor
				Epsilon_uses_F[1] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(Epsilon_uses_F[1], Epsilon_use_F), "Epsilon_uses_F[1]", this.OnMessageUpdated, false);
				// Message to 'Epsilon_uses' from Replicate factor
				Epsilon_uses_F[2] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(Epsilon_uses_F[2], Epsilon_use_F), "Epsilon_uses_F[2]", this.OnMessageUpdated, false);
				for(int nMatches = 0; nMatches<1000; nMatches++) {
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Message to 'vdouble86' from Gaussian factor
							vdouble86_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOp.SampleAverageConditional(this.vdouble86_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.death_count_m__t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vc_Times_p_time_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vc_Times_p_time_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
							// Message to 'vdouble86_use' from Max factor
							this.vdouble86_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = MaxGaussianOp.BAverageConditional(this.Deathcount[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0.0, vdouble86_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'death_count_m__t__n' from Gaussian factor
							death_count_m__t__n_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOp.MeanAverageConditional(this.vdouble86_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.death_count_m__t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vc_Times_p_time_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vc_Times_p_time_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
							// Message to 'vdouble83' from Product factor
							vdouble83_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.AAverageConditional(death_count_m__t__n_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble82' from Plus factor
							this.vdouble82_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.BAverageConditional(vdouble83_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble81_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'Perfomance_opposing_team_uses' from Product factor
							this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = GaussianProductOp.BAverageConditional(this.vdouble74_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble23_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]);
							// Message to 'Perfomance_opposing_team_uses' from Product factor
							this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = GaussianProductOp.BAverageConditional(this.vdouble82_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this._w_d_o_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
							// Message to 'player_perf_t__n_uses' from Replicate factor
							this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0], this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0, this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]);
						}
					}
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][0]; nPlayersMinusPerTeam++) {
						// Message to 'player_perf_t__n_depth1' from Copy factor
						this.player_perf_t__n_depth1_F[nMatches][0][nPlayersMinusPerTeam] = ArrayHelper.SetTo<Gaussian>(this.player_perf_t__n_depth1_F[nMatches][0][nPlayersMinusPerTeam], this.player_perf_t__n_uses_F[nMatches][0][nPlayersMinusPerTeam][0]);
					}
					// Message to 'player_perf_t__n_item0_uses' from Replicate factor
					this.player_perf_t__n_item0_uses_F[nMatches][0] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item0_uses_B[nMatches], this.player_perf_t__n_depth1_F[nMatches][0], 0, this.player_perf_t__n_item0_uses_F[nMatches][0]);
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						if (nTeamsPerMatch==0) {
							this.player_perf_t__n_item0_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.Marginal<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item0_rep_B_toDef[nMatches][nTeamsPerMatch], this.player_perf_t__n_item0_uses_F[nMatches][0], this.player_perf_t__n_item0_rep_F_marginal[nMatches][nTeamsPerMatch]);
							for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
								// Message to 'player_perf_t__n_item0_rep' from Replicate factor
								this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_0_0__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_item0_rep_F_marginal[nMatches][nTeamsPerMatch], nPlayersMinusPerTeam, this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								this.Perfomance_opposing_team_uses_B_toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.ToDef<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_B_toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'Perfomance_opposing_team' from Replicate factor
								Perfomance_opposing_team_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ArrayHelper.SetTo<Gaussian>(Perfomance_opposing_team_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_B_toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'vdouble66' from Product factor
								vdouble66_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.BAverageConditional(Perfomance_opposing_team_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble64_reduced[nMatches][nTeamsPerMatch]);
								// Message to 'vdouble65' from Ratio factor
								vdouble65_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.AAverageConditional(vdouble66_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Avg_play_time_team_reduced[nMatches][nTeamsPerMatch]);
								// Message to 'vdouble65' from Sum factor
								this.vdouble65_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = FastSumOp.SumAverageConditional(this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'player_perf_t__n_0_0_' from Sum factor
								this.player_perf_t__n_0_0__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(vdouble65_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble65_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_0_0__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'vdouble66' from Ratio factor
								this.vdouble66_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.RatioAverageConditional(this.vdouble65_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Avg_play_time_team_reduced[nMatches][nTeamsPerMatch]);
								// Message to 'Perfomance_opposing_team_0_' from Product factor
								this.Perfomance_opposing_team_0__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(this.vdouble64_reduced[nMatches][nTeamsPerMatch], this.vdouble66_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'Perfomance_opposing_team' from Copy factor
								this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ArrayHelper.SetTo<Gaussian>(this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_0__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.Marginal<Gaussian>(this.Perfomance_opposing_team_uses_B_toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'Perfomance_opposing_team_uses' from Replicate factor
								this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2], this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 2, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2]);
								// Message to 'Perfomance_opposing_team_uses' from Replicate factor
								this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1], this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 1, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
								// Message to 'Perfomance_opposing_team_uses' from Replicate factor
								this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0], this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]);
							}
							this.player_perf_t__n_item0_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.ToDef<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_0_0__B[nMatches][nTeamsPerMatch], this.player_perf_t__n_item0_rep_B_toDef[nMatches][nTeamsPerMatch]);
							// Message to 'player_perf_t__n_item0_uses' from Replicate factor
							this.player_perf_t__n_item0_uses_B[nMatches][0] = ArrayHelper.SetTo<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item0_uses_B[nMatches][0], this.player_perf_t__n_item0_rep_B_toDef[nMatches][nTeamsPerMatch]);
						}
					}
					// Message to 'player_perf_t__n_item0_uses' from Replicate factor
					this.player_perf_t__n_item0_uses_F[nMatches][1] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item0_uses_B[nMatches], this.player_perf_t__n_depth1_F[nMatches][0], 1, this.player_perf_t__n_item0_uses_F[nMatches][1]);
					// Message to 'SumTeam1' from Sum factor
					SumTeam1_F[nMatches] = FastSumOp.SumAverageConditional(this.player_perf_t__n_item0_uses_F[nMatches][1]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][1]; nPlayersMinusPerTeam++) {
						// Message to 'player_perf_t__n_depth1' from Copy factor
						this.player_perf_t__n_depth1_F[nMatches][1][nPlayersMinusPerTeam] = ArrayHelper.SetTo<Gaussian>(this.player_perf_t__n_depth1_F[nMatches][1][nPlayersMinusPerTeam], this.player_perf_t__n_uses_F[nMatches][1][nPlayersMinusPerTeam][0]);
					}
					// Message to 'player_perf_t__n_item1_uses' from Replicate factor
					this.player_perf_t__n_item1_uses_F[nMatches][1] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item1_uses_B[nMatches], this.player_perf_t__n_depth1_F[nMatches][1], 1, this.player_perf_t__n_item1_uses_F[nMatches][1]);
					// Message to 'SumTeam2' from Sum factor
					SumTeam2_F[nMatches] = FastSumOp.SumAverageConditional(this.player_perf_t__n_item1_uses_F[nMatches][1]);
					// Message to 'Diff' from Difference factor
					Diff_F[nMatches] = DoublePlusOp.AAverageConditional(SumTeam1_F[nMatches], SumTeam2_F[nMatches]);
					// Message to 'Epsilon_rep3' from Replicate factor
					Epsilon_rep3_F[nMatches] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(Epsilon_rep3_F[nMatches], Epsilon_uses_F[2]), string.Format("Epsilon_rep3_F[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
					if (this.Draw[nMatches]==2) {
						// Message to 'Diff_2__uses' from Replicate factor
						Diff_2__uses_F[nMatches][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.Diff_2__uses_B[nMatches], Diff_F[nMatches], 1, Diff_2__uses_F[nMatches][1]);
						// Message to 'Epsilon_2_' from Copy factor
						Epsilon_2__F[nMatches] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(Epsilon_2__F[nMatches], Epsilon_rep3_F[nMatches]), "Epsilon_2__F", this.OnMessageUpdated, false);
						// Message to 'Epsilon_2__uses' from Replicate factor
						Epsilon_2__uses_F[nMatches][1] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(Epsilon_2__uses_F[nMatches][1], Epsilon_2__F[nMatches]), "Epsilon_2__uses_F[1]", this.OnMessageUpdated, false);
						// Message to 'vdouble103' from Difference factor
						vdouble103_F[nMatches] = DoublePlusOp.AAverageConditional(0.0, Epsilon_2__uses_F[nMatches][1]);
						// Message to 'vdouble104' from Difference factor
						vdouble104_F[nMatches] = DoublePlusOp.AAverageConditional(vdouble103_F[nMatches], Diff_2__uses_F[nMatches][1]);
						// Message to 'vdouble104' from IsPositive factor
						vdouble104_B[nMatches] = IsPositiveOp_Proper.XAverageConditional(vbool16_B[nMatches], vdouble104_F[nMatches]);
						// Message to 'Diff_2__uses' from Difference factor
						this.Diff_2__uses_B[nMatches][1] = DoublePlusOp.BAverageConditional(vdouble103_F[nMatches], vdouble104_B[nMatches]);
						// Message to 'Diff_2__uses' from Replicate factor
						Diff_2__uses_F[nMatches][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.Diff_2__uses_B[nMatches], Diff_F[nMatches], 0, Diff_2__uses_F[nMatches][0]);
						// Message to 'Epsilon_2__uses' from Replicate factor
						Epsilon_2__uses_F[nMatches][0] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(Epsilon_2__uses_F[nMatches][0], Epsilon_2__F[nMatches]), "Epsilon_2__uses_F[0]", this.OnMessageUpdated, false);
						// Message to 'vdouble101' from Difference factor
						vdouble101_F[nMatches] = DoublePlusOp.AAverageConditional(Diff_2__uses_F[nMatches][0], Epsilon_2__uses_F[nMatches][0]);
						// Message to 'vdouble101' from IsPositive factor
						vdouble101_B[nMatches] = IsPositiveOp_Proper.XAverageConditional(vbool13_B[nMatches], vdouble101_F[nMatches]);
						// Message to 'Diff_2__uses' from Difference factor
						this.Diff_2__uses_B[nMatches][0] = DoublePlusOp.SumAverageConditional(vdouble101_B[nMatches], Epsilon_2__uses_F[nMatches][0]);
						// Message to 'Diff_2_' from Replicate factor
						Diff_2__B[nMatches] = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(this.Diff_2__uses_B[nMatches], Diff_2__B[nMatches]);
						// Message to 'Diff' from Copy factor
						Diff_B[nMatches] = ArrayHelper.SetTo<Gaussian>(Diff_B[nMatches], Diff_2__B[nMatches]);
						// Message to 'vdouble103' from Difference factor
						vdouble103_B[nMatches] = DoublePlusOp.SumAverageConditional(vdouble104_B[nMatches], Diff_2__uses_F[nMatches][1]);
						// Message to 'Epsilon_2__uses' from Difference factor
						Epsilon_2__uses_B[nMatches][1] = Tracing.FireEvent<Gaussian>(DoublePlusOp.BAverageConditional(0.0, vdouble103_B[nMatches]), "Epsilon_2__uses_B[1]", this.OnMessageUpdated, false);
						// Message to 'Epsilon_2__uses' from Difference factor
						Epsilon_2__uses_B[nMatches][0] = Tracing.FireEvent<Gaussian>(DoublePlusOp.BAverageConditional(Diff_2__uses_F[nMatches][0], vdouble101_B[nMatches]), "Epsilon_2__uses_B[0]", this.OnMessageUpdated, false);
						Epsilon_2__uses_B_toDef[nMatches] = ReplicatePointOp.ToDef<Gaussian>(Epsilon_2__uses_B[nMatches], Epsilon_2__uses_B_toDef[nMatches]);
						// Message to 'Epsilon_2_' from Replicate factor
						Epsilon_2__B[nMatches] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(Epsilon_2__B[nMatches], Epsilon_2__uses_B_toDef[nMatches]), "Epsilon_2__B", this.OnMessageUpdated, false);
						// Message to 'Epsilon_rep3' from Copy factor
						Epsilon_rep3_B[nMatches] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(Epsilon_rep3_B[nMatches], Epsilon_2__B[nMatches]), string.Format("Epsilon_rep3_B[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
					}
					// Message to 'Epsilon_rep2' from Replicate factor
					Epsilon_rep2_F[nMatches] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(Epsilon_rep2_F[nMatches], Epsilon_uses_F[1]), string.Format("Epsilon_rep2_F[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
					if (this.Draw[nMatches]==1) {
						// Message to 'Epsilon_1_' from Copy factor
						Epsilon_1__F[nMatches] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(Epsilon_1__F[nMatches], Epsilon_rep2_F[nMatches]), "Epsilon_1__F", this.OnMessageUpdated, false);
						// Message to 'vdouble99' from Difference factor
						vdouble99_F[nMatches] = DoublePlusOp.AAverageConditional(0.0, Epsilon_1__F[nMatches]);
						// Message to 'vdouble100' from Difference factor
						vdouble100_F[nMatches] = DoublePlusOp.AAverageConditional(vdouble99_F[nMatches], Diff_F[nMatches]);
						// Message to 'vdouble100' from IsPositive factor
						vdouble100_B[nMatches] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(true), vdouble100_F[nMatches]);
						// Message to 'Diff_1_' from Difference factor
						Diff_1__B[nMatches] = DoublePlusOp.BAverageConditional(vdouble99_F[nMatches], vdouble100_B[nMatches]);
						// Message to 'Diff' from Copy factor
						Diff_B[nMatches] = ArrayHelper.SetTo<Gaussian>(Diff_B[nMatches], Diff_1__B[nMatches]);
						// Message to 'vdouble99' from Difference factor
						vdouble99_B[nMatches] = DoublePlusOp.SumAverageConditional(vdouble100_B[nMatches], Diff_F[nMatches]);
						// Message to 'Epsilon_1_' from Difference factor
						Epsilon_1__B[nMatches] = Tracing.FireEvent<Gaussian>(DoublePlusOp.BAverageConditional(0.0, vdouble99_B[nMatches]), "Epsilon_1__B", this.OnMessageUpdated, false);
						// Message to 'Epsilon_rep2' from Copy factor
						Epsilon_rep2_B[nMatches] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(Epsilon_rep2_B[nMatches], Epsilon_1__B[nMatches]), string.Format("Epsilon_rep2_B[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
					}
					// Message to 'Epsilon_rep' from Replicate factor
					Epsilon_rep_F[nMatches] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(Epsilon_rep_F[nMatches], Epsilon_uses_F[0]), string.Format("Epsilon_rep_F[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
					if (this.Draw[nMatches]==0) {
						// Message to 'Epsilon_0_' from Copy factor
						Epsilon_0__F[nMatches] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(Epsilon_0__F[nMatches], Epsilon_rep_F[nMatches]), "Epsilon_0__F", this.OnMessageUpdated, false);
						// Message to 'vdouble97' from Difference factor
						vdouble97_F[nMatches] = DoublePlusOp.AAverageConditional(Diff_F[nMatches], Epsilon_0__F[nMatches]);
						// Message to 'vdouble97' from IsPositive factor
						vdouble97_B[nMatches] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(true), vdouble97_F[nMatches]);
						// Message to 'Diff_0_' from Difference factor
						Diff_0__B[nMatches] = DoublePlusOp.SumAverageConditional(vdouble97_B[nMatches], Epsilon_0__F[nMatches]);
						// Message to 'Diff' from Copy factor
						Diff_B[nMatches] = ArrayHelper.SetTo<Gaussian>(Diff_B[nMatches], Diff_0__B[nMatches]);
						// Message to 'Epsilon_0_' from Difference factor
						Epsilon_0__B[nMatches] = Tracing.FireEvent<Gaussian>(DoublePlusOp.BAverageConditional(Diff_F[nMatches], vdouble97_B[nMatches]), "Epsilon_0__B", this.OnMessageUpdated, false);
						// Message to 'Epsilon_rep' from Copy factor
						Epsilon_rep_B[nMatches] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(Epsilon_rep_B[nMatches], Epsilon_0__B[nMatches]), string.Format("Epsilon_rep_B[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
					}
					// Message to 'SumTeam1' from Difference factor
					SumTeam1_B[nMatches] = DoublePlusOp.SumAverageConditional(Diff_B[nMatches], SumTeam2_F[nMatches]);
					// Message to 'player_perf_t__n_item0_uses' from Sum factor
					this.player_perf_t__n_item0_uses_B[nMatches][1] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(SumTeam1_B[nMatches], SumTeam1_F[nMatches], this.player_perf_t__n_item0_uses_F[nMatches][1], this.player_perf_t__n_item0_uses_B[nMatches][1]);
					// Message to 'player_perf_t__n_item0' from Replicate factor
					player_perf_t__n_item0_B[nMatches] = ReplicateOp_NoDivide.DefAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item0_uses_B[nMatches], player_perf_t__n_item0_B[nMatches]);
					// Message to 'SumTeam2' from Difference factor
					SumTeam2_B[nMatches] = DoublePlusOp.BAverageConditional(SumTeam1_F[nMatches], Diff_B[nMatches]);
					// Message to 'player_perf_t__n_item1_uses' from Sum factor
					this.player_perf_t__n_item1_uses_B[nMatches][1] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(SumTeam2_B[nMatches], SumTeam2_F[nMatches], this.player_perf_t__n_item1_uses_F[nMatches][1], this.player_perf_t__n_item1_uses_B[nMatches][1]);
					// Message to 'player_perf_t__n_item1_uses' from Replicate factor
					this.player_perf_t__n_item1_uses_F[nMatches][0] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item1_uses_B[nMatches], this.player_perf_t__n_depth1_F[nMatches][1], 0, this.player_perf_t__n_item1_uses_F[nMatches][0]);
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						if (nTeamsPerMatch==1) {
							player_perf_t__n_item1_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.Marginal<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item1_rep_B_toDef[nMatches][nTeamsPerMatch], this.player_perf_t__n_item1_uses_F[nMatches][0], player_perf_t__n_item1_rep_F_marginal[nMatches][nTeamsPerMatch]);
							for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
								// Message to 'player_perf_t__n_item1_rep' from Replicate factor
								player_perf_t__n_item1_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_1_1__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], player_perf_t__n_item1_rep_F_marginal[nMatches][nTeamsPerMatch], nPlayersMinusPerTeam, player_perf_t__n_item1_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								this.Perfomance_opposing_team_uses_B_toDef2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.ToDef<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_B_toDef2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'vdouble71' from Product factor
								vdouble71_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.BAverageConditional(this.Perfomance_opposing_team_uses_B_toDef2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], vdouble69_reduced[nMatches][nTeamsPerMatch]);
								// Message to 'vdouble70' from Ratio factor
								vdouble70_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.AAverageConditional(vdouble71_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Avg_play_time_team_reduced[nMatches][nTeamsPerMatch]);
								// Message to 'vdouble70' from Sum factor
								vdouble70_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = FastSumOp.SumAverageConditional(player_perf_t__n_item1_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'player_perf_t__n_1_1_' from Sum factor
								this.player_perf_t__n_1_1__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(vdouble70_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], vdouble70_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], player_perf_t__n_item1_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_1_1__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'vdouble71' from Ratio factor
								vdouble71_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.RatioAverageConditional(vdouble70_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Avg_play_time_team_reduced[nMatches][nTeamsPerMatch]);
								// Message to 'Perfomance_opposing_team_1_' from Product factor
								this.Perfomance_opposing_team_1__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(vdouble69_reduced[nMatches][nTeamsPerMatch], vdouble71_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.Marginal<Gaussian>(this.Perfomance_opposing_team_uses_B_toDef2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_1__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'Perfomance_opposing_team_uses' from Replicate factor
								this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2], this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 2, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2]);
								// Message to 'Perfomance_opposing_team_uses' from Replicate factor
								this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1], this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 1, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
								// Message to 'Perfomance_opposing_team_uses' from Replicate factor
								this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0], this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]);
							}
							this.player_perf_t__n_item1_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.ToDef<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_1_1__B[nMatches][nTeamsPerMatch], this.player_perf_t__n_item1_rep_B_toDef[nMatches][nTeamsPerMatch]);
							// Message to 'player_perf_t__n_item1_uses' from Replicate factor
							this.player_perf_t__n_item1_uses_B[nMatches][0] = ArrayHelper.SetTo<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item1_uses_B[nMatches][0], this.player_perf_t__n_item1_rep_B_toDef[nMatches][nTeamsPerMatch]);
						}
					}
					// Message to 'player_perf_t__n_item1' from Replicate factor
					player_perf_t__n_item1_B[nMatches] = ReplicateOp_NoDivide.DefAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item1_uses_B[nMatches], player_perf_t__n_item1_B[nMatches]);
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Message to 'player_perf_t__n_uses' from Difference factor
							this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3] = DoublePlusOp.SumAverageConditional(this.vdouble89_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2]);
							// Message to '_w_d_o_rep_rep_rep' from Product factor
							_w_d_o_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Tracing.FireEvent<Gaussian>(GaussianProductOp.AAverageConditional(this.vdouble82_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this._w_d_o_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]), string.Format("_w_d_o_rep_rep_rep_B[{0}]", new object[1] {nPlayersMinusPerTeam}), this.OnMessageUpdated, false);
						}
						_w_d_o_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicatePointOp.ToDef<Gaussian>(_w_d_o_rep_rep_rep_B[nMatches][nTeamsPerMatch], _w_d_o_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch]);
						// Message to '_w_d_o_rep_rep' from Replicate factor
						_w_d_o_rep_rep_B[nMatches][nTeamsPerMatch] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(_w_d_o_rep_rep_B[nMatches][nTeamsPerMatch], _w_d_o_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch]), string.Format("_w_d_o_rep_rep_B[{0}]", new object[1] {nTeamsPerMatch}), this.OnMessageUpdated, false);
					}
					_w_d_o_rep_rep_B_toDef[nMatches] = ReplicatePointOp.ToDef<Gaussian>(_w_d_o_rep_rep_B[nMatches], _w_d_o_rep_rep_B_toDef[nMatches]);
					// Message to '_w_d_o_rep' from Replicate factor
					_w_d_o_rep_B[nMatches] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(_w_d_o_rep_B[nMatches], _w_d_o_rep_rep_B_toDef[nMatches]), string.Format("_w_d_o_rep_B[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
				}
				_w_d_o_rep_B_toDef = ReplicatePointOp.ToDef<Gaussian>(_w_d_o_rep_B, _w_d_o_rep_B_toDef);
				// Message to '_w_d_o_use' from Replicate factor
				this._w_d_o_use_B = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this._w_d_o_use_B, _w_d_o_rep_B_toDef), "_w_d_o_use_B", this.OnMessageUpdated, false);
				this._w_d_o_use_B_buffer = VariablePointOp_Rprop.Buffer(this._w_d_o_use_B, this._w_d_o_F, this._w_d_o_marginal_F, this._w_d_o_use_B_buffer);
				// Message to '_w_d_o_marginal' from VariablePoint factor
				this._w_d_o_marginal_F = Tracing.FireEvent<Gaussian>(VariablePointOp_Rprop.MarginalAverageConditional(this._w_d_o_use_B, this._w_d_o_F, this._w_d_o_use_B_buffer, this._w_d_o_marginal_F), "_w_d_o_marginal_F", this.OnMessageUpdated, false);
				// Message to '_w_d_o_use' from VariablePoint factor
				this._w_d_o_use_F = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this._w_d_o_use_F, this._w_d_o_marginal_F), "_w_d_o_use_F", this.OnMessageUpdated, false);
				for(int nMatches = 0; nMatches<1000; nMatches++) {
					// Message to '_w_d_o_rep' from Replicate factor
					this._w_d_o_rep_F[nMatches] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this._w_d_o_rep_F[nMatches], this._w_d_o_use_F), string.Format("_w_d_o_rep_F[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						// Message to '_w_d_o_rep_rep' from Replicate factor
						this._w_d_o_rep_rep_F[nMatches][nTeamsPerMatch] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this._w_d_o_rep_rep_F[nMatches][nTeamsPerMatch], this._w_d_o_rep_F[nMatches]), string.Format("_w_d_o_rep_rep_F[{0}]", new object[1] {nTeamsPerMatch}), this.OnMessageUpdated, false);
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Message to '_w_d_o_rep_rep_rep' from Replicate factor
							this._w_d_o_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this._w_d_o_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this._w_d_o_rep_rep_F[nMatches][nTeamsPerMatch]), string.Format("_w_d_o_rep_rep_rep_F[{0}]", new object[1] {nPlayersMinusPerTeam}), this.OnMessageUpdated, false);
							// Message to 'vdouble82' from Product factor
							this.vdouble82_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOp.ProductAverageConditional(this.vdouble82_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this._w_d_o_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
							// Message to 'vdouble81' from Plus factor
							this.vdouble81_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.AAverageConditional(vdouble83_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble82_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						}
					}
				}
				this.vdouble28_use_B_buffer = VariablePointOp_Rprop.Buffer(this.vdouble28_use_B, this.vdouble28_F, this.vdouble28_marginal_F, this.vdouble28_use_B_buffer);
				// Message to 'vdouble28_marginal' from VariablePoint factor
				this.vdouble28_marginal_F = Tracing.FireEvent<Gaussian>(VariablePointOp_Rprop.MarginalAverageConditional(this.vdouble28_use_B, this.vdouble28_F, this.vdouble28_use_B_buffer, this.vdouble28_marginal_F), "vdouble28_marginal_F", this.OnMessageUpdated, false);
				// Message to 'vdouble28_use' from VariablePoint factor
				this.vdouble28_use_F = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this.vdouble28_use_F, this.vdouble28_marginal_F), "vdouble28_use_F", this.OnMessageUpdated, false);
				for(int nMatches = 0; nMatches<1000; nMatches++) {
					// Message to 'vdouble28_rep' from Replicate factor
					this.vdouble28_rep_F[nMatches] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this.vdouble28_rep_F[nMatches], this.vdouble28_use_F), string.Format("vdouble28_rep_F[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						// Message to 'vdouble28_rep_rep' from Replicate factor
						this.vdouble28_rep_rep_F[nMatches][nTeamsPerMatch] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this.vdouble28_rep_rep_F[nMatches][nTeamsPerMatch], this.vdouble28_rep_F[nMatches]), string.Format("vdouble28_rep_rep_F[{0}]", new object[1] {nTeamsPerMatch}), this.OnMessageUpdated, false);
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Message to 'vdouble28_rep_rep_rep' from Replicate factor
							this.vdouble28_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this.vdouble28_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble28_rep_rep_F[nMatches][nTeamsPerMatch]), string.Format("vdouble28_rep_rep_rep_F[{0}]", new object[1] {nPlayersMinusPerTeam}), this.OnMessageUpdated, false);
							// Message to 'player_perf_t__n_uses' from Product factor
							this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = GaussianProductOp.BAverageConditional(this.vdouble81_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble28_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2]);
							// Message to 'vdouble23_rep_rep_rep' from Product factor
							vdouble23_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Tracing.FireEvent<Gaussian>(GaussianProductOp.AAverageConditional(this.vdouble74_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble23_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]), string.Format("vdouble23_rep_rep_rep_B[{0}]", new object[1] {nPlayersMinusPerTeam}), this.OnMessageUpdated, false);
						}
						vdouble23_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicatePointOp.ToDef<Gaussian>(vdouble23_rep_rep_rep_B[nMatches][nTeamsPerMatch], vdouble23_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch]);
						// Message to 'vdouble23_rep_rep' from Replicate factor
						vdouble23_rep_rep_B[nMatches][nTeamsPerMatch] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(vdouble23_rep_rep_B[nMatches][nTeamsPerMatch], vdouble23_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch]), string.Format("vdouble23_rep_rep_B[{0}]", new object[1] {nTeamsPerMatch}), this.OnMessageUpdated, false);
					}
					vdouble23_rep_rep_B_toDef[nMatches] = ReplicatePointOp.ToDef<Gaussian>(vdouble23_rep_rep_B[nMatches], vdouble23_rep_rep_B_toDef[nMatches]);
					// Message to 'vdouble23_rep' from Replicate factor
					vdouble23_rep_B[nMatches] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(vdouble23_rep_B[nMatches], vdouble23_rep_rep_B_toDef[nMatches]), string.Format("vdouble23_rep_B[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
				}
				vdouble23_rep_B_toDef = ReplicatePointOp.ToDef<Gaussian>(vdouble23_rep_B, vdouble23_rep_B_toDef);
				// Message to 'vdouble23_use' from Replicate factor
				this.vdouble23_use_B = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this.vdouble23_use_B, vdouble23_rep_B_toDef), "vdouble23_use_B", this.OnMessageUpdated, false);
				this.vdouble23_use_B_buffer = VariablePointOp_Rprop.Buffer(this.vdouble23_use_B, this.vdouble23_F, this.vdouble23_marginal_F, this.vdouble23_use_B_buffer);
				// Message to 'vdouble23_marginal' from VariablePoint factor
				this.vdouble23_marginal_F = Tracing.FireEvent<Gaussian>(VariablePointOp_Rprop.MarginalAverageConditional(this.vdouble23_use_B, this.vdouble23_F, this.vdouble23_use_B_buffer, this.vdouble23_marginal_F), "vdouble23_marginal_F", this.OnMessageUpdated, false);
				// Message to 'vdouble23_use' from VariablePoint factor
				this.vdouble23_use_F = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this.vdouble23_use_F, this.vdouble23_marginal_F), "vdouble23_use_F", this.OnMessageUpdated, false);
				for(int nMatches = 0; nMatches<1000; nMatches++) {
					// Message to 'vdouble23_rep' from Replicate factor
					this.vdouble23_rep_F[nMatches] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this.vdouble23_rep_F[nMatches], this.vdouble23_use_F), string.Format("vdouble23_rep_F[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						// Message to 'vdouble23_rep_rep' from Replicate factor
						this.vdouble23_rep_rep_F[nMatches][nTeamsPerMatch] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this.vdouble23_rep_rep_F[nMatches][nTeamsPerMatch], this.vdouble23_rep_F[nMatches]), string.Format("vdouble23_rep_rep_F[{0}]", new object[1] {nTeamsPerMatch}), this.OnMessageUpdated, false);
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Message to 'vdouble23_rep_rep_rep' from Replicate factor
							this.vdouble23_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this.vdouble23_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble23_rep_rep_F[nMatches][nTeamsPerMatch]), string.Format("vdouble23_rep_rep_rep_F[{0}]", new object[1] {nPlayersMinusPerTeam}), this.OnMessageUpdated, false);
							// Message to 'vdouble74' from Product factor
							this.vdouble74_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOp.ProductAverageConditional(this.vdouble74_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble23_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]);
							// Message to 'vdouble73' from Plus factor
							this.vdouble73_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.AAverageConditional(this.vdouble75_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble74_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						}
					}
				}
				this._w_k_p_use_B_buffer = VariablePointOp_Rprop.Buffer(this._w_k_p_use_B, this._w_k_p_F, this._w_k_p_marginal_F, this._w_k_p_use_B_buffer);
				// Message to '_w_k_p_marginal' from VariablePoint factor
				this._w_k_p_marginal_F = Tracing.FireEvent<Gaussian>(VariablePointOp_Rprop.MarginalAverageConditional(this._w_k_p_use_B, this._w_k_p_F, this._w_k_p_use_B_buffer, this._w_k_p_marginal_F), "_w_k_p_marginal_F", this.OnMessageUpdated, false);
				// Message to '_w_k_p_use' from VariablePoint factor
				this._w_k_p_use_F = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this._w_k_p_use_F, this._w_k_p_marginal_F), "_w_k_p_use_F", this.OnMessageUpdated, false);
				for(int nMatches = 0; nMatches<1000; nMatches++) {
					// Message to '_w_k_p_rep' from Replicate factor
					this._w_k_p_rep_F[nMatches] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this._w_k_p_rep_F[nMatches], this._w_k_p_use_F), string.Format("_w_k_p_rep_F[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						// Message to '_w_k_p_rep_rep' from Replicate factor
						this._w_k_p_rep_rep_F[nMatches][nTeamsPerMatch] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this._w_k_p_rep_rep_F[nMatches][nTeamsPerMatch], this._w_k_p_rep_F[nMatches]), string.Format("_w_k_p_rep_rep_F[{0}]", new object[1] {nTeamsPerMatch}), this.OnMessageUpdated, false);
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Message to '_w_k_p_rep_rep_rep' from Replicate factor
							this._w_k_p_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this._w_k_p_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this._w_k_p_rep_rep_F[nMatches][nTeamsPerMatch]), string.Format("_w_k_p_rep_rep_rep_F[{0}]", new object[1] {nPlayersMinusPerTeam}), this.OnMessageUpdated, false);
							// Message to 'player_perf_t__n_uses' from Product factor
							this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = GaussianProductOp.BAverageConditional(this.vdouble73_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this._w_k_p_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
						}
					}
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][0]; nPlayersMinusPerTeam++) {
						// Message to 'player_perf_t__n_uses' from Copy factor
						this.player_perf_t__n_uses_B[nMatches][0][nPlayersMinusPerTeam][0] = ArrayHelper.SetTo<Gaussian>(this.player_perf_t__n_uses_B[nMatches][0][nPlayersMinusPerTeam][0], player_perf_t__n_item0_B[nMatches][nPlayersMinusPerTeam]);
					}
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][1]; nPlayersMinusPerTeam++) {
						// Message to 'player_perf_t__n_uses' from Copy factor
						this.player_perf_t__n_uses_B[nMatches][1][nPlayersMinusPerTeam][0] = ArrayHelper.SetTo<Gaussian>(this.player_perf_t__n_uses_B[nMatches][1][nPlayersMinusPerTeam][0], player_perf_t__n_item1_B[nMatches][nPlayersMinusPerTeam]);
					}
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							this.player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.ToDef<Gaussian>(this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'perf_n_m' from Ratio factor
							perf_n_m_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.AAverageConditional(this.player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.match_time_m[nMatches]);
							// Message to 'perf_from_ds_use' from Product factor
							perf_from_ds_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.AAverageConditional(perf_n_m_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'Damped_skill' from Gaussian factor
							Damped_skill_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.MeanAverageConditional(perf_from_ds_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 1.0);
							// Message to 'skills_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' from Backward factor
							this.skills_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DampBackwardOp.ValueAverageConditional<Gaussian>(Damped_skill_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0.5, this.skills_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						}
					}
				}
				// Message to 'skills_use' from GetDeepJaggedItems factor
				this.skills_use_B = GetDeepJaggedItemsOp<double>.ArrayAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>,Gaussian,DistributionStructArray<Gaussian,double>>(this.skills_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B, this.playerIndex, this.skills_use_B);
				for(int nPlayers = 0; nPlayers<6688; nPlayers++) {
					// Message to 'm0_rep' from Replicate factor
					this.m0_rep_F[nPlayers] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this.m0_rep_F[nPlayers], this.m0_use_F), string.Format("m0_rep_F[{0}]", new object[1] {nPlayers}), this.OnMessageUpdated, false);
					// Message to 'p0_rep' from Gaussian factor
					this.p0_rep_B[nPlayers] = Tracing.FireEvent<Gamma>(GaussianOp.PrecisionAverageConditional(this.skills_use_B[nPlayers], this.m0_rep_F[nPlayers], this.p0_rep_F[nPlayers]), string.Format("p0_rep_B[{0}]", new object[1] {nPlayers}), this.OnMessageUpdated, false);
				}
				p0_rep_B_toDef = ReplicatePointOp.ToDef<Gamma>(this.p0_rep_B, p0_rep_B_toDef);
				// Message to 'p0_use' from Replicate factor
				this.p0_use_B = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(this.p0_use_B, p0_rep_B_toDef), "p0_use_B", this.OnMessageUpdated, false);
				this.p0_use_B_buffer0_ = VariablePointOp_RpropGamma.Buffer0(this.p0_use_B, this.p0_F, this.p0_marginal_F, this.p0_use_B_buffer0_);
				// Message to 'p0_marginal' from VariablePoint factor
				this.p0_marginal_F = Tracing.FireEvent<Gamma>(VariablePointOp_RpropGamma.MarginalAverageConditional(this.p0_use_B, this.p0_F, this.p0_use_B_buffer0_, this.p0_marginal_F), "p0_marginal_F", this.OnMessageUpdated, false);
				// Message to 'p0_use' from VariablePoint factor
				this.p0_use_F = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(this.p0_use_F, this.p0_marginal_F), "p0_use_F", this.OnMessageUpdated, false);
				for(int nPlayers = 0; nPlayers<6688; nPlayers++) {
					// Message to 'p0_rep' from Replicate factor
					this.p0_rep_F[nPlayers] = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(this.p0_rep_F[nPlayers], this.p0_use_F), string.Format("p0_rep_F[{0}]", new object[1] {nPlayers}), this.OnMessageUpdated, false);
					// Message to 'm0_rep' from Gaussian factor
					m0_rep_B[nPlayers] = Tracing.FireEvent<Gaussian>(GaussianOp.MeanAverageConditional(this.skills_use_B[nPlayers], this.m0_rep_F[nPlayers], this.p0_rep_F[nPlayers], this.p0_rep_B[nPlayers]), string.Format("m0_rep_B[{0}]", new object[1] {nPlayers}), this.OnMessageUpdated, false);
					// Message to 'skills' from Gaussian factor
					this.skills_F[nPlayers] = GaussianOp.SampleAverageConditional(this.skills_use_B[nPlayers], this.m0_rep_F[nPlayers], this.p0_rep_F[nPlayers], this.p0_rep_B[nPlayers]);
				}
				m0_rep_B_toDef = ReplicatePointOp.ToDef<Gaussian>(m0_rep_B, m0_rep_B_toDef);
				// Message to 'm0_use' from Replicate factor
				this.m0_use_B = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this.m0_use_B, m0_rep_B_toDef), "m0_use_B", this.OnMessageUpdated, false);
				this.skills_use_F_marginal = GetDeepJaggedItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.skills_F, this.skills_use_B, this.skills_use_F_marginal);
				for(int nMatches = 0; nMatches<1000; nMatches++) {
					// Message to 'skills_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' from GetDeepJaggedItems factor
					this.skills_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F[nMatches] = GetDeepJaggedItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>,Gaussian>(this.skills_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B[nMatches], this.skills_F, this.skills_use_F_marginal, this.playerIndex, nMatches, this.skills_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F[nMatches]);
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Message to 'perf_from_ds' from Gaussian factor
							this.perf_from_ds_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.SampleAverageConditional(this.skills_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 1.0);
							// Message to 'perf_n_m' from Product factor
							this.perf_n_m_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(this.perf_from_ds_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'player_perf_t__n' from Ratio factor
							this.player_perf_t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.RatioAverageConditional(this.perf_n_m_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.match_time_m[nMatches]);
							this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.Marginal<Gaussian>(this.player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'player_perf_t__n_uses' from Replicate factor
							this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3], this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 3, this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3]);
							// Message to 'player_perf_t__n_uses' from Replicate factor
							this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2], this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 2, this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2]);
							// Message to 'vdouble81' from Product factor
							this.vdouble81_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOp.ProductAverageConditional(this.vdouble81_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble28_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2]);
							// Message to 'vdouble28_rep_rep_rep' from Product factor
							vdouble28_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Tracing.FireEvent<Gaussian>(GaussianProductOp.AAverageConditional(this.vdouble81_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble28_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2]), string.Format("vdouble28_rep_rep_rep_B[{0}]", new object[1] {nPlayersMinusPerTeam}), this.OnMessageUpdated, false);
							// Message to 'vdouble83' from Plus factor
							this.vdouble83_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.SumAverageConditional(this.vdouble81_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble82_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'death_count_m__t__n' from Product factor
							this.death_count_m__t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(this.vdouble83_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vc_Times_p_time_uses' from Gaussian factor
							this.vc_Times_p_time_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = GaussianOp.PrecisionAverageConditional(this.vdouble86_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.death_count_m__t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vc_Times_p_time_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'player_perf_t__n_uses' from Replicate factor
							this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1], this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 1, this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
							// Message to 'vdouble73' from Product factor
							this.vdouble73_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOp.ProductAverageConditional(this.vdouble73_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this._w_k_p_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
							// Message to 'vdouble75' from Plus factor
							this.vdouble75_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.SumAverageConditional(this.vdouble73_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble74_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'kill_count_m__t__n' from Product factor
							this.kill_count_m__t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(this.vdouble75_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vc_Times_p_time_uses' from Gaussian factor
							this.vc_Times_p_time_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = GaussianOp.PrecisionAverageConditional(this.vdouble78_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.kill_count_m__t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vc_Times_p_time_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							vc_Times_p_time_uses_B_toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicatePointOp.ToDef<Gamma>(this.vc_Times_p_time_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], vc_Times_p_time_uses_B_toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to '_v_c_rep_rep_rep' from Product factor
							_v_c_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Tracing.FireEvent<Gamma>(GammaProductOp.AAverageConditional(vc_Times_p_time_uses_B_toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]), string.Format("_v_c_rep_rep_rep_B[{0}]", new object[1] {nPlayersMinusPerTeam}), this.OnMessageUpdated, false);
							// Message to '_w_k_p_rep_rep_rep' from Product factor
							_w_k_p_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Tracing.FireEvent<Gaussian>(GaussianProductOp.AAverageConditional(this.vdouble73_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this._w_k_p_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]), string.Format("_w_k_p_rep_rep_rep_B[{0}]", new object[1] {nPlayersMinusPerTeam}), this.OnMessageUpdated, false);
						}
						vdouble28_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicatePointOp.ToDef<Gaussian>(vdouble28_rep_rep_rep_B[nMatches][nTeamsPerMatch], vdouble28_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch]);
						// Message to 'vdouble28_rep_rep' from Replicate factor
						vdouble28_rep_rep_B[nMatches][nTeamsPerMatch] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(vdouble28_rep_rep_B[nMatches][nTeamsPerMatch], vdouble28_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch]), string.Format("vdouble28_rep_rep_B[{0}]", new object[1] {nTeamsPerMatch}), this.OnMessageUpdated, false);
						_v_c_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicatePointOp.ToDef<Gamma>(_v_c_rep_rep_rep_B[nMatches][nTeamsPerMatch], _v_c_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch]);
						// Message to '_v_c_rep_rep' from Replicate factor
						_v_c_rep_rep_B[nMatches][nTeamsPerMatch] = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(_v_c_rep_rep_B[nMatches][nTeamsPerMatch], _v_c_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch]), string.Format("_v_c_rep_rep_B[{0}]", new object[1] {nTeamsPerMatch}), this.OnMessageUpdated, false);
						_w_k_p_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicatePointOp.ToDef<Gaussian>(_w_k_p_rep_rep_rep_B[nMatches][nTeamsPerMatch], _w_k_p_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch]);
						// Message to '_w_k_p_rep_rep' from Replicate factor
						_w_k_p_rep_rep_B[nMatches][nTeamsPerMatch] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(_w_k_p_rep_rep_B[nMatches][nTeamsPerMatch], _w_k_p_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch]), string.Format("_w_k_p_rep_rep_B[{0}]", new object[1] {nTeamsPerMatch}), this.OnMessageUpdated, false);
					}
					vdouble28_rep_rep_B_toDef[nMatches] = ReplicatePointOp.ToDef<Gaussian>(vdouble28_rep_rep_B[nMatches], vdouble28_rep_rep_B_toDef[nMatches]);
					// Message to 'vdouble28_rep' from Replicate factor
					vdouble28_rep_B[nMatches] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(vdouble28_rep_B[nMatches], vdouble28_rep_rep_B_toDef[nMatches]), string.Format("vdouble28_rep_B[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
					_v_c_rep_rep_B_toDef[nMatches] = ReplicatePointOp.ToDef<Gamma>(_v_c_rep_rep_B[nMatches], _v_c_rep_rep_B_toDef[nMatches]);
					// Message to '_v_c_rep' from Replicate factor
					_v_c_rep_B[nMatches] = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(_v_c_rep_B[nMatches], _v_c_rep_rep_B_toDef[nMatches]), string.Format("_v_c_rep_B[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
					_w_k_p_rep_rep_B_toDef[nMatches] = ReplicatePointOp.ToDef<Gaussian>(_w_k_p_rep_rep_B[nMatches], _w_k_p_rep_rep_B_toDef[nMatches]);
					// Message to '_w_k_p_rep' from Replicate factor
					_w_k_p_rep_B[nMatches] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(_w_k_p_rep_B[nMatches], _w_k_p_rep_rep_B_toDef[nMatches]), string.Format("_w_k_p_rep_B[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
				}
				this._m_q_use_B_buffer = VariablePointOp_Rprop.Buffer(this._m_q_use_B, this._m_q_F, this._m_q_marginal_F, this._m_q_use_B_buffer);
				// Message to '_m_q_marginal' from VariablePoint factor
				this._m_q_marginal_F = Tracing.FireEvent<Gaussian>(VariablePointOp_Rprop.MarginalAverageConditional(this._m_q_use_B, this._m_q_F, this._m_q_use_B_buffer, this._m_q_marginal_F), "_m_q_marginal_F", this.OnMessageUpdated, false);
				// Message to '_m_q_use' from VariablePoint factor
				this._m_q_use_F = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this._m_q_use_F, this._m_q_marginal_F), "_m_q_use_F", this.OnMessageUpdated, false);
				for(int nMatches = 0; nMatches<1000; nMatches++) {
					// Message to '_m_q_rep' from Replicate factor
					this._m_q_rep_F[nMatches] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this._m_q_rep_F[nMatches], this._m_q_use_F), string.Format("_m_q_rep_F[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						// Message to '_m_q_rep_rep' from Replicate factor
						this._m_q_rep_rep_F[nMatches][nTeamsPerMatch] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this._m_q_rep_rep_F[nMatches][nTeamsPerMatch], this._m_q_rep_F[nMatches]), string.Format("_m_q_rep_rep_F[{0}]", new object[1] {nTeamsPerMatch}), this.OnMessageUpdated, false);
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Message to '_m_q_rep_rep_rep' from Replicate factor
							this._m_q_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this._m_q_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this._m_q_rep_rep_F[nMatches][nTeamsPerMatch]), string.Format("_m_q_rep_rep_rep_F[{0}]", new object[1] {nPlayersMinusPerTeam}), this.OnMessageUpdated, false);
							// Message to 'vdouble89' from Difference factor
							this.vdouble89_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.AAverageConditional(this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3], this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2]);
							// Message to 'vdouble90' from Difference factor
							this.vdouble90_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.AAverageConditional(this.vdouble89_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this._m_q_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to '_v_q_rep_rep_rep' from Gaussian factor
							this._v_q_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Tracing.FireEvent<Gamma>(GaussianOp.PrecisionAverageConditional(this.vdouble91_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble90_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this._v_q_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]), string.Format("_v_q_rep_rep_rep_B[{0}]", new object[1] {nPlayersMinusPerTeam}), this.OnMessageUpdated, false);
						}
						_v_q_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicatePointOp.ToDef<Gamma>(this._v_q_rep_rep_rep_B[nMatches][nTeamsPerMatch], _v_q_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch]);
						// Message to '_v_q_rep_rep' from Replicate factor
						_v_q_rep_rep_B[nMatches][nTeamsPerMatch] = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(_v_q_rep_rep_B[nMatches][nTeamsPerMatch], _v_q_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch]), string.Format("_v_q_rep_rep_B[{0}]", new object[1] {nTeamsPerMatch}), this.OnMessageUpdated, false);
					}
					_v_q_rep_rep_B_toDef[nMatches] = ReplicatePointOp.ToDef<Gamma>(_v_q_rep_rep_B[nMatches], _v_q_rep_rep_B_toDef[nMatches]);
					// Message to '_v_q_rep' from Replicate factor
					_v_q_rep_B[nMatches] = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(_v_q_rep_B[nMatches], _v_q_rep_rep_B_toDef[nMatches]), string.Format("_v_q_rep_B[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
				}
				_v_q_rep_B_toDef = ReplicatePointOp.ToDef<Gamma>(_v_q_rep_B, _v_q_rep_B_toDef);
				// Message to '_v_q_use' from Replicate factor
				this._v_q_use_B = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(this._v_q_use_B, _v_q_rep_B_toDef), "_v_q_use_B", this.OnMessageUpdated, false);
				this._v_q_use_B_buffer0_ = VariablePointOp_RpropGamma.Buffer0(this._v_q_use_B, this._v_q_F, this._v_q_marginal_F, this._v_q_use_B_buffer0_);
				// Message to '_v_q_marginal' from VariablePoint factor
				this._v_q_marginal_F = Tracing.FireEvent<Gamma>(VariablePointOp_RpropGamma.MarginalAverageConditional(this._v_q_use_B, this._v_q_F, this._v_q_use_B_buffer0_, this._v_q_marginal_F), "_v_q_marginal_F", this.OnMessageUpdated, false);
				// Message to '_v_q_use' from VariablePoint factor
				this._v_q_use_F = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(this._v_q_use_F, this._v_q_marginal_F), "_v_q_use_F", this.OnMessageUpdated, false);
				for(int nMatches = 0; nMatches<1000; nMatches++) {
					// Message to '_v_q_rep' from Replicate factor
					this._v_q_rep_F[nMatches] = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(this._v_q_rep_F[nMatches], this._v_q_use_F), string.Format("_v_q_rep_F[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						// Message to '_v_q_rep_rep' from Replicate factor
						this._v_q_rep_rep_F[nMatches][nTeamsPerMatch] = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(this._v_q_rep_rep_F[nMatches][nTeamsPerMatch], this._v_q_rep_F[nMatches]), string.Format("_v_q_rep_rep_F[{0}]", new object[1] {nTeamsPerMatch}), this.OnMessageUpdated, false);
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Message to '_v_q_rep_rep_rep' from Replicate factor
							this._v_q_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(this._v_q_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this._v_q_rep_rep_F[nMatches][nTeamsPerMatch]), string.Format("_v_q_rep_rep_rep_F[{0}]", new object[1] {nPlayersMinusPerTeam}), this.OnMessageUpdated, false);
						}
					}
				}
				this.vdouble42_use_B_bufferBeta = VariablePointOp_RpropBeta.BufferBeta(this.vdouble42_use_B, this.vdouble42_F, this.vdouble42_marginal_F, this.vdouble42_use_B_bufferBeta);
				// Message to 'vdouble42_marginal' from VariablePoint factor
				this.vdouble42_marginal_F = Tracing.FireEvent<Beta>(VariablePointOp_RpropBeta.MarginalAverageConditional(this.vdouble42_use_B, this.vdouble42_F, this.vdouble42_use_B_bufferBeta, this.vdouble42_marginal_F), "vdouble42_marginal_F", this.OnMessageUpdated, false);
				// Message to 'vdouble42_use' from VariablePoint factor
				this.vdouble42_use_F = Tracing.FireEvent<Beta>(ArrayHelper.SetTo<Beta>(this.vdouble42_use_F, this.vdouble42_marginal_F), "vdouble42_use_F", this.OnMessageUpdated, false);
				// Message to 'vbool4' from Bernoulli factor
				this.vbool4_F = BernoulliFromBetaOp.SampleAverageConditional(this.vdouble42_use_F);
				for(int nMatches = 0; nMatches<1000; nMatches++) {
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Message to 'vdouble91' from Gaussian factor
							this.vdouble91_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOp.SampleAverageConditional(this.vdouble91_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble90_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this._v_q_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this._v_q_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble93' from Difference factor
							this.vdouble93_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.AAverageConditional(0.0, this.vdouble91_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'Under_performing' from IsPositive factor
							this.Under_performing_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = IsPositiveOp.IsPositiveAverageConditional(this.vdouble93_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vbool6' from And factor
							this.vbool6_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = BooleanAndOp.AndAverageConditional(this.vbool4_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Under_performing_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vbool3_rep_rep_rep' from Or factor
							this.vbool3_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = BooleanOrOp.AAverageConditional(this.Quit[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vbool6_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						}
						this.vbool3_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool3_rep_rep_rep_B[nMatches][nTeamsPerMatch], this.vbool3_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch]);
					}
					this.vbool3_rep_rep_B_toDef[nMatches] = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool3_rep_rep_rep_B_toDef[nMatches], this.vbool3_rep_rep_B_toDef[nMatches]);
				}
				this.vbool3_rep_B_toDef = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool3_rep_rep_B_toDef, this.vbool3_rep_B_toDef);
				// Message to 'vdouble41_use' from Bernoulli factor
				this.vdouble41_use_B = Tracing.FireEvent<Beta>(BernoulliFromBetaOp.ProbTrueAverageConditional(this.vbool3_rep_B_toDef, this.vdouble41_use_F), "vdouble41_use_B", this.OnMessageUpdated, false);
				this.vdouble41_use_B_bufferBeta = VariablePointOp_RpropBeta.BufferBeta(this.vdouble41_use_B, this.vdouble41_F, this.vdouble41_marginal_F, this.vdouble41_use_B_bufferBeta);
				// Message to 'vdouble41_marginal' from VariablePoint factor
				this.vdouble41_marginal_F = Tracing.FireEvent<Beta>(VariablePointOp_RpropBeta.MarginalAverageConditional(this.vdouble41_use_B, this.vdouble41_F, this.vdouble41_use_B_bufferBeta, this.vdouble41_marginal_F), "vdouble41_marginal_F", this.OnMessageUpdated, false);
				// Message to 'vdouble41_use' from VariablePoint factor
				this.vdouble41_use_F = Tracing.FireEvent<Beta>(ArrayHelper.SetTo<Beta>(this.vdouble41_use_F, this.vdouble41_marginal_F), "vdouble41_use_F", this.OnMessageUpdated, false);
				// Message to 'vbool3' from Bernoulli factor
				this.vbool3_F = BernoulliFromBetaOp.SampleAverageConditional(this.vdouble41_use_F);
				this.vbool3_rep_F_marginal = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool3_rep_B_toDef, this.vbool3_F, this.vbool3_rep_F_marginal);
				for(int nMatches = 0; nMatches<1000; nMatches++) {
					// Message to 'vbool3_rep' from Replicate factor
					this.vbool3_rep_F[nMatches] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool3_rep_rep_B_toDef[nMatches], this.vbool3_rep_F_marginal, nMatches, this.vbool3_rep_F[nMatches]);
					this.vbool3_rep_rep_F_marginal[nMatches] = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool3_rep_rep_B_toDef[nMatches], this.vbool3_rep_F[nMatches], this.vbool3_rep_rep_F_marginal[nMatches]);
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						// Message to 'vbool3_rep_rep' from Replicate factor
						this.vbool3_rep_rep_F[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool3_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch], this.vbool3_rep_rep_F_marginal[nMatches], nTeamsPerMatch, this.vbool3_rep_rep_F[nMatches][nTeamsPerMatch]);
						this.vbool3_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool3_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch], this.vbool3_rep_rep_F[nMatches][nTeamsPerMatch], this.vbool3_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch]);
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Message to 'vbool3_rep_rep_rep' from Replicate factor
							this.vbool3_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool3_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vbool3_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch], nPlayersMinusPerTeam, this.vbool3_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vbool6' from Or factor
							this.vbool6_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = BooleanOrOp.BAverageConditional(this.Quit[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vbool3_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vbool4_rep_rep_rep' from And factor
							this.vbool4_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = BooleanAndOp.AAverageConditional(this.vbool6_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Under_performing_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						}
						this.vbool4_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool4_rep_rep_rep_B[nMatches][nTeamsPerMatch], this.vbool4_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch]);
					}
					this.vbool4_rep_rep_B_toDef[nMatches] = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool4_rep_rep_rep_B_toDef[nMatches], this.vbool4_rep_rep_B_toDef[nMatches]);
				}
				this.vbool4_rep_B_toDef = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool4_rep_rep_B_toDef, this.vbool4_rep_B_toDef);
				this.vbool4_rep_F_marginal = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool4_rep_B_toDef, this.vbool4_F, this.vbool4_rep_F_marginal);
				for(int nMatches = 0; nMatches<1000; nMatches++) {
					// Message to 'vbool4_rep' from Replicate factor
					this.vbool4_rep_F[nMatches] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool4_rep_rep_B_toDef[nMatches], this.vbool4_rep_F_marginal, nMatches, this.vbool4_rep_F[nMatches]);
					this.vbool4_rep_rep_F_marginal[nMatches] = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool4_rep_rep_B_toDef[nMatches], this.vbool4_rep_F[nMatches], this.vbool4_rep_rep_F_marginal[nMatches]);
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						// Message to 'vbool4_rep_rep' from Replicate factor
						this.vbool4_rep_rep_F[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool4_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch], this.vbool4_rep_rep_F_marginal[nMatches], nTeamsPerMatch, this.vbool4_rep_rep_F[nMatches][nTeamsPerMatch]);
						this.vbool4_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool4_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch], this.vbool4_rep_rep_F[nMatches][nTeamsPerMatch], this.vbool4_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch]);
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Message to 'vbool4_rep_rep_rep' from Replicate factor
							this.vbool4_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool4_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vbool4_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch], nPlayersMinusPerTeam, this.vbool4_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'Under_performing' from And factor
							this.Under_performing_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = BooleanAndOp.BAverageConditional(this.vbool6_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vbool4_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble93' from IsPositive factor
							this.vdouble93_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = IsPositiveOp_Proper.XAverageConditional(this.Under_performing_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble93_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble91_use' from Difference factor
							this.vdouble91_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.BAverageConditional(0.0, this.vdouble93_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble90' from Gaussian factor
							this.vdouble90_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOp.MeanAverageConditional(this.vdouble91_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble90_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this._v_q_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this._v_q_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble89' from Difference factor
							this.vdouble89_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.SumAverageConditional(this.vdouble90_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this._m_q_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'Perfomance_opposing_team_uses' from Difference factor
							this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = DoublePlusOp.BAverageConditional(this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3], this.vdouble89_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to '_m_q_rep_rep_rep' from Difference factor
							_m_q_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Tracing.FireEvent<Gaussian>(DoublePlusOp.BAverageConditional(this.vdouble89_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble90_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]), string.Format("_m_q_rep_rep_rep_B[{0}]", new object[1] {nPlayersMinusPerTeam}), this.OnMessageUpdated, false);
						}
						_m_q_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicatePointOp.ToDef<Gaussian>(_m_q_rep_rep_rep_B[nMatches][nTeamsPerMatch], _m_q_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch]);
						// Message to '_m_q_rep_rep' from Replicate factor
						_m_q_rep_rep_B[nMatches][nTeamsPerMatch] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(_m_q_rep_rep_B[nMatches][nTeamsPerMatch], _m_q_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch]), string.Format("_m_q_rep_rep_B[{0}]", new object[1] {nTeamsPerMatch}), this.OnMessageUpdated, false);
					}
					_m_q_rep_rep_B_toDef[nMatches] = ReplicatePointOp.ToDef<Gaussian>(_m_q_rep_rep_B[nMatches], _m_q_rep_rep_B_toDef[nMatches]);
					// Message to '_m_q_rep' from Replicate factor
					_m_q_rep_B[nMatches] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(_m_q_rep_B[nMatches], _m_q_rep_rep_B_toDef[nMatches]), string.Format("_m_q_rep_B[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
				}
				_m_q_rep_B_toDef = ReplicatePointOp.ToDef<Gaussian>(_m_q_rep_B, _m_q_rep_B_toDef);
				// Message to '_m_q_use' from Replicate factor
				this._m_q_use_B = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this._m_q_use_B, _m_q_rep_B_toDef), "_m_q_use_B", this.OnMessageUpdated, false);
				// Message to 'vdouble42_use' from Bernoulli factor
				this.vdouble42_use_B = Tracing.FireEvent<Beta>(BernoulliFromBetaOp.ProbTrueAverageConditional(this.vbool4_rep_B_toDef, this.vdouble42_use_F), "vdouble42_use_B", this.OnMessageUpdated, false);
				vdouble28_rep_B_toDef = ReplicatePointOp.ToDef<Gaussian>(vdouble28_rep_B, vdouble28_rep_B_toDef);
				// Message to 'vdouble28_use' from Replicate factor
				this.vdouble28_use_B = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this.vdouble28_use_B, vdouble28_rep_B_toDef), "vdouble28_use_B", this.OnMessageUpdated, false);
				_v_c_rep_B_toDef = ReplicatePointOp.ToDef<Gamma>(_v_c_rep_B, _v_c_rep_B_toDef);
				// Message to '_v_c_use' from Replicate factor
				this._v_c_use_B = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(this._v_c_use_B, _v_c_rep_B_toDef), "_v_c_use_B", this.OnMessageUpdated, false);
				_w_k_p_rep_B_toDef = ReplicatePointOp.ToDef<Gaussian>(_w_k_p_rep_B, _w_k_p_rep_B_toDef);
				// Message to '_w_k_p_use' from Replicate factor
				this._w_k_p_use_B = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this._w_k_p_use_B, _w_k_p_rep_B_toDef), "_w_k_p_use_B", this.OnMessageUpdated, false);
				Epsilon_rep3_B_toDef = ReplicatePointOp.ToDef<Gaussian>(Epsilon_rep3_B, Epsilon_rep3_B_toDef);
				// Message to 'Epsilon_uses' from Replicate factor
				Epsilon_uses_B[2] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(Epsilon_uses_B[2], Epsilon_rep3_B_toDef), "Epsilon_uses_B[2]", this.OnMessageUpdated, false);
				Epsilon_rep2_B_toDef = ReplicatePointOp.ToDef<Gaussian>(Epsilon_rep2_B, Epsilon_rep2_B_toDef);
				// Message to 'Epsilon_uses' from Replicate factor
				Epsilon_uses_B[1] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(Epsilon_uses_B[1], Epsilon_rep2_B_toDef), "Epsilon_uses_B[1]", this.OnMessageUpdated, false);
				Epsilon_rep_B_toDef = ReplicatePointOp.ToDef<Gaussian>(Epsilon_rep_B, Epsilon_rep_B_toDef);
				// Message to 'Epsilon_uses' from Replicate factor
				Epsilon_uses_B[0] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(Epsilon_uses_B[0], Epsilon_rep_B_toDef), "Epsilon_uses_B[0]", this.OnMessageUpdated, false);
				Epsilon_uses_B_toDef = ReplicatePointOp.ToDef<Gaussian>(Epsilon_uses_B, Epsilon_uses_B_toDef);
				// Message to 'Epsilon_use' from Replicate factor
				this.Epsilon_use_B = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this.Epsilon_use_B, Epsilon_uses_B_toDef), "Epsilon_use_B", this.OnMessageUpdated, false);
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			this._w_k_o_marginal_F = Gaussian.Uniform();
			Gaussian _w_k_o_use_B = default(Gaussian);
			Gaussian vdouble23_B = Gaussian.Uniform();
			// Message to 'vdouble23' from VariablePoint factor
			vdouble23_B = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(vdouble23_B, this.vdouble23_marginal_F), "vdouble23_B", this.OnMessageUpdated, false);
			// Message to '_w_k_o_use' from Difference factor
			_w_k_o_use_B = DoublePlusOp.BAverageConditional(0.0, vdouble23_B);
			// Message to '_w_k_o_marginal' from Variable factor
			this._w_k_o_marginal_F = VariableOp.MarginalAverageConditional<Gaussian>(_w_k_o_use_B, this._w_k_o_F, this._w_k_o_marginal_F);
			this._w_d_p_marginal_F = Gaussian.Uniform();
			Gaussian _w_d_p_use_B = default(Gaussian);
			Gaussian vdouble28_B = Gaussian.Uniform();
			// Message to 'vdouble28' from VariablePoint factor
			vdouble28_B = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(vdouble28_B, this.vdouble28_marginal_F), "vdouble28_B", this.OnMessageUpdated, false);
			// Message to '_w_d_p_use' from Difference factor
			_w_d_p_use_B = DoublePlusOp.BAverageConditional(0.0, vdouble28_B);
			// Message to '_w_d_p_marginal' from Variable factor
			this._w_d_p_marginal_F = VariableOp.MarginalAverageConditional<Gaussian>(_w_d_p_use_B, this._w_d_p_F, this._w_d_p_marginal_F);
			this.vbool3_marginal_F = Bernoulli.Uniform();
			// Message to 'vbool3_marginal' from Variable factor
			this.vbool3_marginal_F = VariableOp.MarginalAverageConditional<Bernoulli>(this.vbool3_rep_B_toDef, this.vbool3_F, this.vbool3_marginal_F);
			this.vbool4_marginal_F = Bernoulli.Uniform();
			// Message to 'vbool4_marginal' from Variable factor
			this.vbool4_marginal_F = VariableOp.MarginalAverageConditional<Bernoulli>(this.vbool4_rep_B_toDef, this.vbool4_F, this.vbool4_marginal_F);
			// Create array for 'skills_marginal' Forwards messages.
			this.skills_marginal_F = new DistributionStructArray<Gaussian,double>(6688);
			for(int nPlayers = 0; nPlayers<6688; nPlayers++) {
				this.skills_marginal_F[nPlayers] = Gaussian.Uniform();
				// Message to 'skills_marginal' from Variable factor
				this.skills_marginal_F[nPlayers] = VariableOp.MarginalAverageConditional<Gaussian>(this.skills_use_B[nPlayers], this.skills_F[nPlayers], this.skills_marginal_F[nPlayers]);
			}
			this.Changed_deathcount_draw_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerI4_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of deathcount and PlayerInTeam</summary>
		private void Changed_deathcount_PlayerInTeam()
		{
			if (this.Changed_deathcount_PlayerInTeam_isDone) {
				return ;
			}
			// Create array for 'deathcount_marginal' Forwards messages.
			this.deathcount_marginal_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(1000);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'deathcount_marginal' Forwards messages.
				this.deathcount_marginal_F[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for 'deathcount_marginal' Forwards messages.
					this.deathcount_marginal_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						this.deathcount_marginal_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Message to 'deathcount_marginal' from DerivedVariable factor
			this.deathcount_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>,double[][][]>(this.Deathcount, this.deathcount_marginal_F);
			this.Changed_deathcount_PlayerInTeam_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of draw</summary>
		private void Changed_draw()
		{
			if (this.Changed_draw_isDone) {
				return ;
			}
			// Create array for replicates of 'Diff_2__uses_B'
			this.Diff_2__uses_B = new Gaussian[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Draw[nMatches]==2) {
					// Create array for 'Diff_2__uses' Backwards messages.
					this.Diff_2__uses_B[nMatches] = new Gaussian[2];
				}
			}
			// Create array for replicates of 'vbool9'
			bool[] vbool9 = new bool[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Draw[nMatches]==0) {
					vbool9[nMatches] = true;
					Constrain.Equal<bool>(true, vbool9[nMatches]);
				}
			}
			// Create array for replicates of 'vbool11'
			bool[] vbool11 = new bool[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Draw[nMatches]==1) {
					vbool11[nMatches] = true;
					Constrain.Equal<bool>(true, vbool11[nMatches]);
				}
			}
			// Create array for replicates of 'vbool14'
			bool[] vbool14 = new bool[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Draw[nMatches]==2) {
					vbool14[nMatches] = true;
					Constrain.Equal<bool>(true, vbool14[nMatches]);
				}
			}
			// Create array for replicates of 'vbool17'
			bool[] vbool17 = new bool[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Draw[nMatches]==2) {
					vbool17[nMatches] = true;
					Constrain.Equal<bool>(true, vbool17[nMatches]);
				}
			}
			// Create array for 'draw_marginal' Forwards messages.
			this.draw_marginal_F = new PointMass<int[]>(this.Draw);
			// Message to 'draw_marginal' from DerivedVariable factor
			this.draw_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int[]>,int[]>(this.Draw, this.draw_marginal_F);
			this.Changed_draw_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of draw and numberOfIterationsDecreased and must reset on changes to deathcount and killcount and Match_time_m and p_time_m__t__n and PlayerIndex and PlayerInTeam and quit</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_draw_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_Playe6(bool initialise)
		{
			if (this.Changed_draw_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_Playe6_isDone&&((!initialise)||this.Changed_draw_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_Playe6_isInitialised)) {
				return ;
			}
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Draw[nMatches]==2) {
					this.Diff_2__uses_B[nMatches][0] = Gaussian.Uniform();
				}
			}
			this.Changed_draw_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_Playe6_isDone = true;
			this.Changed_draw_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_Playe6_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of killcount and Match_time_m and numberOfIterationsDecreased and p_time_m__t__n and PlayerIndex and PlayerInTeam and must reset on changes to deathcount and draw and quit</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_I13(bool initialise)
		{
			if (this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_I13_isDone&&((!initialise)||this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_I13_isInitialised)) {
				return ;
			}
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Message to 'vdouble78_use' from Max factor
						this.vdouble78_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = MaxGaussianOp.BAverageConditional(this.Killcount[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0.0, this.vdouble78_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'kill_count_m__t__n' from Gaussian factor
						this.kill_count_m__t__n_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOp.MeanAverageConditional(this.vdouble78_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.kill_count_m__t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vc_Times_p_time_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vc_Times_p_time_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]);
						// Message to 'vdouble75' from Product factor
						this.vdouble75_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.AAverageConditional(this.kill_count_m__t__n_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'vdouble74' from Plus factor
						this.vdouble74_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.BAverageConditional(this.vdouble75_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble73_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'Perfomance_opposing_team_uses' from Product factor
						this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = GaussianProductOp.BAverageConditional(this.vdouble74_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble23_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]);
						if (nTeamsPerMatch==0) {
							this.Perfomance_opposing_team_uses_B_toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.ToDef<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_B_toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.Marginal<Gaussian>(this.Perfomance_opposing_team_uses_B_toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						}
						if (nTeamsPerMatch==1) {
							this.Perfomance_opposing_team_uses_B_toDef2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.ToDef<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_B_toDef2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.Marginal<Gaussian>(this.Perfomance_opposing_team_uses_B_toDef2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_1__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'Perfomance_opposing_team_uses' from Replicate factor
							this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2], this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 2, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2]);
						}
						if (nTeamsPerMatch==0) {
							// Message to 'Perfomance_opposing_team_uses' from Replicate factor
							this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2], this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 2, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2]);
						}
						// Message to 'vdouble89' from Difference factor
						this.vdouble89_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.AAverageConditional(this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3], this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2]);
						// Message to 'vdouble90' from Difference factor
						this.vdouble90_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.AAverageConditional(this.vdouble89_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this._m_q_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'vdouble91' from Gaussian factor
						this.vdouble91_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOp.SampleAverageConditional(this.vdouble91_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble90_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this._v_q_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this._v_q_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'vdouble93' from Difference factor
						this.vdouble93_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.AAverageConditional(0.0, this.vdouble91_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'Under_performing' from IsPositive factor
						this.Under_performing_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = IsPositiveOp.IsPositiveAverageConditional(this.vdouble93_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'vbool6' from And factor
						this.vbool6_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = BooleanAndOp.AndAverageConditional(this.vbool4_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Under_performing_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
					}
				}
			}
			this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_I13_isDone = true;
			this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_I13_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of killcount and Match_time_m and numberOfIterationsDecreased and p_time_m__t__n and PlayerIndex and PlayerInTeam and quit and must reset on changes to deathcount and draw</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_q14(bool initialise)
		{
			if (this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_q14_isDone&&((!initialise)||this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_q14_isInitialised)) {
				return ;
			}
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Message to 'vbool3_rep_rep_rep' from Or factor
						this.vbool3_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = BooleanOrOp.AAverageConditional(this.Quit[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vbool6_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
					}
					this.vbool3_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool3_rep_rep_rep_B[nMatches][nTeamsPerMatch], this.vbool3_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch]);
				}
				this.vbool3_rep_rep_B_toDef[nMatches] = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool3_rep_rep_rep_B_toDef[nMatches], this.vbool3_rep_rep_B_toDef[nMatches]);
			}
			this.vbool3_rep_B_toDef = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool3_rep_rep_B_toDef, this.vbool3_rep_B_toDef);
			this.vbool3_rep_F_marginal = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool3_rep_B_toDef, this.vbool3_F, this.vbool3_rep_F_marginal);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Message to 'vbool3_rep' from Replicate factor
				this.vbool3_rep_F[nMatches] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool3_rep_rep_B_toDef[nMatches], this.vbool3_rep_F_marginal, nMatches, this.vbool3_rep_F[nMatches]);
				this.vbool3_rep_rep_F_marginal[nMatches] = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool3_rep_rep_B_toDef[nMatches], this.vbool3_rep_F[nMatches], this.vbool3_rep_rep_F_marginal[nMatches]);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Message to 'vbool3_rep_rep' from Replicate factor
					this.vbool3_rep_rep_F[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool3_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch], this.vbool3_rep_rep_F_marginal[nMatches], nTeamsPerMatch, this.vbool3_rep_rep_F[nMatches][nTeamsPerMatch]);
					this.vbool3_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool3_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch], this.vbool3_rep_rep_F[nMatches][nTeamsPerMatch], this.vbool3_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Message to 'vbool3_rep_rep_rep' from Replicate factor
						this.vbool3_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool3_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vbool3_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch], nPlayersMinusPerTeam, this.vbool3_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'vbool6' from Or factor
						this.vbool6_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = BooleanOrOp.BAverageConditional(this.Quit[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vbool3_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'vbool4_rep_rep_rep' from And factor
						this.vbool4_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = BooleanAndOp.AAverageConditional(this.vbool6_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Under_performing_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
					}
					this.vbool4_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool4_rep_rep_rep_B[nMatches][nTeamsPerMatch], this.vbool4_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch]);
				}
				this.vbool4_rep_rep_B_toDef[nMatches] = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool4_rep_rep_rep_B_toDef[nMatches], this.vbool4_rep_rep_B_toDef[nMatches]);
			}
			this.vbool4_rep_B_toDef = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool4_rep_rep_B_toDef, this.vbool4_rep_B_toDef);
			this.vbool4_rep_F_marginal = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool4_rep_B_toDef, this.vbool4_F, this.vbool4_rep_F_marginal);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Message to 'vbool4_rep' from Replicate factor
				this.vbool4_rep_F[nMatches] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool4_rep_rep_B_toDef[nMatches], this.vbool4_rep_F_marginal, nMatches, this.vbool4_rep_F[nMatches]);
				this.vbool4_rep_rep_F_marginal[nMatches] = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool4_rep_rep_B_toDef[nMatches], this.vbool4_rep_F[nMatches], this.vbool4_rep_rep_F_marginal[nMatches]);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Message to 'vbool4_rep_rep' from Replicate factor
					this.vbool4_rep_rep_F[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool4_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch], this.vbool4_rep_rep_F_marginal[nMatches], nTeamsPerMatch, this.vbool4_rep_rep_F[nMatches][nTeamsPerMatch]);
					this.vbool4_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool4_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch], this.vbool4_rep_rep_F[nMatches][nTeamsPerMatch], this.vbool4_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Message to 'vbool4_rep_rep_rep' from Replicate factor
						this.vbool4_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool4_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vbool4_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch], nPlayersMinusPerTeam, this.vbool4_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'Under_performing' from And factor
						this.Under_performing_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = BooleanAndOp.BAverageConditional(this.vbool6_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vbool4_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'vdouble93' from IsPositive factor
						this.vdouble93_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = IsPositiveOp_Proper.XAverageConditional(this.Under_performing_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble93_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'vdouble91_use' from Difference factor
						this.vdouble91_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.BAverageConditional(0.0, this.vdouble93_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'vdouble90' from Gaussian factor
						this.vdouble90_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOp.MeanAverageConditional(this.vdouble91_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble90_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this._v_q_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this._v_q_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'vdouble89' from Difference factor
						this.vdouble89_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.SumAverageConditional(this.vdouble90_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this._m_q_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'Perfomance_opposing_team_uses' from Difference factor
						this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = DoublePlusOp.BAverageConditional(this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3], this.vdouble89_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						if (nTeamsPerMatch==1) {
							this.Perfomance_opposing_team_uses_B_toDef2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.ToDef<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_B_toDef2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.Marginal<Gaussian>(this.Perfomance_opposing_team_uses_B_toDef2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_1__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'Perfomance_opposing_team_uses' from Replicate factor
							this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1], this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 1, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
						}
						if (nTeamsPerMatch==0) {
							this.Perfomance_opposing_team_uses_B_toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.ToDef<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_B_toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.Marginal<Gaussian>(this.Perfomance_opposing_team_uses_B_toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'Perfomance_opposing_team_uses' from Replicate factor
							this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1], this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 1, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
						}
						// Message to 'vdouble82' from Product factor
						this.vdouble82_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOp.ProductAverageConditional(this.vdouble82_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this._w_d_o_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
						// Message to 'vdouble83' from Plus factor
						this.vdouble83_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.SumAverageConditional(this.vdouble81_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble82_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'death_count_m__t__n' from Product factor
						this.death_count_m__t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(this.vdouble83_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
					}
				}
			}
			this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_q14_isDone = true;
			this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_q14_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of killcount and PlayerInTeam</summary>
		private void Changed_killcount_PlayerInTeam()
		{
			if (this.Changed_killcount_PlayerInTeam_isDone) {
				return ;
			}
			// Create array for 'killcount_marginal' Forwards messages.
			this.killcount_marginal_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(1000);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'killcount_marginal' Forwards messages.
				this.killcount_marginal_F[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for 'killcount_marginal' Forwards messages.
					this.killcount_marginal_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						this.killcount_marginal_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Message to 'killcount_marginal' from DerivedVariable factor
			this.killcount_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>,double[][][]>(this.Killcount, this.killcount_marginal_F);
			this.Changed_killcount_PlayerInTeam_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of Match_time_m</summary>
		private void Changed_Match_time_m()
		{
			if (this.Changed_Match_time_m_isDone) {
				return ;
			}
			// Create array for 'Match_time_m_marginal' Forwards messages.
			this.Match_time_m_marginal_F = new DistributionStructArray<Gaussian,double>(1000);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				this.Match_time_m_marginal_F[nMatches] = Gaussian.Uniform();
			}
			// Message to 'Match_time_m_marginal' from DerivedVariable factor
			this.Match_time_m_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Gaussian,double>,double[]>(this.match_time_m, this.Match_time_m_marginal_F);
			this.Changed_Match_time_m_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of Match_time_m and numberOfIterationsDecreased and p_time_m__t__n and PlayerIndex and PlayerInTeam and must reset on changes to deathcount and draw and killcount and quit</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathc11(bool initialise)
		{
			if (this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathc11_isDone&&((!initialise)||this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathc11_isInitialised)) {
				return ;
			}
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Message to 'player_perf_t__n' from Ratio factor
						this.player_perf_t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.RatioAverageConditional(this.perf_n_m_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.match_time_m[nMatches]);
						this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.Marginal<Gaussian>(this.player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'player_perf_t__n_uses' from Replicate factor
						this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0], this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0, this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]);
					}
				}
				for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][0]; nPlayersMinusPerTeam++) {
					// Message to 'player_perf_t__n_depth1' from Copy factor
					this.player_perf_t__n_depth1_F[nMatches][0][nPlayersMinusPerTeam] = ArrayHelper.SetTo<Gaussian>(this.player_perf_t__n_depth1_F[nMatches][0][nPlayersMinusPerTeam], this.player_perf_t__n_uses_F[nMatches][0][nPlayersMinusPerTeam][0]);
				}
				// Message to 'player_perf_t__n_item0_uses' from Replicate factor
				this.player_perf_t__n_item0_uses_F[nMatches][0] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item0_uses_B[nMatches], this.player_perf_t__n_depth1_F[nMatches][0], 0, this.player_perf_t__n_item0_uses_F[nMatches][0]);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					if (nTeamsPerMatch==0) {
						this.player_perf_t__n_item0_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.Marginal<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item0_rep_B_toDef[nMatches][nTeamsPerMatch], this.player_perf_t__n_item0_uses_F[nMatches][0], this.player_perf_t__n_item0_rep_F_marginal[nMatches][nTeamsPerMatch]);
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Message to 'player_perf_t__n_item0_rep' from Replicate factor
							this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_0_0__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_item0_rep_F_marginal[nMatches][nTeamsPerMatch], nPlayersMinusPerTeam, this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble65' from Sum factor
							this.vdouble65_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = FastSumOp.SumAverageConditional(this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble66' from Ratio factor
							this.vdouble66_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.RatioAverageConditional(this.vdouble65_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Avg_play_time_team_reduced[nMatches][nTeamsPerMatch]);
							// Message to 'Perfomance_opposing_team_0_' from Product factor
							this.Perfomance_opposing_team_0__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(this.vdouble64_reduced[nMatches][nTeamsPerMatch], this.vdouble66_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'Perfomance_opposing_team' from Copy factor
							this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ArrayHelper.SetTo<Gaussian>(this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_0__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						}
					}
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Message to 'player_perf_t__n_uses' from Replicate factor
						this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1], this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 1, this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
						// Message to 'vdouble73' from Product factor
						this.vdouble73_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOp.ProductAverageConditional(this.vdouble73_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this._w_k_p_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
						if (nTeamsPerMatch==0) {
							this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.Marginal<Gaussian>(this.Perfomance_opposing_team_uses_B_toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'Perfomance_opposing_team_uses' from Replicate factor
							this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0], this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]);
						}
						// Message to 'vdouble74' from Product factor
						this.vdouble74_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOp.ProductAverageConditional(this.vdouble74_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble23_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]);
						// Message to 'vdouble75' from Plus factor
						this.vdouble75_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.SumAverageConditional(this.vdouble73_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble74_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'kill_count_m__t__n' from Product factor
						this.kill_count_m__t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(this.vdouble75_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'vdouble78' from Gaussian factor
						this.vdouble78_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOp.SampleAverageConditional(this.vdouble78_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.kill_count_m__t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vc_Times_p_time_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vc_Times_p_time_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]);
						// Message to 'player_perf_t__n_uses' from Replicate factor
						this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3], this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 3, this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3]);
						// Message to 'player_perf_t__n_uses' from Replicate factor
						this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2], this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 2, this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2]);
						// Message to 'vdouble81' from Product factor
						this.vdouble81_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOp.ProductAverageConditional(this.vdouble81_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble28_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2]);
					}
				}
			}
			this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathc11_isDone = true;
			this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathc11_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of Match_time_m and p_time_m__t__n and PlayerInTeam</summary>
		private void Changed_Match_time_m_p_time_m__t__n_PlayerInTeam()
		{
			if (this.Changed_Match_time_m_p_time_m__t__n_PlayerInTeam_isDone) {
				return ;
			}
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					if (this.playerInTeam[nMatches][nTeamsPerMatch]>0) {
						this.Avg_play_time_team_reduced[nMatches][nTeamsPerMatch] = Factor.Ratio(this.vdouble57_reduced[nMatches][nTeamsPerMatch], this.match_time_m[nMatches]);
						if (nTeamsPerMatch==0) {
							this.vdouble64_reduced[nMatches][nTeamsPerMatch] = Factor.Ratio(this.vdouble63_reduced[nMatches][nTeamsPerMatch], this.match_time_m[nMatches]);
						}
					}
				}
			}
			this.Changed_Match_time_m_p_time_m__t__n_PlayerInTeam_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterations and PlayerIndex and PlayerInTeam and vdouble__20 and vdouble__6 and vint____2</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_numberOfIterations_PlayerIndex_PlayerInTeam_vdouble__20_vdouble__6_vint____2(int numberOfIterations)
		{
			if (this.Changed_numberOfIterations_PlayerIndex_PlayerInTeam_vdouble__20_vdouble__6_vint____2_isDone) {
				return ;
			}
			Gamma _gamma_F = default(Gamma);
			Gamma _gamma_use_F = Gamma.Uniform();
			// Message to '_gamma' from Sample factor
			_gamma_F = Tracing.FireEvent<Gamma>(GammaFromShapeAndScaleOp.SampleAverageConditional(1.0, 1.0), "_gamma_F", this.OnMessageUpdated, false);
			Gamma[] _gamma_uses_F;
			Gamma[] _gamma_uses_B;
			// Create array for '_gamma_uses' Forwards messages.
			_gamma_uses_F = new Gamma[2];
			// Create array for '_gamma_uses' Backwards messages.
			_gamma_uses_B = new Gamma[2];
			_gamma_uses_B[1] = Gamma.Uniform();
			_gamma_uses_B[0] = Gamma.Uniform();
			_gamma_uses_F[1] = Gamma.Uniform();
			_gamma_uses_F[0] = Gamma.Uniform();
			Gamma _gamma_rep_B_toDef;
			_gamma_rep_B_toDef = ReplicatePointOp.ToDefInit<Gamma>(_gamma_uses_F[0]);
			Gamma[] _gamma_rep_F;
			// Create array for '_gamma_rep' Forwards messages.
			_gamma_rep_F = new Gamma[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				_gamma_rep_F[nMatches] = Gamma.Uniform();
			}
			// Create array for replicates of '_gamma_rep_rep_B_toDef'
			Gamma[] _gamma_rep_rep_B_toDef = new Gamma[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				_gamma_rep_rep_B_toDef[nMatches] = ReplicatePointOp.ToDefInit<Gamma>(_gamma_rep_F[nMatches]);
			}
			// Create array for replicates of '_gamma_rep_rep_F'
			Gamma[][] _gamma_rep_rep_F = new Gamma[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for '_gamma_rep_rep' Forwards messages.
				_gamma_rep_rep_F[nMatches] = new Gamma[2];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					_gamma_rep_rep_F[nMatches][nTeamsPerMatch] = Gamma.Uniform();
				}
			}
			// Create array for replicates of '_gamma_rep_rep_rep_B_toDef'
			Gamma[][] _gamma_rep_rep_rep_B_toDef = new Gamma[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of '_gamma_rep_rep_rep_B_toDef'
				_gamma_rep_rep_rep_B_toDef[nMatches] = new Gamma[2];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					_gamma_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicatePointOp.ToDefInit<Gamma>(_gamma_rep_rep_F[nMatches][nTeamsPerMatch]);
				}
			}
			// Create array for replicates of '_gamma_rep_rep_rep_F'
			Gamma[][][] _gamma_rep_rep_rep_F = new Gamma[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of '_gamma_rep_rep_rep_F'
				_gamma_rep_rep_rep_F[nMatches] = new Gamma[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for '_gamma_rep_rep_rep' Forwards messages.
					_gamma_rep_rep_rep_F[nMatches][nTeamsPerMatch] = new Gamma[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						_gamma_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gamma.Uniform();
					}
				}
			}
			Gamma _gamma_rep2_B_toDef;
			_gamma_rep2_B_toDef = ReplicatePointOp.ToDefInit<Gamma>(_gamma_uses_F[1]);
			Gamma[] _gamma_rep2_F;
			// Create array for '_gamma_rep2' Forwards messages.
			_gamma_rep2_F = new Gamma[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				_gamma_rep2_F[nMatches] = Gamma.Uniform();
			}
			// Create array for replicates of '_gamma_rep2_rep_B_toDef'
			Gamma[] _gamma_rep2_rep_B_toDef = new Gamma[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				_gamma_rep2_rep_B_toDef[nMatches] = ReplicatePointOp.ToDefInit<Gamma>(_gamma_rep2_F[nMatches]);
			}
			// Create array for replicates of '_gamma_rep2_rep_F'
			Gamma[][] _gamma_rep2_rep_F = new Gamma[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for '_gamma_rep2_rep' Forwards messages.
				_gamma_rep2_rep_F[nMatches] = new Gamma[2];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					_gamma_rep2_rep_F[nMatches][nTeamsPerMatch] = Gamma.Uniform();
				}
			}
			// Create array for replicates of '_gamma_rep2_rep_rep_B_toDef'
			Gamma[][] _gamma_rep2_rep_rep_B_toDef = new Gamma[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of '_gamma_rep2_rep_rep_B_toDef'
				_gamma_rep2_rep_rep_B_toDef[nMatches] = new Gamma[2];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					_gamma_rep2_rep_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicatePointOp.ToDefInit<Gamma>(_gamma_rep2_rep_F[nMatches][nTeamsPerMatch]);
				}
			}
			// Create array for replicates of '_gamma_rep2_rep_rep_F'
			Gamma[][][] _gamma_rep2_rep_rep_F = new Gamma[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of '_gamma_rep2_rep_rep_F'
				_gamma_rep2_rep_rep_F[nMatches] = new Gamma[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for '_gamma_rep2_rep_rep' Forwards messages.
					_gamma_rep2_rep_rep_F[nMatches][nTeamsPerMatch] = new Gamma[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						_gamma_rep2_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gamma.Uniform();
					}
				}
			}
			// Create array for replicates of 'vint33'
			int[][][] vint33 = new int[1000][][];
			// Create array for replicates of 'vdouble117'
			double[][][] vdouble117 = new double[1000][][];
			// Create array for replicates of 'vdouble118_B'
			Gamma[][][] vdouble118_B = new Gamma[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vint33'
				vint33[nMatches] = new int[2][];
				// Create array for replicates of 'vdouble118_B'
				vdouble118_B[nMatches] = new Gamma[2][];
				// Create array for replicates of 'vdouble117'
				vdouble117[nMatches] = new double[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vint33'
					vint33[nMatches][nTeamsPerMatch] = new int[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble117'
					vdouble117[nMatches][nTeamsPerMatch] = new double[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble118_B'
					vdouble118_B[nMatches][nTeamsPerMatch] = new Gamma[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vint33[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Math.Min(199, this.Vint____2[this.playerIndex[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]][nMatches]);
						vdouble117[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Factor.Plus(this.Vdouble__20[this.playerIndex[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]], this.Vdouble__6[vint33[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]]);
						vdouble118_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gamma.Uniform();
						// Message to 'vdouble118' from Gaussian factor
						vdouble118_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.PrecisionAverageConditional(this.Vdouble__20[this.playerIndex[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]], vdouble117[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
					}
				}
			}
			// Create array for replicates of 'vdouble118_B_Q'
			Gamma[][][] vdouble118_B_Q = new Gamma[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble118_B_Q'
				vdouble118_B_Q[nMatches] = new Gamma[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble118_B_Q'
					vdouble118_B_Q[nMatches][nTeamsPerMatch] = new Gamma[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble118_B_Q[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = default(Gamma);
					}
				}
			}
			// Create array for replicates of '_gamma_rep_rep_rep_B'
			Gamma[][][] _gamma_rep_rep_rep_B = new Gamma[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of '_gamma_rep_rep_rep_B'
				_gamma_rep_rep_rep_B[nMatches] = new Gamma[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for '_gamma_rep_rep_rep' Backwards messages.
					_gamma_rep_rep_rep_B[nMatches][nTeamsPerMatch] = new Gamma[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						_gamma_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gamma.Uniform();
					}
				}
			}
			// Create array for replicates of '_gamma_rep_rep_B'
			Gamma[][] _gamma_rep_rep_B = new Gamma[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for '_gamma_rep_rep' Backwards messages.
				_gamma_rep_rep_B[nMatches] = new Gamma[2];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					_gamma_rep_rep_B[nMatches][nTeamsPerMatch] = Gamma.Uniform();
				}
			}
			Gamma[] _gamma_rep_B;
			// Create array for '_gamma_rep' Backwards messages.
			_gamma_rep_B = new Gamma[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				_gamma_rep_B[nMatches] = Gamma.Uniform();
			}
			// Create array for replicates of '_gamma_rep2_rep_rep_B'
			Gamma[][][] _gamma_rep2_rep_rep_B = new Gamma[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of '_gamma_rep2_rep_rep_B'
				_gamma_rep2_rep_rep_B[nMatches] = new Gamma[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for '_gamma_rep2_rep_rep' Backwards messages.
					_gamma_rep2_rep_rep_B[nMatches][nTeamsPerMatch] = new Gamma[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						_gamma_rep2_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gamma.Uniform();
					}
				}
			}
			// Create array for replicates of '_gamma_rep2_rep_B'
			Gamma[][] _gamma_rep2_rep_B = new Gamma[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for '_gamma_rep2_rep' Backwards messages.
				_gamma_rep2_rep_B[nMatches] = new Gamma[2];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					_gamma_rep2_rep_B[nMatches][nTeamsPerMatch] = Gamma.Uniform();
				}
			}
			Gamma[] _gamma_rep2_B;
			// Create array for '_gamma_rep2' Backwards messages.
			_gamma_rep2_B = new Gamma[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				_gamma_rep2_B[nMatches] = Gamma.Uniform();
			}
			Gamma _gamma_uses_B_toDef;
			_gamma_uses_B_toDef = ReplicatePointOp.ToDefInit<Gamma>(_gamma_use_F);
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				this._gamma_use_B_buffer0_ = VariablePointOp_RpropGamma.Buffer0(this._gamma_use_B, _gamma_F, this._gamma_marginal_F, this._gamma_use_B_buffer0_);
				// Message to '_gamma_marginal' from VariablePoint factor
				this._gamma_marginal_F = Tracing.FireEvent<Gamma>(VariablePointOp_RpropGamma.MarginalAverageConditional(this._gamma_use_B, _gamma_F, this._gamma_use_B_buffer0_, this._gamma_marginal_F), "_gamma_marginal_F", this.OnMessageUpdated, false);
				// Message to '_gamma_use' from VariablePoint factor
				_gamma_use_F = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(_gamma_use_F, this._gamma_marginal_F), "_gamma_use_F", this.OnMessageUpdated, false);
				// Message to '_gamma_uses' from Replicate factor
				_gamma_uses_F[1] = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(_gamma_uses_F[1], _gamma_use_F), "_gamma_uses_F[1]", this.OnMessageUpdated, false);
				// Message to '_gamma_uses' from Replicate factor
				_gamma_uses_F[0] = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(_gamma_uses_F[0], _gamma_use_F), "_gamma_uses_F[0]", this.OnMessageUpdated, false);
				for(int nMatches = 0; nMatches<1000; nMatches++) {
					// Message to '_gamma_rep2' from Replicate factor
					_gamma_rep2_F[nMatches] = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(_gamma_rep2_F[nMatches], _gamma_uses_F[1]), string.Format("_gamma_rep2_F[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
					// Message to '_gamma_rep' from Replicate factor
					_gamma_rep_F[nMatches] = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(_gamma_rep_F[nMatches], _gamma_uses_F[0]), string.Format("_gamma_rep_F[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						// Message to '_gamma_rep2_rep' from Replicate factor
						_gamma_rep2_rep_F[nMatches][nTeamsPerMatch] = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(_gamma_rep2_rep_F[nMatches][nTeamsPerMatch], _gamma_rep2_F[nMatches]), string.Format("_gamma_rep2_rep_F[{0}]", new object[1] {nTeamsPerMatch}), this.OnMessageUpdated, false);
						// Message to '_gamma_rep_rep' from Replicate factor
						_gamma_rep_rep_F[nMatches][nTeamsPerMatch] = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(_gamma_rep_rep_F[nMatches][nTeamsPerMatch], _gamma_rep_F[nMatches]), string.Format("_gamma_rep_rep_F[{0}]", new object[1] {nTeamsPerMatch}), this.OnMessageUpdated, false);
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Message to '_gamma_rep2_rep_rep' from Replicate factor
							_gamma_rep2_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(_gamma_rep2_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], _gamma_rep2_rep_F[nMatches][nTeamsPerMatch]), string.Format("_gamma_rep2_rep_rep_F[{0}]", new object[1] {nPlayersMinusPerTeam}), this.OnMessageUpdated, false);
							// Message to '_gamma_rep_rep_rep' from Replicate factor
							_gamma_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(_gamma_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], _gamma_rep_rep_F[nMatches][nTeamsPerMatch]), string.Format("_gamma_rep_rep_rep_F[{0}]", new object[1] {nPlayersMinusPerTeam}), this.OnMessageUpdated, false);
							vdouble118_B_Q[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GammaProductOp_Laplace.Q(vdouble118_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], _gamma_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], _gamma_rep2_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to '_gamma_rep2_rep_rep' from Product factor
							_gamma_rep2_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Tracing.FireEvent<Gamma>(GammaProductOp_Laplace.BAverageConditional(vdouble118_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], _gamma_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], _gamma_rep2_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], vdouble118_B_Q[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]), string.Format("_gamma_rep2_rep_rep_B[{0}]", new object[1] {nPlayersMinusPerTeam}), this.OnMessageUpdated, false);
							// Message to '_gamma_rep_rep_rep' from Product factor
							_gamma_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Tracing.FireEvent<Gamma>(GammaProductOp_Laplace.AAverageConditional(vdouble118_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], _gamma_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], _gamma_rep2_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], vdouble118_B_Q[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]), string.Format("_gamma_rep_rep_rep_B[{0}]", new object[1] {nPlayersMinusPerTeam}), this.OnMessageUpdated, false);
						}
						_gamma_rep2_rep_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicatePointOp.ToDef<Gamma>(_gamma_rep2_rep_rep_B[nMatches][nTeamsPerMatch], _gamma_rep2_rep_rep_B_toDef[nMatches][nTeamsPerMatch]);
						// Message to '_gamma_rep2_rep' from Replicate factor
						_gamma_rep2_rep_B[nMatches][nTeamsPerMatch] = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(_gamma_rep2_rep_B[nMatches][nTeamsPerMatch], _gamma_rep2_rep_rep_B_toDef[nMatches][nTeamsPerMatch]), string.Format("_gamma_rep2_rep_B[{0}]", new object[1] {nTeamsPerMatch}), this.OnMessageUpdated, false);
						_gamma_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicatePointOp.ToDef<Gamma>(_gamma_rep_rep_rep_B[nMatches][nTeamsPerMatch], _gamma_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch]);
						// Message to '_gamma_rep_rep' from Replicate factor
						_gamma_rep_rep_B[nMatches][nTeamsPerMatch] = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(_gamma_rep_rep_B[nMatches][nTeamsPerMatch], _gamma_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch]), string.Format("_gamma_rep_rep_B[{0}]", new object[1] {nTeamsPerMatch}), this.OnMessageUpdated, false);
					}
					_gamma_rep2_rep_B_toDef[nMatches] = ReplicatePointOp.ToDef<Gamma>(_gamma_rep2_rep_B[nMatches], _gamma_rep2_rep_B_toDef[nMatches]);
					// Message to '_gamma_rep2' from Replicate factor
					_gamma_rep2_B[nMatches] = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(_gamma_rep2_B[nMatches], _gamma_rep2_rep_B_toDef[nMatches]), string.Format("_gamma_rep2_B[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
					_gamma_rep_rep_B_toDef[nMatches] = ReplicatePointOp.ToDef<Gamma>(_gamma_rep_rep_B[nMatches], _gamma_rep_rep_B_toDef[nMatches]);
					// Message to '_gamma_rep' from Replicate factor
					_gamma_rep_B[nMatches] = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(_gamma_rep_B[nMatches], _gamma_rep_rep_B_toDef[nMatches]), string.Format("_gamma_rep_B[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
				}
				_gamma_rep2_B_toDef = ReplicatePointOp.ToDef<Gamma>(_gamma_rep2_B, _gamma_rep2_B_toDef);
				// Message to '_gamma_uses' from Replicate factor
				_gamma_uses_B[1] = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(_gamma_uses_B[1], _gamma_rep2_B_toDef), "_gamma_uses_B[1]", this.OnMessageUpdated, false);
				_gamma_rep_B_toDef = ReplicatePointOp.ToDef<Gamma>(_gamma_rep_B, _gamma_rep_B_toDef);
				// Message to '_gamma_uses' from Replicate factor
				_gamma_uses_B[0] = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(_gamma_uses_B[0], _gamma_rep_B_toDef), "_gamma_uses_B[0]", this.OnMessageUpdated, false);
				_gamma_uses_B_toDef = ReplicatePointOp.ToDef<Gamma>(_gamma_uses_B, _gamma_uses_B_toDef);
				// Message to '_gamma_use' from Replicate factor
				this._gamma_use_B = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(this._gamma_use_B, _gamma_uses_B_toDef), "_gamma_use_B", this.OnMessageUpdated, false);
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			this.Changed_numberOfIterations_PlayerIndex_PlayerInTeam_vdouble__20_vdouble__6_vint____2_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and must reset on changes to deathcount and draw and killcount and Match_time_m and p_time_m__t__n and PlayerIndex and PlayerInTeam and quit</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_Init_deathcount_draw_killcount_Match_time_m_p_time_m__t__n_Playe1(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_Init_deathcount_draw_killcount_Match_time_m_p_time_m__t__n_Playe1_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_Init_deathcount_draw_killcount_Match_time_m_p_time_m__t__n_Playe1_isInitialised)) {
				return ;
			}
			for(int nPlayers = 0; nPlayers<6688; nPlayers++) {
				this.skills_F[nPlayers] = Gaussian.Uniform();
			}
			this.m0_marginal_F = Gaussian.Uniform();
			this.m0_use_F = Gaussian.Uniform();
			this.m0_use_B = Gaussian.Uniform();
			for(int nPlayers = 0; nPlayers<6688; nPlayers++) {
				this.m0_rep_F[nPlayers] = Gaussian.Uniform();
			}
			this.skills_use_F_marginal = GetDeepJaggedItemsOp<double>.MarginalInit<DistributionStructArray<Gaussian,double>>(this.skills_F);
			this.Epsilon_use_B = Gaussian.Uniform();
			this.Epsilon_use_B_buffer = VariablePointOp_Rprop.BufferInit();
			this.Epsilon_marginal_F = Gaussian.Uniform();
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					this.vdouble23_rep_rep_F[nMatches][nTeamsPerMatch] = Gaussian.Uniform();
				}
				this.vdouble23_rep_F[nMatches] = Gaussian.Uniform();
			}
			this.vdouble23_use_F = Gaussian.Uniform();
			this.vdouble23_use_B = Gaussian.Uniform();
			this.vdouble23_use_B_buffer = VariablePointOp_Rprop.BufferInit();
			this.vdouble23_marginal_F = Gaussian.Uniform();
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					this._w_k_p_rep_rep_F[nMatches][nTeamsPerMatch] = Gaussian.Uniform();
				}
				this._w_k_p_rep_F[nMatches] = Gaussian.Uniform();
			}
			this._w_k_p_use_F = Gaussian.Uniform();
			this._w_k_p_use_B = Gaussian.Uniform();
			this._w_k_p_use_B_buffer = VariablePointOp_Rprop.BufferInit();
			this._w_k_p_marginal_F = Gaussian.Uniform();
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					this._v_c_rep_rep_F[nMatches][nTeamsPerMatch] = Gamma.Uniform();
				}
				this._v_c_rep_F[nMatches] = Gamma.Uniform();
			}
			this._v_c_use_F = Gamma.Uniform();
			this._v_c_use_B = Gamma.Uniform();
			this._v_c_use_B_buffer0_ = VariablePointOp_RpropGamma.Buffer0Init();
			this._v_c_marginal_F = Gamma.Uniform();
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					this.vdouble28_rep_rep_F[nMatches][nTeamsPerMatch] = Gaussian.Uniform();
				}
				this.vdouble28_rep_F[nMatches] = Gaussian.Uniform();
			}
			this.vdouble28_use_F = Gaussian.Uniform();
			this.vdouble28_use_B = Gaussian.Uniform();
			this.vdouble28_use_B_buffer = VariablePointOp_Rprop.BufferInit();
			this.vdouble28_marginal_F = Gaussian.Uniform();
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					this._w_d_o_rep_rep_F[nMatches][nTeamsPerMatch] = Gaussian.Uniform();
				}
				this._w_d_o_rep_F[nMatches] = Gaussian.Uniform();
			}
			this._w_d_o_use_F = Gaussian.Uniform();
			this._w_d_o_use_B = Gaussian.Uniform();
			this._w_d_o_use_B_buffer = VariablePointOp_Rprop.BufferInit();
			this._w_d_o_marginal_F = Gaussian.Uniform();
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					this.vbool3_rep_rep_F[nMatches][nTeamsPerMatch] = Bernoulli.Uniform();
					this.vbool3_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.vbool3_rep_rep_F[nMatches][nTeamsPerMatch]);
				}
				this.vbool3_rep_F[nMatches] = Bernoulli.Uniform();
				this.vbool3_rep_rep_B_toDef[nMatches] = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.vbool3_rep_F[nMatches]);
			}
			this.vbool3_F = Bernoulli.Uniform();
			this.vbool3_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.vbool3_F);
			this.vdouble41_use_B = Beta.Uniform();
			this.vdouble41_use_B_bufferBeta = VariablePointOp_RpropBeta.BufferBetaInit();
			this.vdouble41_marginal_F = Beta.Uniform();
			this.vdouble41_use_F = Beta.Uniform();
			this.vbool3_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.vbool3_F);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				this.vbool3_rep_rep_F_marginal[nMatches] = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.vbool3_rep_F[nMatches]);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					this.vbool3_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.vbool3_rep_rep_F[nMatches][nTeamsPerMatch]);
					this.vbool4_rep_rep_F[nMatches][nTeamsPerMatch] = Bernoulli.Uniform();
					this.vbool4_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.vbool4_rep_rep_F[nMatches][nTeamsPerMatch]);
				}
				this.vbool4_rep_F[nMatches] = Bernoulli.Uniform();
				this.vbool4_rep_rep_B_toDef[nMatches] = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.vbool4_rep_F[nMatches]);
			}
			this.vbool4_F = Bernoulli.Uniform();
			this.vbool4_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.vbool4_F);
			this.vdouble42_use_B = Beta.Uniform();
			this.vdouble42_use_B_bufferBeta = VariablePointOp_RpropBeta.BufferBetaInit();
			this.vdouble42_marginal_F = Beta.Uniform();
			this.vdouble42_use_F = Beta.Uniform();
			this.vbool4_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.vbool4_F);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				this.vbool4_rep_rep_F_marginal[nMatches] = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.vbool4_rep_F[nMatches]);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					this.vbool4_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.vbool4_rep_rep_F[nMatches][nTeamsPerMatch]);
					this._v_q_rep_rep_F[nMatches][nTeamsPerMatch] = Gamma.Uniform();
				}
				this._v_q_rep_F[nMatches] = Gamma.Uniform();
			}
			this._v_q_use_F = Gamma.Uniform();
			this._v_q_use_B = Gamma.Uniform();
			this._v_q_use_B_buffer0_ = VariablePointOp_RpropGamma.Buffer0Init();
			this._v_q_marginal_F = Gamma.Uniform();
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					this._m_q_rep_rep_F[nMatches][nTeamsPerMatch] = Gaussian.Uniform();
				}
				this._m_q_rep_F[nMatches] = Gaussian.Uniform();
			}
			this._m_q_use_F = Gaussian.Uniform();
			this._m_q_use_B = Gaussian.Uniform();
			this._m_q_use_B_buffer = VariablePointOp_Rprop.BufferInit();
			this._m_q_marginal_F = Gaussian.Uniform();
			for(int nPlayers = 0; nPlayers<6688; nPlayers++) {
				this.skills_use_B[nPlayers] = Gaussian.Uniform();
				this.p0_rep_B[nPlayers] = Gamma.Uniform();
			}
			this.p0_use_F = Gamma.Uniform();
			this.p0_use_B = Gamma.Uniform();
			this.p0_use_B_buffer0_ = VariablePointOp_RpropGamma.Buffer0Init();
			this.p0_marginal_F = Gamma.Uniform();
			for(int nPlayers = 0; nPlayers<6688; nPlayers++) {
				this.p0_rep_F[nPlayers] = Gamma.Uniform();
			}
			this.m0_use_B_buffer = VariablePointOp_Rprop.BufferInit();
			this.m0_use_B_buffer = VariablePointOp_Rprop.Buffer(this.m0_use_B, this.m0_F, this.m0_marginal_F, this.m0_use_B_buffer);
			// Message to 'm0_marginal' from VariablePoint factor
			this.m0_marginal_F = Tracing.FireEvent<Gaussian>(VariablePointOp_Rprop.MarginalAverageConditional(this.m0_use_B, this.m0_F, this.m0_use_B_buffer, this.m0_marginal_F), "m0_marginal_F", this.OnMessageUpdated, false);
			// Message to 'm0_use' from VariablePoint factor
			this.m0_use_F = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this.m0_use_F, this.m0_marginal_F), "m0_use_F", this.OnMessageUpdated, false);
			this.p0_use_B_buffer0_ = VariablePointOp_RpropGamma.Buffer0(this.p0_use_B, this.p0_F, this.p0_marginal_F, this.p0_use_B_buffer0_);
			// Message to 'p0_marginal' from VariablePoint factor
			this.p0_marginal_F = Tracing.FireEvent<Gamma>(VariablePointOp_RpropGamma.MarginalAverageConditional(this.p0_use_B, this.p0_F, this.p0_use_B_buffer0_, this.p0_marginal_F), "p0_marginal_F", this.OnMessageUpdated, false);
			// Message to 'p0_use' from VariablePoint factor
			this.p0_use_F = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(this.p0_use_F, this.p0_marginal_F), "p0_use_F", this.OnMessageUpdated, false);
			for(int nPlayers = 0; nPlayers<6688; nPlayers++) {
				// Message to 'p0_rep' from Replicate factor
				this.p0_rep_F[nPlayers] = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(this.p0_rep_F[nPlayers], this.p0_use_F), string.Format("p0_rep_F[{0}]", new object[1] {nPlayers}), this.OnMessageUpdated, false);
				// Message to 'm0_rep' from Replicate factor
				this.m0_rep_F[nPlayers] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this.m0_rep_F[nPlayers], this.m0_use_F), string.Format("m0_rep_F[{0}]", new object[1] {nPlayers}), this.OnMessageUpdated, false);
				// Message to 'skills' from Gaussian factor
				this.skills_F[nPlayers] = GaussianOp.SampleAverageConditional(this.skills_use_B[nPlayers], this.m0_rep_F[nPlayers], this.p0_rep_F[nPlayers], this.p0_rep_B[nPlayers]);
			}
			this.skills_use_F_marginal = GetDeepJaggedItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.skills_F, this.skills_use_B, this.skills_use_F_marginal);
			this.vdouble23_use_B_buffer = VariablePointOp_Rprop.Buffer(this.vdouble23_use_B, this.vdouble23_F, this.vdouble23_marginal_F, this.vdouble23_use_B_buffer);
			// Message to 'vdouble23_marginal' from VariablePoint factor
			this.vdouble23_marginal_F = Tracing.FireEvent<Gaussian>(VariablePointOp_Rprop.MarginalAverageConditional(this.vdouble23_use_B, this.vdouble23_F, this.vdouble23_use_B_buffer, this.vdouble23_marginal_F), "vdouble23_marginal_F", this.OnMessageUpdated, false);
			// Message to 'vdouble23_use' from VariablePoint factor
			this.vdouble23_use_F = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this.vdouble23_use_F, this.vdouble23_marginal_F), "vdouble23_use_F", this.OnMessageUpdated, false);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Message to 'vdouble23_rep' from Replicate factor
				this.vdouble23_rep_F[nMatches] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this.vdouble23_rep_F[nMatches], this.vdouble23_use_F), string.Format("vdouble23_rep_F[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Message to 'vdouble23_rep_rep' from Replicate factor
					this.vdouble23_rep_rep_F[nMatches][nTeamsPerMatch] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this.vdouble23_rep_rep_F[nMatches][nTeamsPerMatch], this.vdouble23_rep_F[nMatches]), string.Format("vdouble23_rep_rep_F[{0}]", new object[1] {nTeamsPerMatch}), this.OnMessageUpdated, false);
				}
			}
			this._w_k_p_use_B_buffer = VariablePointOp_Rprop.Buffer(this._w_k_p_use_B, this._w_k_p_F, this._w_k_p_marginal_F, this._w_k_p_use_B_buffer);
			// Message to '_w_k_p_marginal' from VariablePoint factor
			this._w_k_p_marginal_F = Tracing.FireEvent<Gaussian>(VariablePointOp_Rprop.MarginalAverageConditional(this._w_k_p_use_B, this._w_k_p_F, this._w_k_p_use_B_buffer, this._w_k_p_marginal_F), "_w_k_p_marginal_F", this.OnMessageUpdated, false);
			// Message to '_w_k_p_use' from VariablePoint factor
			this._w_k_p_use_F = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this._w_k_p_use_F, this._w_k_p_marginal_F), "_w_k_p_use_F", this.OnMessageUpdated, false);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Message to '_w_k_p_rep' from Replicate factor
				this._w_k_p_rep_F[nMatches] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this._w_k_p_rep_F[nMatches], this._w_k_p_use_F), string.Format("_w_k_p_rep_F[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Message to '_w_k_p_rep_rep' from Replicate factor
					this._w_k_p_rep_rep_F[nMatches][nTeamsPerMatch] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this._w_k_p_rep_rep_F[nMatches][nTeamsPerMatch], this._w_k_p_rep_F[nMatches]), string.Format("_w_k_p_rep_rep_F[{0}]", new object[1] {nTeamsPerMatch}), this.OnMessageUpdated, false);
				}
			}
			this._v_c_use_B_buffer0_ = VariablePointOp_RpropGamma.Buffer0(this._v_c_use_B, this._v_c_F, this._v_c_marginal_F, this._v_c_use_B_buffer0_);
			// Message to '_v_c_marginal' from VariablePoint factor
			this._v_c_marginal_F = Tracing.FireEvent<Gamma>(VariablePointOp_RpropGamma.MarginalAverageConditional(this._v_c_use_B, this._v_c_F, this._v_c_use_B_buffer0_, this._v_c_marginal_F), "_v_c_marginal_F", this.OnMessageUpdated, false);
			// Message to '_v_c_use' from VariablePoint factor
			this._v_c_use_F = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(this._v_c_use_F, this._v_c_marginal_F), "_v_c_use_F", this.OnMessageUpdated, false);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Message to '_v_c_rep' from Replicate factor
				this._v_c_rep_F[nMatches] = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(this._v_c_rep_F[nMatches], this._v_c_use_F), string.Format("_v_c_rep_F[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Message to '_v_c_rep_rep' from Replicate factor
					this._v_c_rep_rep_F[nMatches][nTeamsPerMatch] = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(this._v_c_rep_rep_F[nMatches][nTeamsPerMatch], this._v_c_rep_F[nMatches]), string.Format("_v_c_rep_rep_F[{0}]", new object[1] {nTeamsPerMatch}), this.OnMessageUpdated, false);
				}
			}
			this._m_q_use_B_buffer = VariablePointOp_Rprop.Buffer(this._m_q_use_B, this._m_q_F, this._m_q_marginal_F, this._m_q_use_B_buffer);
			// Message to '_m_q_marginal' from VariablePoint factor
			this._m_q_marginal_F = Tracing.FireEvent<Gaussian>(VariablePointOp_Rprop.MarginalAverageConditional(this._m_q_use_B, this._m_q_F, this._m_q_use_B_buffer, this._m_q_marginal_F), "_m_q_marginal_F", this.OnMessageUpdated, false);
			// Message to '_m_q_use' from VariablePoint factor
			this._m_q_use_F = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this._m_q_use_F, this._m_q_marginal_F), "_m_q_use_F", this.OnMessageUpdated, false);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Message to '_m_q_rep' from Replicate factor
				this._m_q_rep_F[nMatches] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this._m_q_rep_F[nMatches], this._m_q_use_F), string.Format("_m_q_rep_F[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Message to '_m_q_rep_rep' from Replicate factor
					this._m_q_rep_rep_F[nMatches][nTeamsPerMatch] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this._m_q_rep_rep_F[nMatches][nTeamsPerMatch], this._m_q_rep_F[nMatches]), string.Format("_m_q_rep_rep_F[{0}]", new object[1] {nTeamsPerMatch}), this.OnMessageUpdated, false);
				}
			}
			this._v_q_use_B_buffer0_ = VariablePointOp_RpropGamma.Buffer0(this._v_q_use_B, this._v_q_F, this._v_q_marginal_F, this._v_q_use_B_buffer0_);
			// Message to '_v_q_marginal' from VariablePoint factor
			this._v_q_marginal_F = Tracing.FireEvent<Gamma>(VariablePointOp_RpropGamma.MarginalAverageConditional(this._v_q_use_B, this._v_q_F, this._v_q_use_B_buffer0_, this._v_q_marginal_F), "_v_q_marginal_F", this.OnMessageUpdated, false);
			// Message to '_v_q_use' from VariablePoint factor
			this._v_q_use_F = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(this._v_q_use_F, this._v_q_marginal_F), "_v_q_use_F", this.OnMessageUpdated, false);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Message to '_v_q_rep' from Replicate factor
				this._v_q_rep_F[nMatches] = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(this._v_q_rep_F[nMatches], this._v_q_use_F), string.Format("_v_q_rep_F[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Message to '_v_q_rep_rep' from Replicate factor
					this._v_q_rep_rep_F[nMatches][nTeamsPerMatch] = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(this._v_q_rep_rep_F[nMatches][nTeamsPerMatch], this._v_q_rep_F[nMatches]), string.Format("_v_q_rep_rep_F[{0}]", new object[1] {nTeamsPerMatch}), this.OnMessageUpdated, false);
				}
			}
			this.vdouble42_use_B_bufferBeta = VariablePointOp_RpropBeta.BufferBeta(this.vdouble42_use_B, this.vdouble42_F, this.vdouble42_marginal_F, this.vdouble42_use_B_bufferBeta);
			// Message to 'vdouble42_marginal' from VariablePoint factor
			this.vdouble42_marginal_F = Tracing.FireEvent<Beta>(VariablePointOp_RpropBeta.MarginalAverageConditional(this.vdouble42_use_B, this.vdouble42_F, this.vdouble42_use_B_bufferBeta, this.vdouble42_marginal_F), "vdouble42_marginal_F", this.OnMessageUpdated, false);
			// Message to 'vdouble42_use' from VariablePoint factor
			this.vdouble42_use_F = Tracing.FireEvent<Beta>(ArrayHelper.SetTo<Beta>(this.vdouble42_use_F, this.vdouble42_marginal_F), "vdouble42_use_F", this.OnMessageUpdated, false);
			// Message to 'vbool4' from Bernoulli factor
			this.vbool4_F = BernoulliFromBetaOp.SampleAverageConditional(this.vdouble42_use_F);
			this.vdouble41_use_B_bufferBeta = VariablePointOp_RpropBeta.BufferBeta(this.vdouble41_use_B, this.vdouble41_F, this.vdouble41_marginal_F, this.vdouble41_use_B_bufferBeta);
			// Message to 'vdouble41_marginal' from VariablePoint factor
			this.vdouble41_marginal_F = Tracing.FireEvent<Beta>(VariablePointOp_RpropBeta.MarginalAverageConditional(this.vdouble41_use_B, this.vdouble41_F, this.vdouble41_use_B_bufferBeta, this.vdouble41_marginal_F), "vdouble41_marginal_F", this.OnMessageUpdated, false);
			// Message to 'vdouble41_use' from VariablePoint factor
			this.vdouble41_use_F = Tracing.FireEvent<Beta>(ArrayHelper.SetTo<Beta>(this.vdouble41_use_F, this.vdouble41_marginal_F), "vdouble41_use_F", this.OnMessageUpdated, false);
			// Message to 'vbool3' from Bernoulli factor
			this.vbool3_F = BernoulliFromBetaOp.SampleAverageConditional(this.vdouble41_use_F);
			this._w_d_o_use_B_buffer = VariablePointOp_Rprop.Buffer(this._w_d_o_use_B, this._w_d_o_F, this._w_d_o_marginal_F, this._w_d_o_use_B_buffer);
			// Message to '_w_d_o_marginal' from VariablePoint factor
			this._w_d_o_marginal_F = Tracing.FireEvent<Gaussian>(VariablePointOp_Rprop.MarginalAverageConditional(this._w_d_o_use_B, this._w_d_o_F, this._w_d_o_use_B_buffer, this._w_d_o_marginal_F), "_w_d_o_marginal_F", this.OnMessageUpdated, false);
			// Message to '_w_d_o_use' from VariablePoint factor
			this._w_d_o_use_F = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this._w_d_o_use_F, this._w_d_o_marginal_F), "_w_d_o_use_F", this.OnMessageUpdated, false);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Message to '_w_d_o_rep' from Replicate factor
				this._w_d_o_rep_F[nMatches] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this._w_d_o_rep_F[nMatches], this._w_d_o_use_F), string.Format("_w_d_o_rep_F[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Message to '_w_d_o_rep_rep' from Replicate factor
					this._w_d_o_rep_rep_F[nMatches][nTeamsPerMatch] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this._w_d_o_rep_rep_F[nMatches][nTeamsPerMatch], this._w_d_o_rep_F[nMatches]), string.Format("_w_d_o_rep_rep_F[{0}]", new object[1] {nTeamsPerMatch}), this.OnMessageUpdated, false);
				}
			}
			this.vdouble28_use_B_buffer = VariablePointOp_Rprop.Buffer(this.vdouble28_use_B, this.vdouble28_F, this.vdouble28_marginal_F, this.vdouble28_use_B_buffer);
			// Message to 'vdouble28_marginal' from VariablePoint factor
			this.vdouble28_marginal_F = Tracing.FireEvent<Gaussian>(VariablePointOp_Rprop.MarginalAverageConditional(this.vdouble28_use_B, this.vdouble28_F, this.vdouble28_use_B_buffer, this.vdouble28_marginal_F), "vdouble28_marginal_F", this.OnMessageUpdated, false);
			// Message to 'vdouble28_use' from VariablePoint factor
			this.vdouble28_use_F = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this.vdouble28_use_F, this.vdouble28_marginal_F), "vdouble28_use_F", this.OnMessageUpdated, false);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Message to 'vdouble28_rep' from Replicate factor
				this.vdouble28_rep_F[nMatches] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this.vdouble28_rep_F[nMatches], this.vdouble28_use_F), string.Format("vdouble28_rep_F[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Message to 'vdouble28_rep_rep' from Replicate factor
					this.vdouble28_rep_rep_F[nMatches][nTeamsPerMatch] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this.vdouble28_rep_rep_F[nMatches][nTeamsPerMatch], this.vdouble28_rep_F[nMatches]), string.Format("vdouble28_rep_rep_F[{0}]", new object[1] {nTeamsPerMatch}), this.OnMessageUpdated, false);
				}
			}
			this.Changed_numberOfIterationsDecreased_Init_deathcount_draw_killcount_Match_time_m_p_time_m__t__n_Playe1_isDone = true;
			this.Changed_numberOfIterationsDecreased_Init_deathcount_draw_killcount_Match_time_m_p_time_m__t__n_Playe1_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and must reset on changes to PlayerIndex and PlayerInTeam and vdouble__20 and vdouble__6 and vint____2</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_Init_PlayerIndex_PlayerInTeam_vdouble__20_vdouble__6_vint____2(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_Init_PlayerIndex_PlayerInTeam_vdouble__20_vdouble__6_vint____2_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_Init_PlayerIndex_PlayerInTeam_vdouble__20_vdouble__6_vint____2_isInitialised)) {
				return ;
			}
			this._gamma_marginal_F = Gamma.Uniform();
			this._gamma_use_B = Gamma.Uniform();
			this._gamma_use_B_buffer0_ = VariablePointOp_RpropGamma.Buffer0Init();
			this.Changed_numberOfIterationsDecreased_Init_PlayerIndex_PlayerInTeam_vdouble__20_vdouble__6_vint____2_isDone = true;
			this.Changed_numberOfIterationsDecreased_Init_PlayerIndex_PlayerInTeam_vdouble__20_vdouble__6_vint____2_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and p_time_m__t__n and PlayerIndex and PlayerInTeam and must reset on changes to deathcount and draw and killcount and Match_time_m and quit</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathcount_draw_kil10(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathcount_draw_kil10_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathcount_draw_kil10_isInitialised)) {
				return ;
			}
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Message to 'perf_n_m' from Product factor
						this.perf_n_m_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(this.perf_from_ds_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
					}
				}
			}
			this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathcount_draw_kil10_isDone = true;
			this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathcount_draw_kil10_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and p_time_m__t__n and PlayerInTeam and must reset on changes to deathcount and draw and killcount and Match_time_m and PlayerIndex and quit</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerInTeam_Init_deathcount_draw_killcount_Match12(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerInTeam_Init_deathcount_draw_killcount_Match12_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerInTeam_Init_deathcount_draw_killcount_Match12_isInitialised)) {
				return ;
			}
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Message to 'vc_Times_p_time' from Product factor
						this.vc_Times_p_time_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GammaProductOp.ProductAverageConditional(this._v_c_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
					}
				}
			}
			this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerInTeam_Init_deathcount_draw_killcount_Match12_isDone = true;
			this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerInTeam_Init_deathcount_draw_killcount_Match12_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and PlayerIndex and PlayerInTeam and must reset on changes to deathcount and draw and killcount and Match_time_m and p_time_m__t__n and quit</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_Init_deathcount_draw_killcount_Match_ti9(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_Init_deathcount_draw_killcount_Match_ti9_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_Init_deathcount_draw_killcount_Match_ti9_isInitialised)) {
				return ;
			}
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Message to 'skills_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' from GetDeepJaggedItems factor
				this.skills_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F[nMatches] = GetDeepJaggedItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>,Gaussian>(this.skills_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B[nMatches], this.skills_F, this.skills_use_F_marginal, this.playerIndex, nMatches, this.skills_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F[nMatches]);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Message to 'perf_from_ds' from Gaussian factor
						this.perf_from_ds_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.SampleAverageConditional(this.skills_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 1.0);
					}
				}
			}
			this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_Init_deathcount_draw_killcount_Match_ti9_isDone = true;
			this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_Init_deathcount_draw_killcount_Match_ti9_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and PlayerInTeam and must reset on changes to deathcount and draw and killcount and Match_time_m and p_time_m__t__n and PlayerIndex and quit</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_draw_killcount_Match_time_m_p_time_3(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_draw_killcount_Match_time_m_p_time_3_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_draw_killcount_Match_time_m_p_time_3_isInitialised)) {
				return ;
			}
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						this.skills_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.perf_from_ds_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.perf_n_m_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.player_perf_t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.MarginalInit<Gaussian>(this.player_perf_t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						this.player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.ToDefInit<Gaussian>(this.player_perf_t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						this.player_perf_t__n_depth1_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
				for(int _a3 = 0; _a3<this.playerInTeam[nMatches][0]; _a3++) {
					this.player_perf_t__n_item0_uses_F[nMatches][0][_a3] = Gaussian.Uniform();
				}
				for(int _a4 = 0; _a4<this.playerInTeam[nMatches][1]; _a4++) {
					this.player_perf_t__n_item1_uses_B[nMatches][0][_a4] = Gaussian.Uniform();
				}
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					if (nTeamsPerMatch==1) {
						this.player_perf_t__n_item1_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.ToDefInit<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item1_uses_F[nMatches][0]);
					}
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						if (nTeamsPerMatch==0) {
							this.vdouble65_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
							this.vdouble66_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
							this.Perfomance_opposing_team_0__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						}
						this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						if (nTeamsPerMatch==0) {
							this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.MarginalInit<Gaussian>(this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							this.Perfomance_opposing_team_uses_B_toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.ToDefInit<Gaussian>(this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						}
						this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = Gaussian.Uniform();
						this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = Gaussian.Uniform();
						this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = Gaussian.Uniform();
						if (nTeamsPerMatch==1) {
							this.Perfomance_opposing_team_1__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
							this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.MarginalInit<Gaussian>(this.Perfomance_opposing_team_1__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							this.Perfomance_opposing_team_uses_B_toDef2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.ToDefInit<Gaussian>(this.Perfomance_opposing_team_1__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						}
						this.vdouble82_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble78_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble78_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.kill_count_m__t__n_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble75_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble74_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble23_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble74_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble73_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this._w_k_p_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = Gaussian.Uniform();
						this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = Gaussian.Uniform();
						this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3] = Gaussian.Uniform();
						this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = Gaussian.Uniform();
						this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = Gaussian.Uniform();
						this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = Gaussian.Uniform();
						this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3] = Gaussian.Uniform();
						this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = Gaussian.Uniform();
						this.vdouble73_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble75_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.kill_count_m__t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vc_Times_p_time_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = Gamma.Uniform();
						this.vc_Times_p_time_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = Gamma.Uniform();
						this.vdouble83_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.death_count_m__t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble86_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vc_Times_p_time_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gamma.Uniform();
						this._v_c_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gamma.Uniform();
						this.vdouble81_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble28_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble81_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble82_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this._w_d_o_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = Gaussian.Uniform();
						this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = Gaussian.Uniform();
						this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = Gaussian.Uniform();
						this.vdouble89_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble90_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble91_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble93_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.Under_performing_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Bernoulli.Uniform();
						this.vbool6_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Bernoulli.Uniform();
						this.vbool3_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Bernoulli.Uniform();
						this.vbool3_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Bernoulli.Uniform();
						this.vbool6_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Bernoulli.Uniform();
						this.vbool4_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Bernoulli.Uniform();
						this.vbool4_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Bernoulli.Uniform();
						this.Under_performing_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Bernoulli.Uniform();
						this.vdouble93_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble91_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this._v_q_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gamma.Uniform();
						this._v_q_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gamma.Uniform();
						this.vdouble90_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this._m_q_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble89_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						for(int _a2 = 0; _a2<this.playerInTeam[nMatches][1]; _a2++) {
							if (nTeamsPerMatch==1) {
								this.player_perf_t__n_1_1__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][_a2] = Gaussian.Uniform();
							}
						}
					}
				}
				for(int _a3 = 0; _a3<this.playerInTeam[nMatches][0]; _a3++) {
					this.player_perf_t__n_item0_uses_B[nMatches][1][_a3] = Gaussian.Uniform();
				}
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					if (nTeamsPerMatch==0) {
						this.player_perf_t__n_item0_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.MarginalInit<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item0_uses_F[nMatches][0]);
						this.player_perf_t__n_item0_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.ToDefInit<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item0_uses_F[nMatches][0]);
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							for(int _a3 = 0; _a3<this.playerInTeam[nMatches][0]; _a3++) {
								this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][_a3] = Gaussian.Uniform();
							}
							for(int _a = 0; _a<this.playerInTeam[nMatches][0]; _a++) {
								this.player_perf_t__n_0_0__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][_a] = Gaussian.Uniform();
							}
						}
					}
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						this.skills_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						// Message to 'vdouble23_rep_rep_rep' from Replicate factor
						this.vdouble23_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this.vdouble23_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble23_rep_rep_F[nMatches][nTeamsPerMatch]), string.Format("vdouble23_rep_rep_rep_F[{0}]", new object[1] {nPlayersMinusPerTeam}), this.OnMessageUpdated, false);
						// Message to '_w_k_p_rep_rep_rep' from Replicate factor
						this._w_k_p_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this._w_k_p_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this._w_k_p_rep_rep_F[nMatches][nTeamsPerMatch]), string.Format("_w_k_p_rep_rep_rep_F[{0}]", new object[1] {nPlayersMinusPerTeam}), this.OnMessageUpdated, false);
						// Message to '_v_c_rep_rep_rep' from Replicate factor
						this._v_c_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(this._v_c_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this._v_c_rep_rep_F[nMatches][nTeamsPerMatch]), string.Format("_v_c_rep_rep_rep_F[{0}]", new object[1] {nPlayersMinusPerTeam}), this.OnMessageUpdated, false);
						// Message to '_m_q_rep_rep_rep' from Replicate factor
						this._m_q_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this._m_q_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this._m_q_rep_rep_F[nMatches][nTeamsPerMatch]), string.Format("_m_q_rep_rep_rep_F[{0}]", new object[1] {nPlayersMinusPerTeam}), this.OnMessageUpdated, false);
						// Message to '_v_q_rep_rep_rep' from Replicate factor
						this._v_q_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Tracing.FireEvent<Gamma>(ArrayHelper.SetTo<Gamma>(this._v_q_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this._v_q_rep_rep_F[nMatches][nTeamsPerMatch]), string.Format("_v_q_rep_rep_rep_F[{0}]", new object[1] {nPlayersMinusPerTeam}), this.OnMessageUpdated, false);
						// Message to '_w_d_o_rep_rep_rep' from Replicate factor
						this._w_d_o_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this._w_d_o_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this._w_d_o_rep_rep_F[nMatches][nTeamsPerMatch]), string.Format("_w_d_o_rep_rep_rep_F[{0}]", new object[1] {nPlayersMinusPerTeam}), this.OnMessageUpdated, false);
						// Message to 'vdouble28_rep_rep_rep' from Replicate factor
						this.vdouble28_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Tracing.FireEvent<Gaussian>(ArrayHelper.SetTo<Gaussian>(this.vdouble28_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble28_rep_rep_F[nMatches][nTeamsPerMatch]), string.Format("vdouble28_rep_rep_rep_F[{0}]", new object[1] {nPlayersMinusPerTeam}), this.OnMessageUpdated, false);
					}
				}
			}
			this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_draw_killcount_Match_time_m_p_time_3_isDone = true;
			this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_draw_killcount_Match_time_m_p_time_3_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of p_time_m__t__n and PlayerInTeam</summary>
		private void Changed_p_time_m__t__n_PlayerInTeam()
		{
			if (this.Changed_p_time_m__t__n_PlayerInTeam_isDone) {
				return ;
			}
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					if (this.playerInTeam[nMatches][nTeamsPerMatch]>0) {
						this.vdouble57_reduced[nMatches][nTeamsPerMatch] = Factor.Sum(this.P_time_m__t__n[nMatches][nTeamsPerMatch]);
						if (nTeamsPerMatch==0) {
							this.vdouble63_reduced[nMatches][nTeamsPerMatch] = Factor.Sum(this.P_time_m__t__n[nMatches][1]);
						}
					}
				}
			}
			// Create array for 'p_time_m__t__n_marginal' Forwards messages.
			this.p_time_m__t__n_marginal_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(1000);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'p_time_m__t__n_marginal' Forwards messages.
				this.p_time_m__t__n_marginal_F[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for 'p_time_m__t__n_marginal' Forwards messages.
					this.p_time_m__t__n_marginal_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						this.p_time_m__t__n_marginal_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Message to 'p_time_m__t__n_marginal' from DerivedVariable factor
			this.p_time_m__t__n_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>,double[][][]>(this.P_time_m__t__n, this.p_time_m__t__n_marginal_F);
			this.Changed_p_time_m__t__n_PlayerInTeam_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of PlayerIndex</summary>
		private void Changed_PlayerIndex()
		{
			if (this.Changed_PlayerIndex_isDone) {
				return ;
			}
			// Create array for 'PlayerIndex_marginal' Forwards messages.
			this.PlayerIndex_marginal_F = new PointMass<int[][][]>(this.playerIndex);
			// Message to 'PlayerIndex_marginal' from DerivedVariable factor
			this.PlayerIndex_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int[][][]>,int[][][]>(this.playerIndex, this.PlayerIndex_marginal_F);
			this.Changed_PlayerIndex_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of PlayerInTeam</summary>
		private void Changed_PlayerInTeam()
		{
			if (this.Changed_PlayerInTeam_isDone) {
				return ;
			}
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for 'skills_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' Forwards messages.
					this.skills_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					// Create array for replicates of 'perf_from_ds_F'
					this.perf_from_ds_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'perf_n_m_F'
					this.perf_n_m_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for 'player_perf_t__n' Forwards messages.
					this.player_perf_t__n_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					// Create array for replicates of 'player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal'
					this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef'
					this.player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for 'player_perf_t__n_depth1' Forwards messages.
					this.player_perf_t__n_depth1_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
				}
				// Create array for 'player_perf_t__n_item1_uses' Forwards messages.
				this.player_perf_t__n_item1_uses_F[nMatches][0] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][1]);
				for(int _a4 = 0; _a4<this.playerInTeam[nMatches][1]; _a4++) {
					this.player_perf_t__n_item1_uses_F[nMatches][0][_a4] = Gaussian.Uniform();
				}
				// Create array for 'player_perf_t__n_item0_uses' Forwards messages.
				this.player_perf_t__n_item0_uses_F[nMatches][0] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][0]);
				// Create array for 'player_perf_t__n_item1_uses' Backwards messages.
				this.player_perf_t__n_item1_uses_B[nMatches][0] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][1]);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					this.vdouble57_reduced[nMatches][nTeamsPerMatch] = default(double);
					this.Avg_play_time_team_reduced[nMatches][nTeamsPerMatch] = default(double);
					this.vdouble63_reduced[nMatches][nTeamsPerMatch] = default(double);
					this.vdouble64_reduced[nMatches][nTeamsPerMatch] = default(double);
					// Create array for replicates of 'vdouble65_F'
					this.vdouble65_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble66_F'
					this.vdouble66_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'Perfomance_opposing_team_0__F'
					this.Perfomance_opposing_team_0__F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'Perfomance_opposing_team_F'
					this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'Perfomance_opposing_team_uses_F_marginal'
					this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'Perfomance_opposing_team_uses_B_toDef'
					this.Perfomance_opposing_team_uses_B_toDef[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'Perfomance_opposing_team_uses_F'
					this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]][];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Create array for 'Perfomance_opposing_team_uses' Forwards messages.
						this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = new Gaussian[3];
					}
					// Create array for replicates of 'Perfomance_opposing_team_1__F'
					this.Perfomance_opposing_team_1__F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'Perfomance_opposing_team_uses_F_marginal2'
					this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'Perfomance_opposing_team_uses_B_toDef2'
					this.Perfomance_opposing_team_uses_B_toDef2[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble82_F'
					this.vdouble82_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble78_F'
					this.vdouble78_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble78_use_B'
					this.vdouble78_use_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'kill_count_m__t__n_B'
					this.kill_count_m__t__n_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble75_B'
					this.vdouble75_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble74_B'
					this.vdouble74_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for 'vdouble23_rep_rep_rep' Forwards messages.
					this.vdouble23_rep_rep_rep_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble74_F'
					this.vdouble74_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble73_B'
					this.vdouble73_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for '_w_k_p_rep_rep_rep' Forwards messages.
					this._w_k_p_rep_rep_rep_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for 'player_perf_t__n_uses' Backwards messages.
					this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]][];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Create array for 'player_perf_t__n_uses' Backwards messages.
						this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = new Gaussian[4];
					}
					// Create array for 'player_perf_t__n_uses' Forwards messages.
					this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]][];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Create array for 'player_perf_t__n_uses' Forwards messages.
						this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = new Gaussian[4];
					}
					// Create array for replicates of 'vdouble73_F'
					this.vdouble73_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble75_F'
					this.vdouble75_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'kill_count_m__t__n_F'
					this.kill_count_m__t__n_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vc_Times_p_time_uses_B'
					this.vc_Times_p_time_uses_B[nMatches][nTeamsPerMatch] = new Gamma[this.playerInTeam[nMatches][nTeamsPerMatch]][];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Create array for 'vc_Times_p_time_uses' Backwards messages.
						this.vc_Times_p_time_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = new Gamma[2];
					}
					// Create array for replicates of 'vdouble83_F'
					this.vdouble83_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'death_count_m__t__n_F'
					this.death_count_m__t__n_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble86_use_B'
					this.vdouble86_use_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vc_Times_p_time_F'
					this.vc_Times_p_time_F[nMatches][nTeamsPerMatch] = new Gamma[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for '_v_c_rep_rep_rep' Forwards messages.
					this._v_c_rep_rep_rep_F[nMatches][nTeamsPerMatch] = new Gamma[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble81_B'
					this.vdouble81_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for 'vdouble28_rep_rep_rep' Forwards messages.
					this.vdouble28_rep_rep_rep_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble81_F'
					this.vdouble81_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble82_B'
					this.vdouble82_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for '_w_d_o_rep_rep_rep' Forwards messages.
					this._w_d_o_rep_rep_rep_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'Perfomance_opposing_team_uses_B'
					this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]][];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Create array for 'Perfomance_opposing_team_uses' Backwards messages.
						this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = new Gaussian[3];
					}
					// Create array for replicates of 'vdouble89_F'
					this.vdouble89_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble90_F'
					this.vdouble90_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble91_F'
					this.vdouble91_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble93_F'
					this.vdouble93_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'Under_performing_F'
					this.Under_performing_F[nMatches][nTeamsPerMatch] = new Bernoulli[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vbool6_F'
					this.vbool6_F[nMatches][nTeamsPerMatch] = new Bernoulli[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for 'vbool3_rep_rep_rep' Backwards messages.
					this.vbool3_rep_rep_rep_B[nMatches][nTeamsPerMatch] = new Bernoulli[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for 'vbool3_rep_rep_rep' Forwards messages.
					this.vbool3_rep_rep_rep_F[nMatches][nTeamsPerMatch] = new Bernoulli[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vbool6_B'
					this.vbool6_B[nMatches][nTeamsPerMatch] = new Bernoulli[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for 'vbool4_rep_rep_rep' Backwards messages.
					this.vbool4_rep_rep_rep_B[nMatches][nTeamsPerMatch] = new Bernoulli[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for 'vbool4_rep_rep_rep' Forwards messages.
					this.vbool4_rep_rep_rep_F[nMatches][nTeamsPerMatch] = new Bernoulli[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'Under_performing_B'
					this.Under_performing_B[nMatches][nTeamsPerMatch] = new Bernoulli[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble93_B'
					this.vdouble93_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble91_use_B'
					this.vdouble91_use_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for '_v_q_rep_rep_rep' Backwards messages.
					this._v_q_rep_rep_rep_B[nMatches][nTeamsPerMatch] = new Gamma[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for '_v_q_rep_rep_rep' Forwards messages.
					this._v_q_rep_rep_rep_F[nMatches][nTeamsPerMatch] = new Gamma[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble90_B'
					this.vdouble90_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for '_m_q_rep_rep_rep' Forwards messages.
					this._m_q_rep_rep_rep_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble89_B'
					this.vdouble89_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'player_perf_t__n_1_1__B'
					this.player_perf_t__n_1_1__B[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						if (nTeamsPerMatch==1) {
							// Create array for 'player_perf_t__n_1_1_' Backwards messages.
							this.player_perf_t__n_1_1__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][1]);
						}
					}
				}
				// Create array for 'player_perf_t__n_item0_uses' Backwards messages.
				this.player_perf_t__n_item0_uses_B[nMatches][1] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][0]);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					if (nTeamsPerMatch==0) {
						// Create array for 'player_perf_t__n_item0_rep' Forwards messages.
						this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>[this.playerInTeam[nMatches][nTeamsPerMatch]];
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Create array for 'player_perf_t__n_item0_rep' Forwards messages.
							this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][0]);
						}
					}
					// Create array for replicates of 'player_perf_t__n_0_0__B'
					this.player_perf_t__n_0_0__B[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						if (nTeamsPerMatch==0) {
							// Create array for 'player_perf_t__n_0_0_' Backwards messages.
							this.player_perf_t__n_0_0__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][0]);
						}
					}
					// Create array for 'skills_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' Backwards messages.
					this.skills_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
				}
			}
			// Create array for 'PlayerInTeam_marginal' Forwards messages.
			this.PlayerInTeam_marginal_F = new PointMass<int[][]>(this.playerInTeam);
			// Message to 'PlayerInTeam_marginal' from DerivedVariable factor
			this.PlayerInTeam_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int[][]>,int[][]>(this.playerInTeam, this.PlayerInTeam_marginal_F);
			this.Changed_PlayerInTeam_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of PlayerInTeam and quit</summary>
		private void Changed_PlayerInTeam_quit()
		{
			if (this.Changed_PlayerInTeam_quit_isDone) {
				return ;
			}
			// Create array for 'quit_marginal' Forwards messages.
			this.quit_marginal_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]>(1000);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'quit_marginal' Forwards messages.
				this.quit_marginal_F[nMatches] = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(2);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for 'quit_marginal' Forwards messages.
					this.quit_marginal_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Bernoulli,bool>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						this.quit_marginal_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Bernoulli.Uniform();
					}
				}
			}
			// Message to 'quit_marginal' from DerivedVariable factor
			this.quit_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]>,bool[][][]>(this.Quit, this.quit_marginal_F);
			this.Changed_PlayerInTeam_quit_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vdouble__20</summary>
		private void Changed_vdouble__20()
		{
			if (this.Changed_vdouble__20_isDone) {
				return ;
			}
			// Create array for 'vdouble__20_marginal' Forwards messages.
			this.vdouble__20_marginal_F = new DistributionStructArray<Gaussian,double>(6688);
			for(int nPlayers = 0; nPlayers<6688; nPlayers++) {
				this.vdouble__20_marginal_F[nPlayers] = Gaussian.Uniform();
			}
			// Message to 'vdouble__20_marginal' from DerivedVariable factor
			this.vdouble__20_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Gaussian,double>,double[]>(this.Vdouble__20, this.vdouble__20_marginal_F);
			// Create array for 'vdouble__22_marginal' Forwards messages.
			this.vdouble__22_marginal_F = new DistributionStructArray<Gaussian,double>(6688);
			for(int nPlayers = 0; nPlayers<6688; nPlayers++) {
				this.vdouble__22_marginal_F[nPlayers] = Gaussian.Uniform();
			}
			// Message to 'vdouble__22_marginal' from DerivedVariable factor
			this.vdouble__22_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Gaussian,double>,double[]>(this.Vdouble__20, this.vdouble__22_marginal_F);
			this.Changed_vdouble__20_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vdouble__6</summary>
		private void Changed_vdouble__6()
		{
			if (this.Changed_vdouble__6_isDone) {
				return ;
			}
			// Create array for 'vdouble__6_marginal' Forwards messages.
			this.vdouble__6_marginal_F = new DistributionStructArray<Gaussian,double>(200);
			for(int index4 = 0; index4<200; index4++) {
				this.vdouble__6_marginal_F[index4] = Gaussian.Uniform();
			}
			// Message to 'vdouble__6_marginal' from DerivedVariable factor
			this.vdouble__6_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Gaussian,double>,double[]>(this.Vdouble__6, this.vdouble__6_marginal_F);
			this.Changed_vdouble__6_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vint____2</summary>
		private void Changed_vint____2()
		{
			if (this.Changed_vint____2_isDone) {
				return ;
			}
			// Create array for 'vint____2_marginal' Forwards messages.
			this.vint____2_marginal_F = new PointMass<int[][]>(this.Vint____2);
			// Message to 'vint____2_marginal' from DerivedVariable factor
			this.vint____2_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int[][]>,int[][]>(this.Vint____2, this.vint____2_marginal_F);
			this.Changed_vint____2_isDone = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			// Create array for 'skills' Forwards messages.
			this.skills_F = new DistributionStructArray<Gaussian,double>(6688);
			// Message to 'm0' from GaussianFromMeanAndVariance factor
			this.m0_F = Tracing.FireEvent<Gaussian>(GaussianFromMeanAndVarianceOp.SampleAverageConditional(1258.0, 810000.0), "m0_F", this.OnMessageUpdated, false);
			// Create array for 'm0_rep' Forwards messages.
			this.m0_rep_F = new Gaussian[6688];
			// Message to 'p0' from Sample factor
			this.p0_F = Tracing.FireEvent<Gamma>(GammaFromShapeAndScaleOp.SampleAverageConditional(0.5, 0.02), "p0_F", this.OnMessageUpdated, false);
			// Create array for 'skills_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' Forwards messages.
			this.skills_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(1000);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'skills_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' Forwards messages.
				this.skills_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
			}
			// Create array for replicates of 'perf_from_ds_F'
			this.perf_from_ds_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'perf_from_ds_F'
				this.perf_from_ds_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'perf_n_m_F'
			this.perf_n_m_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'perf_n_m_F'
				this.perf_n_m_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'player_perf_t__n_F'
			this.player_perf_t__n_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'player_perf_t__n' Forwards messages.
				this.player_perf_t__n_F[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
			}
			// Create array for replicates of 'player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal'
			this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal'
				this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef'
			this.player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef'
				this.player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'player_perf_t__n_depth1_F'
			this.player_perf_t__n_depth1_F = new DistributionStructArray<Gaussian,double>[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'player_perf_t__n_depth1' Forwards messages.
				this.player_perf_t__n_depth1_F[nMatches] = new DistributionStructArray<Gaussian,double>[2];
			}
			// Create array for replicates of 'player_perf_t__n_item1_uses_F'
			this.player_perf_t__n_item1_uses_F = new DistributionStructArray<Gaussian,double>[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'player_perf_t__n_item1_uses' Forwards messages.
				this.player_perf_t__n_item1_uses_F[nMatches] = new DistributionStructArray<Gaussian,double>[2];
			}
			// Create array for replicates of 'player_perf_t__n_item0_uses_F'
			this.player_perf_t__n_item0_uses_F = new DistributionStructArray<Gaussian,double>[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'player_perf_t__n_item0_uses' Forwards messages.
				this.player_perf_t__n_item0_uses_F[nMatches] = new DistributionStructArray<Gaussian,double>[2];
			}
			// Create array for replicates of 'player_perf_t__n_item1_uses_B'
			this.player_perf_t__n_item1_uses_B = new DistributionStructArray<Gaussian,double>[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'player_perf_t__n_item1_uses' Backwards messages.
				this.player_perf_t__n_item1_uses_B[nMatches] = new DistributionStructArray<Gaussian,double>[2];
			}
			// Create array for replicates of 'player_perf_t__n_item1_rep_B_toDef'
			this.player_perf_t__n_item1_rep_B_toDef = new DistributionStructArray<Gaussian,double>[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'player_perf_t__n_item1_rep_B_toDef'
				this.player_perf_t__n_item1_rep_B_toDef[nMatches] = new DistributionStructArray<Gaussian,double>[2];
			}
			this.vdouble57_reduced = new double[1000][];
			this.Avg_play_time_team_reduced = new double[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				this.vdouble57_reduced[nMatches] = new double[2];
				this.Avg_play_time_team_reduced[nMatches] = new double[2];
			}
			this.vdouble63_reduced = new double[1000][];
			this.vdouble64_reduced = new double[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				this.vdouble63_reduced[nMatches] = new double[2];
				this.vdouble64_reduced[nMatches] = new double[2];
			}
			// Create array for replicates of 'vdouble65_F'
			this.vdouble65_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble65_F'
				this.vdouble65_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble66_F'
			this.vdouble66_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble66_F'
				this.vdouble66_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'Perfomance_opposing_team_0__F'
			this.Perfomance_opposing_team_0__F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'Perfomance_opposing_team_0__F'
				this.Perfomance_opposing_team_0__F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'Perfomance_opposing_team_F'
			this.Perfomance_opposing_team_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'Perfomance_opposing_team_F'
				this.Perfomance_opposing_team_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'Perfomance_opposing_team_uses_F_marginal'
			this.Perfomance_opposing_team_uses_F_marginal = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'Perfomance_opposing_team_uses_F_marginal'
				this.Perfomance_opposing_team_uses_F_marginal[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'Perfomance_opposing_team_uses_B_toDef'
			this.Perfomance_opposing_team_uses_B_toDef = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'Perfomance_opposing_team_uses_B_toDef'
				this.Perfomance_opposing_team_uses_B_toDef[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'Perfomance_opposing_team_uses_F'
			this.Perfomance_opposing_team_uses_F = new Gaussian[1000][][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'Perfomance_opposing_team_uses_F'
				this.Perfomance_opposing_team_uses_F[nMatches] = new Gaussian[2][][];
			}
			// Create array for replicates of 'Perfomance_opposing_team_1__F'
			this.Perfomance_opposing_team_1__F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'Perfomance_opposing_team_1__F'
				this.Perfomance_opposing_team_1__F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'Perfomance_opposing_team_uses_F_marginal2'
			this.Perfomance_opposing_team_uses_F_marginal2 = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'Perfomance_opposing_team_uses_F_marginal2'
				this.Perfomance_opposing_team_uses_F_marginal2[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'Perfomance_opposing_team_uses_B_toDef2'
			this.Perfomance_opposing_team_uses_B_toDef2 = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'Perfomance_opposing_team_uses_B_toDef2'
				this.Perfomance_opposing_team_uses_B_toDef2[nMatches] = new Gaussian[2][];
			}
			// Message to '_w_d_o' from GaussianFromMeanAndVariance factor
			this._w_d_o_F = Tracing.FireEvent<Gaussian>(GaussianFromMeanAndVarianceOp.SampleAverageConditional(1258.0, 810000.0), "_w_d_o_F", this.OnMessageUpdated, false);
			// Message to '_w_d_p' from GaussianFromMeanAndVariance factor
			this._w_d_p_F = GaussianFromMeanAndVarianceOp.SampleAverageConditional(1258.0, 810000.0);
			// Message to 'vdouble28' from Difference factor
			this.vdouble28_F = Tracing.FireEvent<Gaussian>(DoublePlusOp.AAverageConditional(0.0, this._w_d_p_F), "vdouble28_F", this.OnMessageUpdated, false);
			// Create array for replicates of 'vdouble82_F'
			this.vdouble82_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble82_F'
				this.vdouble82_F[nMatches] = new Gaussian[2][];
			}
			// Message to '_v_c' from Sample factor
			this._v_c_F = Tracing.FireEvent<Gamma>(GammaFromShapeAndScaleOp.SampleAverageConditional(0.5, 0.02), "_v_c_F", this.OnMessageUpdated, false);
			// Message to '_w_k_p' from GaussianFromMeanAndVariance factor
			this._w_k_p_F = Tracing.FireEvent<Gaussian>(GaussianFromMeanAndVarianceOp.SampleAverageConditional(1258.0, 810000.0), "_w_k_p_F", this.OnMessageUpdated, false);
			// Message to '_w_k_o' from GaussianFromMeanAndVariance factor
			this._w_k_o_F = GaussianFromMeanAndVarianceOp.SampleAverageConditional(1258.0, 810000.0);
			// Message to 'vdouble23' from Difference factor
			this.vdouble23_F = Tracing.FireEvent<Gaussian>(DoublePlusOp.AAverageConditional(0.0, this._w_k_o_F), "vdouble23_F", this.OnMessageUpdated, false);
			// Create array for replicates of 'vdouble78_F'
			this.vdouble78_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble78_F'
				this.vdouble78_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble78_use_B'
			this.vdouble78_use_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble78_use_B'
				this.vdouble78_use_B[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'kill_count_m__t__n_B'
			this.kill_count_m__t__n_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'kill_count_m__t__n_B'
				this.kill_count_m__t__n_B[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble75_B'
			this.vdouble75_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble75_B'
				this.vdouble75_B[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble74_B'
			this.vdouble74_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble74_B'
				this.vdouble74_B[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble23_rep_rep_F'
			this.vdouble23_rep_rep_F = new Gaussian[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'vdouble23_rep_rep' Forwards messages.
				this.vdouble23_rep_rep_F[nMatches] = new Gaussian[2];
			}
			// Create array for 'vdouble23_rep' Forwards messages.
			this.vdouble23_rep_F = new Gaussian[1000];
			// Create array for replicates of 'vdouble23_rep_rep_rep_F'
			this.vdouble23_rep_rep_rep_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble23_rep_rep_rep_F'
				this.vdouble23_rep_rep_rep_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble74_F'
			this.vdouble74_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble74_F'
				this.vdouble74_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble73_B'
			this.vdouble73_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble73_B'
				this.vdouble73_B[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of '_w_k_p_rep_rep_F'
			this._w_k_p_rep_rep_F = new Gaussian[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for '_w_k_p_rep_rep' Forwards messages.
				this._w_k_p_rep_rep_F[nMatches] = new Gaussian[2];
			}
			// Create array for '_w_k_p_rep' Forwards messages.
			this._w_k_p_rep_F = new Gaussian[1000];
			// Create array for replicates of '_w_k_p_rep_rep_rep_F'
			this._w_k_p_rep_rep_rep_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of '_w_k_p_rep_rep_rep_F'
				this._w_k_p_rep_rep_rep_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'player_perf_t__n_uses_B'
			this.player_perf_t__n_uses_B = new Gaussian[1000][][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'player_perf_t__n_uses' Backwards messages.
				this.player_perf_t__n_uses_B[nMatches] = new Gaussian[2][][];
			}
			// Create array for replicates of 'player_perf_t__n_uses_F'
			this.player_perf_t__n_uses_F = new Gaussian[1000][][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'player_perf_t__n_uses' Forwards messages.
				this.player_perf_t__n_uses_F[nMatches] = new Gaussian[2][][];
			}
			// Create array for replicates of 'vdouble73_F'
			this.vdouble73_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble73_F'
				this.vdouble73_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble75_F'
			this.vdouble75_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble75_F'
				this.vdouble75_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'kill_count_m__t__n_F'
			this.kill_count_m__t__n_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'kill_count_m__t__n_F'
				this.kill_count_m__t__n_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vc_Times_p_time_uses_B'
			this.vc_Times_p_time_uses_B = new Gamma[1000][][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vc_Times_p_time_uses_B'
				this.vc_Times_p_time_uses_B[nMatches] = new Gamma[2][][];
			}
			// Create array for replicates of 'vdouble83_F'
			this.vdouble83_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble83_F'
				this.vdouble83_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'death_count_m__t__n_F'
			this.death_count_m__t__n_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'death_count_m__t__n_F'
				this.death_count_m__t__n_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble86_use_B'
			this.vdouble86_use_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble86_use_B'
				this.vdouble86_use_B[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vc_Times_p_time_F'
			this.vc_Times_p_time_F = new Gamma[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vc_Times_p_time_F'
				this.vc_Times_p_time_F[nMatches] = new Gamma[2][];
			}
			// Create array for replicates of '_v_c_rep_rep_F'
			this._v_c_rep_rep_F = new Gamma[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for '_v_c_rep_rep' Forwards messages.
				this._v_c_rep_rep_F[nMatches] = new Gamma[2];
			}
			// Create array for '_v_c_rep' Forwards messages.
			this._v_c_rep_F = new Gamma[1000];
			// Create array for replicates of '_v_c_rep_rep_rep_F'
			this._v_c_rep_rep_rep_F = new Gamma[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of '_v_c_rep_rep_rep_F'
				this._v_c_rep_rep_rep_F[nMatches] = new Gamma[2][];
			}
			// Create array for replicates of 'vdouble81_B'
			this.vdouble81_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble81_B'
				this.vdouble81_B[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble28_rep_rep_F'
			this.vdouble28_rep_rep_F = new Gaussian[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'vdouble28_rep_rep' Forwards messages.
				this.vdouble28_rep_rep_F[nMatches] = new Gaussian[2];
			}
			// Create array for 'vdouble28_rep' Forwards messages.
			this.vdouble28_rep_F = new Gaussian[1000];
			// Create array for replicates of 'vdouble28_rep_rep_rep_F'
			this.vdouble28_rep_rep_rep_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble28_rep_rep_rep_F'
				this.vdouble28_rep_rep_rep_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble81_F'
			this.vdouble81_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble81_F'
				this.vdouble81_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble82_B'
			this.vdouble82_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble82_B'
				this.vdouble82_B[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of '_w_d_o_rep_rep_F'
			this._w_d_o_rep_rep_F = new Gaussian[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for '_w_d_o_rep_rep' Forwards messages.
				this._w_d_o_rep_rep_F[nMatches] = new Gaussian[2];
			}
			// Create array for '_w_d_o_rep' Forwards messages.
			this._w_d_o_rep_F = new Gaussian[1000];
			// Create array for replicates of '_w_d_o_rep_rep_rep_F'
			this._w_d_o_rep_rep_rep_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of '_w_d_o_rep_rep_rep_F'
				this._w_d_o_rep_rep_rep_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'Perfomance_opposing_team_uses_B'
			this.Perfomance_opposing_team_uses_B = new Gaussian[1000][][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'Perfomance_opposing_team_uses_B'
				this.Perfomance_opposing_team_uses_B[nMatches] = new Gaussian[2][][];
			}
			// Message to '_m_q' from GaussianFromMeanAndVariance factor
			this._m_q_F = Tracing.FireEvent<Gaussian>(GaussianFromMeanAndVarianceOp.SampleAverageConditional(1258.0, 810000.0), "_m_q_F", this.OnMessageUpdated, false);
			// Create array for replicates of 'vdouble89_F'
			this.vdouble89_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble89_F'
				this.vdouble89_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble90_F'
			this.vdouble90_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble90_F'
				this.vdouble90_F[nMatches] = new Gaussian[2][];
			}
			// Message to '_v_q' from Sample factor
			this._v_q_F = Tracing.FireEvent<Gamma>(GammaFromShapeAndScaleOp.SampleAverageConditional(0.5, 0.02), "_v_q_F", this.OnMessageUpdated, false);
			// Create array for replicates of 'vdouble91_F'
			this.vdouble91_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble91_F'
				this.vdouble91_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble93_F'
			this.vdouble93_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble93_F'
				this.vdouble93_F[nMatches] = new Gaussian[2][];
			}
			Beta vBeta0 = new Beta(2.0, 2.0);
			this.vdouble42_F = Beta.Uniform();
			// Message to 'vdouble42' from Random factor
			this.vdouble42_F = Tracing.FireEvent<Beta>(ArrayHelper.SetTo<Beta>(this.vdouble42_F, vBeta0), "vdouble42_F", this.OnMessageUpdated, false);
			// Create array for replicates of 'Under_performing_F'
			this.Under_performing_F = new Bernoulli[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'Under_performing_F'
				this.Under_performing_F[nMatches] = new Bernoulli[2][];
			}
			this.vdouble41_F = Beta.Uniform();
			// Message to 'vdouble41' from Random factor
			this.vdouble41_F = Tracing.FireEvent<Beta>(ArrayHelper.SetTo<Beta>(this.vdouble41_F, vBeta0), "vdouble41_F", this.OnMessageUpdated, false);
			// Create array for replicates of 'vbool6_F'
			this.vbool6_F = new Bernoulli[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vbool6_F'
				this.vbool6_F[nMatches] = new Bernoulli[2][];
			}
			// Create array for replicates of 'vbool3_rep_rep_rep_B'
			this.vbool3_rep_rep_rep_B = new Bernoulli[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vbool3_rep_rep_rep_B'
				this.vbool3_rep_rep_rep_B[nMatches] = new Bernoulli[2][];
			}
			// Create array for replicates of 'vbool3_rep_rep_F'
			this.vbool3_rep_rep_F = new Bernoulli[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'vbool3_rep_rep' Forwards messages.
				this.vbool3_rep_rep_F[nMatches] = new Bernoulli[2];
			}
			// Create array for replicates of 'vbool3_rep_rep_rep_B_toDef'
			this.vbool3_rep_rep_rep_B_toDef = new Bernoulli[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vbool3_rep_rep_rep_B_toDef'
				this.vbool3_rep_rep_rep_B_toDef[nMatches] = new Bernoulli[2];
			}
			// Create array for 'vbool3_rep' Forwards messages.
			this.vbool3_rep_F = new Bernoulli[1000];
			// Create array for replicates of 'vbool3_rep_rep_B_toDef'
			this.vbool3_rep_rep_B_toDef = new Bernoulli[1000];
			// Create array for replicates of 'vbool3_rep_rep_F_marginal'
			this.vbool3_rep_rep_F_marginal = new Bernoulli[1000];
			// Create array for replicates of 'vbool3_rep_rep_rep_F_marginal'
			this.vbool3_rep_rep_rep_F_marginal = new Bernoulli[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vbool3_rep_rep_rep_F_marginal'
				this.vbool3_rep_rep_rep_F_marginal[nMatches] = new Bernoulli[2];
			}
			// Create array for replicates of 'vbool3_rep_rep_rep_F'
			this.vbool3_rep_rep_rep_F = new Bernoulli[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vbool3_rep_rep_rep_F'
				this.vbool3_rep_rep_rep_F[nMatches] = new Bernoulli[2][];
			}
			// Create array for replicates of 'vbool6_B'
			this.vbool6_B = new Bernoulli[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vbool6_B'
				this.vbool6_B[nMatches] = new Bernoulli[2][];
			}
			// Create array for replicates of 'vbool4_rep_rep_rep_B'
			this.vbool4_rep_rep_rep_B = new Bernoulli[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vbool4_rep_rep_rep_B'
				this.vbool4_rep_rep_rep_B[nMatches] = new Bernoulli[2][];
			}
			// Create array for replicates of 'vbool4_rep_rep_F'
			this.vbool4_rep_rep_F = new Bernoulli[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'vbool4_rep_rep' Forwards messages.
				this.vbool4_rep_rep_F[nMatches] = new Bernoulli[2];
			}
			// Create array for replicates of 'vbool4_rep_rep_rep_B_toDef'
			this.vbool4_rep_rep_rep_B_toDef = new Bernoulli[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vbool4_rep_rep_rep_B_toDef'
				this.vbool4_rep_rep_rep_B_toDef[nMatches] = new Bernoulli[2];
			}
			// Create array for 'vbool4_rep' Forwards messages.
			this.vbool4_rep_F = new Bernoulli[1000];
			// Create array for replicates of 'vbool4_rep_rep_B_toDef'
			this.vbool4_rep_rep_B_toDef = new Bernoulli[1000];
			// Create array for replicates of 'vbool4_rep_rep_F_marginal'
			this.vbool4_rep_rep_F_marginal = new Bernoulli[1000];
			// Create array for replicates of 'vbool4_rep_rep_rep_F_marginal'
			this.vbool4_rep_rep_rep_F_marginal = new Bernoulli[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vbool4_rep_rep_rep_F_marginal'
				this.vbool4_rep_rep_rep_F_marginal[nMatches] = new Bernoulli[2];
			}
			// Create array for replicates of 'vbool4_rep_rep_rep_F'
			this.vbool4_rep_rep_rep_F = new Bernoulli[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vbool4_rep_rep_rep_F'
				this.vbool4_rep_rep_rep_F[nMatches] = new Bernoulli[2][];
			}
			// Create array for replicates of 'Under_performing_B'
			this.Under_performing_B = new Bernoulli[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'Under_performing_B'
				this.Under_performing_B[nMatches] = new Bernoulli[2][];
			}
			// Create array for replicates of 'vdouble93_B'
			this.vdouble93_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble93_B'
				this.vdouble93_B[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble91_use_B'
			this.vdouble91_use_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble91_use_B'
				this.vdouble91_use_B[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of '_v_q_rep_rep_rep_B'
			this._v_q_rep_rep_rep_B = new Gamma[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of '_v_q_rep_rep_rep_B'
				this._v_q_rep_rep_rep_B[nMatches] = new Gamma[2][];
			}
			// Create array for replicates of '_v_q_rep_rep_F'
			this._v_q_rep_rep_F = new Gamma[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for '_v_q_rep_rep' Forwards messages.
				this._v_q_rep_rep_F[nMatches] = new Gamma[2];
			}
			// Create array for '_v_q_rep' Forwards messages.
			this._v_q_rep_F = new Gamma[1000];
			// Create array for replicates of '_v_q_rep_rep_rep_F'
			this._v_q_rep_rep_rep_F = new Gamma[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of '_v_q_rep_rep_rep_F'
				this._v_q_rep_rep_rep_F[nMatches] = new Gamma[2][];
			}
			// Create array for replicates of 'vdouble90_B'
			this.vdouble90_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble90_B'
				this.vdouble90_B[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of '_m_q_rep_rep_F'
			this._m_q_rep_rep_F = new Gaussian[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for '_m_q_rep_rep' Forwards messages.
				this._m_q_rep_rep_F[nMatches] = new Gaussian[2];
			}
			// Create array for '_m_q_rep' Forwards messages.
			this._m_q_rep_F = new Gaussian[1000];
			// Create array for replicates of '_m_q_rep_rep_rep_F'
			this._m_q_rep_rep_rep_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of '_m_q_rep_rep_rep_F'
				this._m_q_rep_rep_rep_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble89_B'
			this.vdouble89_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble89_B'
				this.vdouble89_B[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'player_perf_t__n_1_1__B'
			this.player_perf_t__n_1_1__B = new DistributionStructArray<Gaussian,double>[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'player_perf_t__n_1_1__B'
				this.player_perf_t__n_1_1__B[nMatches] = new DistributionStructArray<Gaussian,double>[2][];
			}
			// Create array for replicates of 'player_perf_t__n_item0_uses_B'
			this.player_perf_t__n_item0_uses_B = new DistributionStructArray<Gaussian,double>[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'player_perf_t__n_item0_uses' Backwards messages.
				this.player_perf_t__n_item0_uses_B[nMatches] = new DistributionStructArray<Gaussian,double>[2];
			}
			// Create array for replicates of 'player_perf_t__n_item0_rep_F_marginal'
			this.player_perf_t__n_item0_rep_F_marginal = new DistributionStructArray<Gaussian,double>[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'player_perf_t__n_item0_rep_F_marginal'
				this.player_perf_t__n_item0_rep_F_marginal[nMatches] = new DistributionStructArray<Gaussian,double>[2];
			}
			// Create array for replicates of 'player_perf_t__n_item0_rep_B_toDef'
			this.player_perf_t__n_item0_rep_B_toDef = new DistributionStructArray<Gaussian,double>[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'player_perf_t__n_item0_rep_B_toDef'
				this.player_perf_t__n_item0_rep_B_toDef[nMatches] = new DistributionStructArray<Gaussian,double>[2];
			}
			// Create array for replicates of 'player_perf_t__n_item0_rep_F'
			this.player_perf_t__n_item0_rep_F = new DistributionStructArray<Gaussian,double>[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'player_perf_t__n_item0_rep_F'
				this.player_perf_t__n_item0_rep_F[nMatches] = new DistributionStructArray<Gaussian,double>[2][];
			}
			// Create array for replicates of 'player_perf_t__n_0_0__B'
			this.player_perf_t__n_0_0__B = new DistributionStructArray<Gaussian,double>[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'player_perf_t__n_0_0__B'
				this.player_perf_t__n_0_0__B[nMatches] = new DistributionStructArray<Gaussian,double>[2][];
			}
			// Create array for 'skills_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' Backwards messages.
			this.skills_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(1000);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'skills_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' Backwards messages.
				this.skills_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
			}
			// Create array for 'skills_use' Backwards messages.
			this.skills_use_B = new DistributionStructArray<Gaussian,double>(6688);
			// Create array for 'p0_rep' Backwards messages.
			this.p0_rep_B = new Gamma[6688];
			// Create array for 'p0_rep' Forwards messages.
			this.p0_rep_F = new Gamma[6688];
			this.Constant_isDone = true;
		}

		/// <summary>
		/// Returns the marginal distribution for 'deathcount' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> DeathcountMarginal()
		{
			return this.deathcount_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'draw' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[]> DrawMarginal()
		{
			return this.draw_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'Epsilon' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian EpsilonMarginal()
		{
			return this.Epsilon_marginal_F;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_draw_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_Playe6_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_PlayerIndex_PlayerInTeam_vdouble__20_vdouble__6_vint____2_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_deathcount_draw_killcount_Match_time_m_p_time_m__t__n_Playe1_isDone = false;
					this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_draw_killcount_Match_time_m_p_time_3_isDone = false;
					this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerInTeam_Init_deathcount_draw_killcount_Match12_isDone = false;
					this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_Init_deathcount_draw_killcount_Match_ti9_isDone = false;
					this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathcount_draw_kil10_isDone = false;
					this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathc11_isDone = false;
					this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_I13_isDone = false;
					this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_q14_isDone = false;
				}
				this.Changed_numberOfIterations_PlayerIndex_PlayerInTeam_vdouble__20_vdouble__6_vint____2_isDone = false;
				this.Changed_deathcount_draw_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerI4_isDone = false;
			}
			this.Changed_vdouble__20();
			this.Changed_vdouble__6();
			this.Changed_vint____2();
			this.Changed_PlayerInTeam_quit();
			this.Changed_Match_time_m();
			this.Changed_deathcount_PlayerInTeam();
			this.Changed_killcount_PlayerInTeam();
			this.Changed_PlayerIndex();
			this.Changed_draw();
			this.Changed_draw_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_Playe6(initialise);
			this.Constant();
			this.Changed_numberOfIterationsDecreased_Init_PlayerIndex_PlayerInTeam_vdouble__20_vdouble__6_vint____2(initialise);
			this.Changed_numberOfIterations_PlayerIndex_PlayerInTeam_vdouble__20_vdouble__6_vint____2(numberOfIterations);
			this.Changed_PlayerInTeam();
			this.Changed_p_time_m__t__n_PlayerInTeam();
			this.Changed_Match_time_m_p_time_m__t__n_PlayerInTeam();
			this.Changed_numberOfIterationsDecreased_Init_deathcount_draw_killcount_Match_time_m_p_time_m__t__n_Playe1(initialise);
			this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_draw_killcount_Match_time_m_p_time_3(initialise);
			this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerInTeam_Init_deathcount_draw_killcount_Match12(initialise);
			this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_Init_deathcount_draw_killcount_Match_ti9(initialise);
			this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathcount_draw_kil10(initialise);
			this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_Init_deathc11(initialise);
			this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_I13(initialise);
			this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_q14(initialise);
			this.Changed_deathcount_draw_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerI4(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="PlayerInTeam") {
				return this.PlayerInTeam;
			}
			if (variableName=="PlayerIndex") {
				return this.PlayerIndex;
			}
			if (variableName=="killcount") {
				return this.killcount;
			}
			if (variableName=="deathcount") {
				return this.deathcount;
			}
			if (variableName=="draw") {
				return this.draw;
			}
			if (variableName=="Match_time_m") {
				return this.Match_time_m;
			}
			if (variableName=="p_time_m__t__n") {
				return this.p_time_m__t__n;
			}
			if (variableName=="quit") {
				return this.quit;
			}
			if (variableName=="vint____2") {
				return this.vint____2;
			}
			if (variableName=="vdouble__6") {
				return this.vdouble__6;
			}
			if (variableName=="vdouble__20") {
				return this.vdouble__20;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'killcount' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> KillcountMarginal()
		{
			return this.killcount_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'm0' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian M0Marginal()
		{
			return this.m0_marginal_F;
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="vdouble__20") {
				return this.Vdouble__20Marginal();
			}
			if (variableName=="vdouble__22") {
				return this.Vdouble__22Marginal();
			}
			if (variableName=="vdouble__6") {
				return this.Vdouble__6Marginal();
			}
			if (variableName=="vint____2") {
				return this.Vint____2Marginal();
			}
			if (variableName=="quit") {
				return this.QuitMarginal();
			}
			if (variableName=="Match_time_m") {
				return this.Match_time_mMarginal();
			}
			if (variableName=="deathcount") {
				return this.DeathcountMarginal();
			}
			if (variableName=="killcount") {
				return this.KillcountMarginal();
			}
			if (variableName=="PlayerIndex") {
				return this.PlayerIndexMarginal();
			}
			if (variableName=="draw") {
				return this.DrawMarginal();
			}
			if (variableName=="_gamma") {
				return this._gammaMarginal();
			}
			if (variableName=="PlayerInTeam") {
				return this.PlayerInTeamMarginal();
			}
			if (variableName=="p_time_m__t__n") {
				return this.P_time_m__t__nMarginal();
			}
			if (variableName=="skills") {
				return this.SkillsMarginal();
			}
			if (variableName=="m0") {
				return this.M0Marginal();
			}
			if (variableName=="p0") {
				return this.P0Marginal();
			}
			if (variableName=="Epsilon") {
				return this.EpsilonMarginal();
			}
			if (variableName=="_w_k_p") {
				return this._w_k_pMarginal();
			}
			if (variableName=="_w_k_o") {
				return this._w_k_oMarginal();
			}
			if (variableName=="vdouble23") {
				return this.Vdouble23Marginal();
			}
			if (variableName=="_w_d_p") {
				return this._w_d_pMarginal();
			}
			if (variableName=="vdouble28") {
				return this.Vdouble28Marginal();
			}
			if (variableName=="_w_d_o") {
				return this._w_d_oMarginal();
			}
			if (variableName=="_v_c") {
				return this._v_cMarginal();
			}
			if (variableName=="_m_q") {
				return this._m_qMarginal();
			}
			if (variableName=="_v_q") {
				return this._v_qMarginal();
			}
			if (variableName=="vdouble41") {
				return this.Vdouble41Marginal();
			}
			if (variableName=="vdouble42") {
				return this.Vdouble42Marginal();
			}
			if (variableName=="vbool3") {
				return this.Vbool3Marginal();
			}
			if (variableName=="vbool4") {
				return this.Vbool4Marginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		/// <summary>
		/// Returns the marginal distribution for 'Match_time_m' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Match_time_mMarginal()
		{
			return this.Match_time_m_marginal_F;
		}

		private void OnMessageUpdated(MessageUpdatedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<MessageUpdatedEventArgs> handler = this.MessageUpdated;
			if (handler!=null) {
				handler(this, e);
			}
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>
		/// Returns the marginal distribution for 'p_time_m__t__n' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> P_time_m__t__nMarginal()
		{
			return this.p_time_m__t__n_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'p0' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gamma P0Marginal()
		{
			return this.p0_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'PlayerIndex' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[][][]> PlayerIndexMarginal()
		{
			return this.PlayerIndex_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'PlayerInTeam' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[][]> PlayerInTeamMarginal()
		{
			return this.PlayerInTeam_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'quit' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]> QuitMarginal()
		{
			return this.quit_marginal_F;
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="PlayerInTeam") {
				this.PlayerInTeam = (int[][])value;
				return ;
			}
			if (variableName=="PlayerIndex") {
				this.PlayerIndex = (int[][][])value;
				return ;
			}
			if (variableName=="killcount") {
				this.killcount = (double[][][])value;
				return ;
			}
			if (variableName=="deathcount") {
				this.deathcount = (double[][][])value;
				return ;
			}
			if (variableName=="draw") {
				this.draw = (int[])value;
				return ;
			}
			if (variableName=="Match_time_m") {
				this.Match_time_m = (double[])value;
				return ;
			}
			if (variableName=="p_time_m__t__n") {
				this.p_time_m__t__n = (double[][][])value;
				return ;
			}
			if (variableName=="quit") {
				this.quit = (bool[][][])value;
				return ;
			}
			if (variableName=="vint____2") {
				this.vint____2 = (int[][])value;
				return ;
			}
			if (variableName=="vdouble__6") {
				this.vdouble__6 = (double[])value;
				return ;
			}
			if (variableName=="vdouble__20") {
				this.vdouble__20 = (double[])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'skills' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> SkillsMarginal()
		{
			return this.skills_marginal_F;
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool3' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool3Marginal()
		{
			return this.vbool3_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool4' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool4Marginal()
		{
			return this.vbool4_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__20' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__20Marginal()
		{
			return this.vdouble__20_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__22' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__22Marginal()
		{
			return this.vdouble__22_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__6' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__6Marginal()
		{
			return this.vdouble__6_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble23' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble23Marginal()
		{
			return this.vdouble23_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble28' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble28Marginal()
		{
			return this.vdouble28_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble41' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Beta Vdouble41Marginal()
		{
			return this.vdouble41_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble42' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Beta Vdouble42Marginal()
		{
			return this.vdouble42_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vint____2' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[][]> Vint____2Marginal()
		{
			return this.vint____2_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		/// <summary>Event that is fired when a message that is being monitored is updated.</summary>
		public event EventHandler<MessageUpdatedEventArgs> MessageUpdated;
		#endregion

	}

}
