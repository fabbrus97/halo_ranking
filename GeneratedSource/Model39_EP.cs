// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;
using Microsoft.ML.Probabilistic.Collections;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.4.2203.202 at 17:05 on venerd√¨ 24 giugno 2022.
	/// </remarks>
	public partial class Model39_EP : IGeneratedAlgorithm
	{
		#region Fields
		public double[][] Avg_play_time_team_reduced;
		/// <summary>True if Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam1 has executed. Set this to false to force re-execution of Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam1</summary>
		public bool Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam1_isDone;
		/// <summary>True if Changed_deathcount_PlayerInTeam has executed. Set this to false to force re-execution of Changed_deathcount_PlayerInTeam</summary>
		public bool Changed_deathcount_PlayerInTeam_isDone;
		/// <summary>True if Changed_killcount_PlayerInTeam has executed. Set this to false to force re-execution of Changed_killcount_PlayerInTeam</summary>
		public bool Changed_killcount_PlayerInTeam_isDone;
		/// <summary>True if Changed_Match_time_m has executed. Set this to false to force re-execution of Changed_Match_time_m</summary>
		public bool Changed_Match_time_m_isDone;
		/// <summary>True if Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl11 has executed. Set this to false to force re-execution of Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl11</summary>
		public bool Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl11_isDone;
		/// <summary>True if Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl11 has performed initialisation. Set this to false to force re-execution of Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl11</summary>
		public bool Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl11_isInitialised;
		/// <summary>True if Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__3410 has executed. Set this to false to force re-execution of Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__3410</summary>
		public bool Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__3410_isDone;
		/// <summary>True if Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__3410 has performed initialisation. Set this to false to force re-execution of Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__3410</summary>
		public bool Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__3410_isInitialised;
		/// <summary>True if Changed_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__345 has executed. Set this to false to force re-execution of Changed_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__345</summary>
		public bool Changed_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__345_isDone;
		/// <summary>True if Changed_Match_time_m_p_time_m__t__n_PlayerInTeam has executed. Set this to false to force re-execution of Changed_Match_time_m_p_time_m__t__n_PlayerInTeam</summary>
		public bool Changed_Match_time_m_p_time_m__t__n_PlayerInTeam_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde9 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde9</summary>
		public bool Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde9_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde9 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde9</summary>
		public bool Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde9_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5</summary>
		public bool Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5</summary>
		public bool Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5_isInitialised;
		/// <summary>True if Changed_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__345 has executed. Set this to false to force re-execution of Changed_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__345</summary>
		public bool Changed_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__345_isDone;
		/// <summary>True if Changed_p_time_m__t__n_PlayerInTeam has executed. Set this to false to force re-execution of Changed_p_time_m__t__n_PlayerInTeam</summary>
		public bool Changed_p_time_m__t__n_PlayerInTeam_isDone;
		/// <summary>True if Changed_PlayerIndex has executed. Set this to false to force re-execution of Changed_PlayerIndex</summary>
		public bool Changed_PlayerIndex_isDone;
		/// <summary>True if Changed_PlayerIndex_PlayerInTeam_vdouble__345 has executed. Set this to false to force re-execution of Changed_PlayerIndex_PlayerInTeam_vdouble__345</summary>
		public bool Changed_PlayerIndex_PlayerInTeam_vdouble__345_isDone;
		/// <summary>True if Changed_PlayerInTeam has executed. Set this to false to force re-execution of Changed_PlayerInTeam</summary>
		public bool Changed_PlayerInTeam_isDone;
		/// <summary>True if Changed_PlayerInTeam_quit has executed. Set this to false to force re-execution of Changed_PlayerInTeam_quit</summary>
		public bool Changed_PlayerInTeam_quit_isDone;
		/// <summary>True if Changed_PlayerInTeam_time_passed has executed. Set this to false to force re-execution of Changed_PlayerInTeam_time_passed</summary>
		public bool Changed_PlayerInTeam_time_passed_isDone;
		/// <summary>True if Changed_skills__gamma_ has executed. Set this to false to force re-execution of Changed_skills__gamma_</summary>
		public bool Changed_skills__gamma__isDone;
		/// <summary>True if Changed_skills__tau_ has executed. Set this to false to force re-execution of Changed_skills__tau_</summary>
		public bool Changed_skills__tau__isDone;
		/// <summary>True if Changed_team2wins has executed. Set this to false to force re-execution of Changed_team2wins</summary>
		public bool Changed_team2wins_isDone;
		/// <summary>True if Changed_vbool__53 has executed. Set this to false to force re-execution of Changed_vbool__53</summary>
		public bool Changed_vbool__53_isDone;
		/// <summary>True if Changed_vdouble__340 has executed. Set this to false to force re-execution of Changed_vdouble__340</summary>
		public bool Changed_vdouble__340_isDone;
		/// <summary>True if Changed_vdouble__345 has executed. Set this to false to force re-execution of Changed_vdouble__345</summary>
		public bool Changed_vdouble__345_isDone;
		/// <summary>True if Changed_vint____54 has executed. Set this to false to force re-execution of Changed_vint____54</summary>
		public bool Changed_vint____54_isDone;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		/// <summary>Field backing the deathcount property</summary>
		private double[][][] Deathcount;
		/// <summary>Message to marginal of 'deathcount'</summary>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> deathcount_marginal_F;
		/// <summary>Field backing the killcount property</summary>
		private double[][][] Killcount;
		/// <summary>Message to marginal of 'killcount'</summary>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> killcount_marginal_F;
		/// <summary>Field backing the Match_time_m property</summary>
		private double[] match_time_m;
		/// <summary>Message to marginal of 'Match_time_m'</summary>
		public DistributionStructArray<Gaussian,double> Match_time_m_marginal_F;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Field backing the p_time_m__t__n property</summary>
		private double[][][] P_time_m__t__n;
		/// <summary>Message to marginal of 'p_time_m__t__n'</summary>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> p_time_m__t__n_marginal_F;
		public Gaussian[][][] perf_from_ds_F;
		public Gaussian[][][] perf_n_m_F;
		public Gaussian[][][] Perfomance_opposing_team_0__F;
		public Gaussian[][][] Perfomance_opposing_team_1__F;
		public Gaussian[][][] Perfomance_opposing_team_F;
		/// <summary>Messages from uses of 'Perfomance_opposing_team'</summary>
		public Gaussian[][][][] Perfomance_opposing_team_uses_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Gaussian&gt;</summary>
		public Gaussian[][][] Perfomance_opposing_team_uses_B_toDef;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Gaussian&gt;</summary>
		public Gaussian[][][] Perfomance_opposing_team_uses_B_toDef2;
		/// <summary>Messages to uses of 'Perfomance_opposing_team'</summary>
		public Gaussian[][][][] Perfomance_opposing_team_uses_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Gaussian&gt;</summary>
		public Gaussian[][][] Perfomance_opposing_team_uses_F_marginal;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Gaussian&gt;</summary>
		public Gaussian[][][] Perfomance_opposing_team_uses_F_marginal2;
		public DistributionStructArray<Gaussian,double>[][][] player_perf_t__n_0_0__B;
		public DistributionStructArray<Gaussian,double>[][][] player_perf_t__n_1_1__B;
		public DistributionStructArray<Gaussian,double>[][] player_perf_t__n_depth1_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>[] player_perf_t__n_F;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;DistributionStructArray&lt;Gaussian, double&gt;&gt;</summary>
		public DistributionStructArray<Gaussian,double>[][] player_perf_t__n_item0_rep_B_toDef;
		public DistributionStructArray<Gaussian,double>[][][] player_perf_t__n_item0_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;DistributionStructArray&lt;Gaussian, double&gt;&gt;</summary>
		public DistributionStructArray<Gaussian,double>[][] player_perf_t__n_item0_rep_F_marginal;
		/// <summary>Messages from uses of 'player_perf_t__n_item0'</summary>
		public DistributionStructArray<Gaussian,double>[][] player_perf_t__n_item0_uses_B;
		/// <summary>Messages to uses of 'player_perf_t__n_item0'</summary>
		public DistributionStructArray<Gaussian,double>[][] player_perf_t__n_item0_uses_F;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;DistributionStructArray&lt;Gaussian, double&gt;&gt;</summary>
		public DistributionStructArray<Gaussian,double>[][] player_perf_t__n_item1_rep_B_toDef;
		/// <summary>Messages from uses of 'player_perf_t__n_item1'</summary>
		public DistributionStructArray<Gaussian,double>[][] player_perf_t__n_item1_uses_B;
		/// <summary>Messages to uses of 'player_perf_t__n_item1'</summary>
		public DistributionStructArray<Gaussian,double>[][] player_perf_t__n_item1_uses_F;
		/// <summary>Messages from uses of 'player_perf_t__n'</summary>
		public Gaussian[][][][] player_perf_t__n_uses_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Gaussian&gt;</summary>
		public Gaussian[][][] player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef;
		/// <summary>Messages to uses of 'player_perf_t__n'</summary>
		public Gaussian[][][][] player_perf_t__n_uses_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Gaussian&gt;</summary>
		public Gaussian[][][] player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal;
		/// <summary>Field backing the PlayerIndex property</summary>
		private int[][][] playerIndex;
		/// <summary>Message to marginal of 'PlayerIndex'</summary>
		public PointMass<int[][][]> PlayerIndex_marginal_F;
		/// <summary>Field backing the PlayerInTeam property</summary>
		private int[][] playerInTeam;
		/// <summary>Message to marginal of 'PlayerInTeam'</summary>
		public PointMass<int[][]> PlayerInTeam_marginal_F;
		/// <summary>Field backing the quit property</summary>
		private bool[][][] Quit;
		/// <summary>Message to marginal of 'quit'</summary>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]> quit_marginal_F;
		/// <summary>Field backing the skills__gamma_ property</summary>
		private double[] Skills__gamma_;
		/// <summary>Message to marginal of 'skills__gamma_'</summary>
		public DistributionStructArray<Gaussian,double> skills__gamma__marginal_F;
		/// <summary>Field backing the skills__tau_ property</summary>
		private double[] Skills__tau_;
		/// <summary>Message to marginal of 'skills__tau_'</summary>
		public DistributionStructArray<Gaussian,double> skills__tau__marginal_F;
		/// <summary>Field backing the team2wins property</summary>
		private int[] Team2wins;
		/// <summary>Message to marginal of 'team2wins'</summary>
		public PointMass<int[]> team2wins_marginal_F;
		/// <summary>Field backing the time_passed property</summary>
		private double[][][] Time_passed;
		/// <summary>Message to marginal of 'time_passed'</summary>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> time_passed_marginal_F;
		public Bernoulli[][][] Under_performing_B;
		public Bernoulli[][][] Under_performing_F;
		/// <summary>The constant 'vBernoulli26'</summary>
		public Bernoulli vBernoulli26;
		/// <summary>The constant 'vBernoulli27'</summary>
		public Bernoulli vBernoulli27;
		/// <summary>Field backing the vbool__53 property</summary>
		private bool[] Vbool__53;
		/// <summary>Message to marginal of 'vbool__53'</summary>
		public DistributionStructArray<Bernoulli,bool> vbool__53_marginal_F;
		/// <summary>Message to marginal of 'vbool197'</summary>
		public Bernoulli vbool197_marginal_F;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Bernoulli&gt;</summary>
		public Bernoulli vbool197_rep_B_toDef;
		public Bernoulli[] vbool197_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Bernoulli&gt;</summary>
		public Bernoulli vbool197_rep_F_marginal;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Bernoulli&gt;</summary>
		public Bernoulli[] vbool197_rep_rep_B_toDef;
		public Bernoulli[][] vbool197_rep_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Bernoulli&gt;</summary>
		public Bernoulli[] vbool197_rep_rep_F_marginal;
		public Bernoulli[][][] vbool197_rep_rep_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Bernoulli&gt;</summary>
		public Bernoulli[][] vbool197_rep_rep_rep_B_toDef;
		public Bernoulli[][][] vbool197_rep_rep_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Bernoulli&gt;</summary>
		public Bernoulli[][] vbool197_rep_rep_rep_F_marginal;
		/// <summary>Message to marginal of 'vbool198'</summary>
		public Bernoulli vbool198_marginal_F;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Bernoulli&gt;</summary>
		public Bernoulli vbool198_rep_B_toDef;
		public Bernoulli[] vbool198_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Bernoulli&gt;</summary>
		public Bernoulli vbool198_rep_F_marginal;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Bernoulli&gt;</summary>
		public Bernoulli[] vbool198_rep_rep_B_toDef;
		public Bernoulli[][] vbool198_rep_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Bernoulli&gt;</summary>
		public Bernoulli[] vbool198_rep_rep_F_marginal;
		public Bernoulli[][][] vbool198_rep_rep_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Bernoulli&gt;</summary>
		public Bernoulli[][] vbool198_rep_rep_rep_B_toDef;
		public Bernoulli[][][] vbool198_rep_rep_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Bernoulli&gt;</summary>
		public Bernoulli[][] vbool198_rep_rep_rep_F_marginal;
		public Bernoulli[][][] vbool201_B;
		public Bernoulli[][][] vbool201_F;
		/// <summary>Field backing the vdouble__340 property</summary>
		private double[] Vdouble__340;
		/// <summary>Message to marginal of 'vdouble__340'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__340_marginal_F;
		/// <summary>Field backing the vdouble__345 property</summary>
		private double[] Vdouble__345;
		/// <summary>Message to marginal of 'vdouble__345'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__345_marginal_F;
		public double[][] vdouble1202_reduced;
		public double[][] vdouble1209_reduced;
		public double[][] vdouble1210_reduced;
		public Gaussian[][][] vdouble1211_F;
		public Gaussian[][][] vdouble1212_F;
		public Gaussian[][][] vdouble1222_F;
		public Gaussian[][][] vdouble1232_F;
		public Gaussian[][][] vdouble1239_B;
		public Gaussian[][][] vdouble1239_F;
		public Gaussian[][][] vdouble1241_B;
		public Gaussian[][][] vdouble1241_F;
		public Gaussian[][][] vdouble1243_F;
		/// <summary>Message from use of 'vdouble1243'</summary>
		public Gaussian[][][] vdouble1243_use_B;
		public Gaussian[][][] vdouble1245_B;
		public Gaussian[][][] vdouble1245_F;
		/// <summary>Field backing the vint____54 property</summary>
		private int[][] Vint____54;
		/// <summary>Message to marginal of 'vint____54'</summary>
		public PointMass<int[][]> vint____54_marginal_F;
		#endregion

		#region Properties
		/// <summary>The externally-specified value of 'deathcount'</summary>
		public double[][][] deathcount
		{
			get {
				return this.Deathcount;
			}
			set {
				if ((value!=null)&&(value.Length!=1000)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+1000)+" was expected for variable \'deathcount\'");
				}
				this.Deathcount = value;
				this.numberOfIterationsDone = 0;
				this.Changed_deathcount_PlayerInTeam_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5_isInitialised = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__3410_isInitialised = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl11_isInitialised = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam1_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'killcount'</summary>
		public double[][][] killcount
		{
			get {
				return this.Killcount;
			}
			set {
				if ((value!=null)&&(value.Length!=1000)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+1000)+" was expected for variable \'killcount\'");
				}
				this.Killcount = value;
				this.numberOfIterationsDone = 0;
				this.Changed_killcount_PlayerInTeam_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5_isInitialised = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__3410_isInitialised = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl11_isInitialised = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam1_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'Match_time_m'</summary>
		public double[] Match_time_m
		{
			get {
				return this.match_time_m;
			}
			set {
				if ((value!=null)&&(value.Length!=1000)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+1000)+" was expected for variable \'Match_time_m\'");
				}
				this.match_time_m = value;
				this.numberOfIterationsDone = 0;
				this.Changed_Match_time_m_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde9_isInitialised = false;
				this.Changed_Match_time_m_p_time_m__t__n_PlayerInTeam_isDone = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5_isInitialised = false;
				this.Changed_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__345_isDone = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__3410_isDone = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl11_isDone = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam1_isDone = false;
			}
		}

		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'p_time_m__t__n'</summary>
		public double[][][] p_time_m__t__n
		{
			get {
				return this.P_time_m__t__n;
			}
			set {
				if ((value!=null)&&(value.Length!=1000)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+1000)+" was expected for variable \'p_time_m__t__n\'");
				}
				this.P_time_m__t__n = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde9_isInitialised = false;
				this.Changed_p_time_m__t__n_PlayerInTeam_isDone = false;
				this.Changed_Match_time_m_p_time_m__t__n_PlayerInTeam_isDone = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5_isInitialised = false;
				this.Changed_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__345_isDone = false;
				this.Changed_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__345_isDone = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__3410_isDone = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl11_isDone = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam1_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'PlayerIndex'</summary>
		public int[][][] PlayerIndex
		{
			get {
				return this.playerIndex;
			}
			set {
				if ((value!=null)&&(value.Length!=1000)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+1000)+" was expected for variable \'PlayerIndex\'");
				}
				this.playerIndex = value;
				this.numberOfIterationsDone = 0;
				this.Changed_PlayerIndex_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5_isInitialised = false;
				this.Changed_PlayerIndex_PlayerInTeam_vdouble__345_isDone = false;
				this.Changed_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__345_isDone = false;
				this.Changed_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__345_isDone = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__3410_isDone = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl11_isDone = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam1_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'PlayerInTeam'</summary>
		public int[][] PlayerInTeam
		{
			get {
				return this.playerInTeam;
			}
			set {
				if ((value!=null)&&(value.Length!=1000)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+1000)+" was expected for variable \'PlayerInTeam\'");
				}
				this.playerInTeam = value;
				this.numberOfIterationsDone = 0;
				this.Changed_PlayerInTeam_time_passed_isDone = false;
				this.Changed_PlayerInTeam_quit_isDone = false;
				this.Changed_deathcount_PlayerInTeam_isDone = false;
				this.Changed_killcount_PlayerInTeam_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde9_isInitialised = false;
				this.Changed_PlayerInTeam_isDone = false;
				this.Changed_p_time_m__t__n_PlayerInTeam_isDone = false;
				this.Changed_Match_time_m_p_time_m__t__n_PlayerInTeam_isDone = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5_isDone = false;
				this.Changed_PlayerIndex_PlayerInTeam_vdouble__345_isDone = false;
				this.Changed_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__345_isDone = false;
				this.Changed_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__345_isDone = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__3410_isDone = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl11_isDone = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam1_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'quit'</summary>
		public bool[][][] quit
		{
			get {
				return this.Quit;
			}
			set {
				if ((value!=null)&&(value.Length!=1000)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+1000)+" was expected for variable \'quit\'");
				}
				this.Quit = value;
				this.numberOfIterationsDone = 0;
				this.Changed_PlayerInTeam_quit_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5_isInitialised = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__3410_isInitialised = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl11_isDone = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam1_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'skills__gamma_'</summary>
		public double[] skills__gamma_
		{
			get {
				return this.Skills__gamma_;
			}
			set {
				if ((value!=null)&&(value.Length!=7097)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+7097)+" was expected for variable \'skills__gamma_\'");
				}
				this.Skills__gamma_ = value;
				this.numberOfIterationsDone = 0;
				this.Changed_skills__gamma__isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'skills__tau_'</summary>
		public double[] skills__tau_
		{
			get {
				return this.Skills__tau_;
			}
			set {
				if ((value!=null)&&(value.Length!=7097)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+7097)+" was expected for variable \'skills__tau_\'");
				}
				this.Skills__tau_ = value;
				this.numberOfIterationsDone = 0;
				this.Changed_skills__tau__isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'team2wins'</summary>
		public int[] team2wins
		{
			get {
				return this.Team2wins;
			}
			set {
				if ((value!=null)&&(value.Length!=1000)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+1000)+" was expected for variable \'team2wins\'");
				}
				this.Team2wins = value;
				this.numberOfIterationsDone = 0;
				this.Changed_team2wins_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5_isInitialised = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__3410_isInitialised = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl11_isInitialised = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam1_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'time_passed'</summary>
		public double[][][] time_passed
		{
			get {
				return this.Time_passed;
			}
			set {
				if ((value!=null)&&(value.Length!=1000)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+1000)+" was expected for variable \'time_passed\'");
				}
				this.Time_passed = value;
				this.numberOfIterationsDone = 0;
				this.Changed_PlayerInTeam_time_passed_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vbool__53'</summary>
		public bool[] vbool__53
		{
			get {
				return this.Vbool__53;
			}
			set {
				if ((value!=null)&&(value.Length!=7097)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+7097)+" was expected for variable \'vbool__53\'");
				}
				this.Vbool__53 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vbool__53_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vdouble__340'</summary>
		public double[] vdouble__340
		{
			get {
				return this.Vdouble__340;
			}
			set {
				if ((value!=null)&&(value.Length!=200)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+200)+" was expected for variable \'vdouble__340\'");
				}
				this.Vdouble__340 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vdouble__340_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vdouble__345'</summary>
		public double[] vdouble__345
		{
			get {
				return this.Vdouble__345;
			}
			set {
				if ((value!=null)&&(value.Length!=7097)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+7097)+" was expected for variable \'vdouble__345\'");
				}
				this.Vdouble__345 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vdouble__345_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5_isInitialised = false;
				this.Changed_PlayerIndex_PlayerInTeam_vdouble__345_isDone = false;
				this.Changed_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__345_isDone = false;
				this.Changed_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__345_isDone = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__3410_isDone = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl11_isDone = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam1_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vint____54'</summary>
		public int[][] vint____54
		{
			get {
				return this.Vint____54;
			}
			set {
				if ((value!=null)&&(value.Length!=7097)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+7097)+" was expected for variable \'vint____54\'");
				}
				this.Vint____54 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vint____54_isDone = false;
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of deathcount and killcount and Match_time_m and numberOfIterations and p_time_m__t__n and PlayerIndex and PlayerInTeam and quit and team2wins and vdouble__345</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam1(int numberOfIterations)
		{
			if (this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam1_isDone) {
				return ;
			}
			this.vbool197_marginal_F = Bernoulli.Uniform();
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'player_perf_t__n_item1_uses' Forwards messages.
				this.player_perf_t__n_item1_uses_F[nMatches][1] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][1]);
				for(int _a4 = 0; _a4<this.playerInTeam[nMatches][1]; _a4++) {
					this.player_perf_t__n_item1_uses_F[nMatches][1][_a4] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'SumTeam2_F'
			Gaussian[] SumTeam2_F = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				SumTeam2_F[nMatches] = Gaussian.Uniform();
				// Create array for 'player_perf_t__n_item0_uses' Forwards messages.
				this.player_perf_t__n_item0_uses_F[nMatches][1] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][0]);
				for(int _a3 = 0; _a3<this.playerInTeam[nMatches][0]; _a3++) {
					this.player_perf_t__n_item0_uses_F[nMatches][1][_a3] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'SumTeam1_F'
			Gaussian[] SumTeam1_F = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				SumTeam1_F[nMatches] = Gaussian.Uniform();
			}
			// Create array for replicates of 'Diff_F'
			Gaussian[] Diff_F = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				Diff_F[nMatches] = Gaussian.Uniform();
			}
			// Create array for replicates of 'Diff_2__B'
			Gaussian[] Diff_2__B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					Diff_2__B[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'Diff_B'
			Gaussian[] Diff_B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				Diff_B[nMatches] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble1252_F'
			Gaussian[] vdouble1252_F = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Team2wins[nMatches]==0) {
					vdouble1252_F[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble1252_B'
			Gaussian[] vdouble1252_B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Team2wins[nMatches]==0) {
					vdouble1252_B[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'Diff_0__B'
			Gaussian[] Diff_0__B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Team2wins[nMatches]==0) {
					Diff_0__B[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble1254_F'
			Gaussian[] vdouble1254_F = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Team2wins[nMatches]==1) {
					vdouble1254_F[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble1254_B'
			Gaussian[] vdouble1254_B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Team2wins[nMatches]==1) {
					vdouble1254_B[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'Diff_1__B'
			Gaussian[] Diff_1__B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Team2wins[nMatches]==1) {
					Diff_1__B[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'SumTeam2_B'
			Gaussian[] SumTeam2_B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				SumTeam2_B[nMatches] = Gaussian.Uniform();
				// Create array for 'player_perf_t__n_item1_uses' Backwards messages.
				this.player_perf_t__n_item1_uses_B[nMatches][1] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][1]);
				for(int _a4 = 0; _a4<this.playerInTeam[nMatches][1]; _a4++) {
					this.player_perf_t__n_item1_uses_B[nMatches][1][_a4] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'player_perf_t__n_item1_rep_F_marginal'
			DistributionStructArray<Gaussian,double>[][] player_perf_t__n_item1_rep_F_marginal = new DistributionStructArray<Gaussian,double>[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'player_perf_t__n_item1_rep_F_marginal'
				player_perf_t__n_item1_rep_F_marginal[nMatches] = new DistributionStructArray<Gaussian,double>[2];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					if (nTeamsPerMatch==1) {
						player_perf_t__n_item1_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.MarginalInit<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item1_uses_F[nMatches][0]);
					}
				}
			}
			// Create array for replicates of 'player_perf_t__n_item1_rep_F'
			DistributionStructArray<Gaussian,double>[][][] player_perf_t__n_item1_rep_F = new DistributionStructArray<Gaussian,double>[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'player_perf_t__n_item1_rep_F'
				player_perf_t__n_item1_rep_F[nMatches] = new DistributionStructArray<Gaussian,double>[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					if (nTeamsPerMatch==1) {
						// Create array for 'player_perf_t__n_item1_rep' Forwards messages.
						player_perf_t__n_item1_rep_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>[this.playerInTeam[nMatches][nTeamsPerMatch]];
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Create array for 'player_perf_t__n_item1_rep' Forwards messages.
							player_perf_t__n_item1_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][1]);
							for(int _a4 = 0; _a4<this.playerInTeam[nMatches][1]; _a4++) {
								player_perf_t__n_item1_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][_a4] = Gaussian.Uniform();
							}
						}
					}
				}
			}
			// Create array for replicates of 'vdouble1216_F'
			Gaussian[][][] vdouble1216_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble1216_F'
				vdouble1216_F[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble1216_F'
					vdouble1216_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						if (nTeamsPerMatch==1) {
							vdouble1216_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						}
					}
				}
			}
			double[][] vdouble1214_reduced = new double[1000][];
			double[][] vdouble1215_reduced = new double[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				vdouble1214_reduced[nMatches] = new double[2];
				vdouble1215_reduced[nMatches] = new double[2];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					vdouble1214_reduced[nMatches][nTeamsPerMatch] = default(double);
					vdouble1215_reduced[nMatches][nTeamsPerMatch] = default(double);
					if (this.playerInTeam[nMatches][nTeamsPerMatch]>0) {
						if (nTeamsPerMatch==1) {
							vdouble1214_reduced[nMatches][nTeamsPerMatch] = Factor.Sum(this.P_time_m__t__n[nMatches][0]);
							vdouble1215_reduced[nMatches][nTeamsPerMatch] = Factor.Ratio(vdouble1214_reduced[nMatches][nTeamsPerMatch], this.match_time_m[nMatches]);
						}
					}
				}
			}
			// Create array for replicates of 'vdouble1217_F'
			Gaussian[][][] vdouble1217_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble1217_F'
				vdouble1217_F[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble1217_F'
					vdouble1217_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						if (nTeamsPerMatch==1) {
							vdouble1217_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						}
					}
				}
			}
			// Create array for replicates of 'vc_Times_p_time'
			double[][][] vc_Times_p_time = new double[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vc_Times_p_time'
				vc_Times_p_time[nMatches] = new double[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vc_Times_p_time'
					vc_Times_p_time[nMatches][nTeamsPerMatch] = new double[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vc_Times_p_time[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Factor.Product(1.0000000000000001E-05, this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
					}
				}
			}
			// Create array for replicates of 'vdouble1233_F'
			Gaussian[][][] vdouble1233_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble1233_F'
				vdouble1233_F[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble1233_F'
					vdouble1233_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble1233_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble1234_F'
			Gaussian[][][] vdouble1234_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble1234_F'
				vdouble1234_F[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble1234_F'
					vdouble1234_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble1234_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble1236_F'
			Gaussian[][][] vdouble1236_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble1236_F'
				vdouble1236_F[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble1236_F'
					vdouble1236_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble1236_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble1236_use_B'
			Gaussian[][][] vdouble1236_use_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble1236_use_B'
				vdouble1236_use_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble1236_use_B'
					vdouble1236_use_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble1236_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble1234_B'
			Gaussian[][][] vdouble1234_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble1234_B'
				vdouble1234_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble1234_B'
					vdouble1234_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble1234_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble1233_B'
			Gaussian[][][] vdouble1233_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble1233_B'
				vdouble1233_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble1233_B'
					vdouble1233_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble1233_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble1230_B'
			Gaussian[][][] vdouble1230_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble1230_B'
				vdouble1230_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble1230_B'
					vdouble1230_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble1230_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = Gaussian.Uniform();
						this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble1230_F'
			Gaussian[][][] vdouble1230_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble1230_F'
				vdouble1230_F[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble1230_F'
					vdouble1230_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble1230_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble1232_B'
			Gaussian[][][] vdouble1232_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble1232_B'
				vdouble1232_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble1232_B'
					vdouble1232_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble1232_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble1223_F'
			Gaussian[][][] vdouble1223_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble1223_F'
				vdouble1223_F[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble1223_F'
					vdouble1223_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble1223_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'death_count_m__t__n_F'
			Gaussian[][][] death_count_m__t__n_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'death_count_m__t__n_F'
				death_count_m__t__n_F[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'death_count_m__t__n_F'
					death_count_m__t__n_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						death_count_m__t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble1226_F'
			Gaussian[][][] vdouble1226_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble1226_F'
				vdouble1226_F[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble1226_F'
					vdouble1226_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble1226_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble1226_use_B'
			Gaussian[][][] vdouble1226_use_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble1226_use_B'
				vdouble1226_use_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble1226_use_B'
					vdouble1226_use_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble1226_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'death_count_m__t__n_B'
			Gaussian[][][] death_count_m__t__n_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'death_count_m__t__n_B'
				death_count_m__t__n_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'death_count_m__t__n_B'
					death_count_m__t__n_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						death_count_m__t__n_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble1223_B'
			Gaussian[][][] vdouble1223_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble1223_B'
				vdouble1223_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble1223_B'
					vdouble1223_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble1223_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble1220_B'
			Gaussian[][][] vdouble1220_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble1220_B'
				vdouble1220_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble1220_B'
					vdouble1220_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble1220_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble1220_F'
			Gaussian[][][] vdouble1220_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble1220_F'
				vdouble1220_F[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble1220_F'
					vdouble1220_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble1220_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble1222_B'
			Gaussian[][][] vdouble1222_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble1222_B'
				vdouble1222_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble1222_B'
					vdouble1222_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble1222_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble1217_B'
			Gaussian[][][] vdouble1217_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble1217_B'
				vdouble1217_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble1217_B'
					vdouble1217_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						if (nTeamsPerMatch==1) {
							vdouble1217_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						}
					}
				}
			}
			// Create array for replicates of 'vdouble1216_B'
			Gaussian[][][] vdouble1216_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble1216_B'
				vdouble1216_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble1216_B'
					vdouble1216_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						if (nTeamsPerMatch==1) {
							vdouble1216_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						}
					}
				}
			}
			// Create array for replicates of 'player_perf_t__n_item1_B'
			DistributionStructArray<Gaussian,double>[] player_perf_t__n_item1_B = new DistributionStructArray<Gaussian,double>[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'player_perf_t__n_item1' Backwards messages.
				player_perf_t__n_item1_B[nMatches] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][1]);
				for(int _a4 = 0; _a4<this.playerInTeam[nMatches][1]; _a4++) {
					player_perf_t__n_item1_B[nMatches][_a4] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'SumTeam1_B'
			Gaussian[] SumTeam1_B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				SumTeam1_B[nMatches] = Gaussian.Uniform();
				// Create array for 'player_perf_t__n_item0_uses' Backwards messages.
				this.player_perf_t__n_item0_uses_B[nMatches][0] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][0]);
				for(int _a3 = 0; _a3<this.playerInTeam[nMatches][0]; _a3++) {
					this.player_perf_t__n_item0_uses_B[nMatches][0][_a3] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'Perfomance_opposing_team_B'
			Gaussian[][][] Perfomance_opposing_team_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'Perfomance_opposing_team_B'
				Perfomance_opposing_team_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'Perfomance_opposing_team_B'
					Perfomance_opposing_team_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						Perfomance_opposing_team_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble1212_B'
			Gaussian[][][] vdouble1212_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble1212_B'
				vdouble1212_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble1212_B'
					vdouble1212_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						if (nTeamsPerMatch==0) {
							vdouble1212_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						}
					}
				}
			}
			// Create array for replicates of 'vdouble1211_B'
			Gaussian[][][] vdouble1211_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble1211_B'
				vdouble1211_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble1211_B'
					vdouble1211_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						if (nTeamsPerMatch==0) {
							vdouble1211_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						}
					}
				}
			}
			// Create array for replicates of 'player_perf_t__n_item0_B'
			DistributionStructArray<Gaussian,double>[] player_perf_t__n_item0_B = new DistributionStructArray<Gaussian,double>[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'player_perf_t__n_item0' Backwards messages.
				player_perf_t__n_item0_B[nMatches] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][0]);
				for(int _a3 = 0; _a3<this.playerInTeam[nMatches][0]; _a3++) {
					player_perf_t__n_item0_B[nMatches][_a3] = Gaussian.Uniform();
				}
			}
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				for(int nMatches = 0; nMatches<1000; nMatches++) {
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.Marginal<Gaussian>(this.player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'player_perf_t__n_uses' from Replicate factor
							this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3], this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 3, this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3]);
							// Message to 'vdouble1239' from Difference factor
							this.vdouble1239_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.AAverageConditional(this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3], this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2]);
							// Message to 'vdouble1241' from Difference factor
							this.vdouble1241_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.AAverageConditional(this.vdouble1239_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 15.0);
							// Message to 'vdouble1243' from Gaussian factor
							this.vdouble1243_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.SampleAverageConditional(this.vdouble1241_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0.01);
							// Message to 'vdouble1245' from Difference factor
							this.vdouble1245_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.AAverageConditional(0.0, this.vdouble1243_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'Under_performing' from IsPositive factor
							this.Under_performing_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = IsPositiveOp.IsPositiveAverageConditional(this.vdouble1245_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vbool201' from And factor
							this.vbool201_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = BooleanAndOp.AndAverageConditional(this.vbool197_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Under_performing_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vbool198_rep_rep_rep' from Or factor
							this.vbool198_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = BooleanOrOp.AAverageConditional(this.Quit[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vbool201_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						}
						this.vbool198_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool198_rep_rep_rep_B[nMatches][nTeamsPerMatch], this.vbool198_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch]);
					}
					this.vbool198_rep_rep_B_toDef[nMatches] = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool198_rep_rep_rep_B_toDef[nMatches], this.vbool198_rep_rep_B_toDef[nMatches]);
				}
				this.vbool198_rep_B_toDef = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool198_rep_rep_B_toDef, this.vbool198_rep_B_toDef);
				this.vbool198_rep_F_marginal = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool198_rep_B_toDef, this.vBernoulli27, this.vbool198_rep_F_marginal);
				for(int nMatches = 0; nMatches<1000; nMatches++) {
					// Message to 'vbool198_rep' from Replicate factor
					this.vbool198_rep_F[nMatches] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool198_rep_rep_B_toDef[nMatches], this.vbool198_rep_F_marginal, nMatches, this.vbool198_rep_F[nMatches]);
					this.vbool198_rep_rep_F_marginal[nMatches] = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool198_rep_rep_B_toDef[nMatches], this.vbool198_rep_F[nMatches], this.vbool198_rep_rep_F_marginal[nMatches]);
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						// Message to 'vbool198_rep_rep' from Replicate factor
						this.vbool198_rep_rep_F[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool198_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch], this.vbool198_rep_rep_F_marginal[nMatches], nTeamsPerMatch, this.vbool198_rep_rep_F[nMatches][nTeamsPerMatch]);
						this.vbool198_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool198_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch], this.vbool198_rep_rep_F[nMatches][nTeamsPerMatch], this.vbool198_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch]);
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Message to 'vbool198_rep_rep_rep' from Replicate factor
							this.vbool198_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool198_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vbool198_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch], nPlayersMinusPerTeam, this.vbool198_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vbool201' from Or factor
							this.vbool201_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = BooleanOrOp.BAverageConditional(this.Quit[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vbool198_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vbool197_rep_rep_rep' from And factor
							this.vbool197_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = BooleanAndOp.AAverageConditional(this.vbool201_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Under_performing_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						}
						this.vbool197_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool197_rep_rep_rep_B[nMatches][nTeamsPerMatch], this.vbool197_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch]);
					}
					this.vbool197_rep_rep_B_toDef[nMatches] = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool197_rep_rep_rep_B_toDef[nMatches], this.vbool197_rep_rep_B_toDef[nMatches]);
				}
				this.vbool197_rep_B_toDef = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool197_rep_rep_B_toDef, this.vbool197_rep_B_toDef);
				this.vbool197_rep_F_marginal = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool197_rep_B_toDef, this.vBernoulli26, this.vbool197_rep_F_marginal);
				for(int nMatches = 0; nMatches<1000; nMatches++) {
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Message to 'player_perf_t__n_uses' from Replicate factor
							this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1], this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 1, this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
							// Message to 'vdouble1220' from Product factor
							vdouble1220_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(1.1E-05, this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
							// Message to 'vdouble1223' from Plus factor
							vdouble1223_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.SumAverageConditional(vdouble1220_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble1222_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'death_count_m__t__n' from Product factor
							death_count_m__t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(vdouble1223_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble1226' from Gaussian factor
							vdouble1226_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.SampleAverageConditional(death_count_m__t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], vc_Times_p_time[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble1226_use' from Max factor
							vdouble1226_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = MaxGaussianOp.BAverageConditional(this.Killcount[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0.0, vdouble1226_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'death_count_m__t__n' from Gaussian factor
							death_count_m__t__n_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.MeanAverageConditional(vdouble1226_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], vc_Times_p_time[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble1223' from Product factor
							vdouble1223_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.AAverageConditional(death_count_m__t__n_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble1222' from Plus factor
							vdouble1222_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.BAverageConditional(vdouble1223_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], vdouble1220_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'Perfomance_opposing_team_uses' from Product factor
							this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = GaussianProductOpBase.BAverageConditional(vdouble1222_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], -9.1000000000000003E-05);
						}
					}
					// Message to 'vbool197_rep' from Replicate factor
					this.vbool197_rep_F[nMatches] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool197_rep_rep_B_toDef[nMatches], this.vbool197_rep_F_marginal, nMatches, this.vbool197_rep_F[nMatches]);
					this.vbool197_rep_rep_F_marginal[nMatches] = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool197_rep_rep_B_toDef[nMatches], this.vbool197_rep_F[nMatches], this.vbool197_rep_rep_F_marginal[nMatches]);
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						// Message to 'vbool197_rep_rep' from Replicate factor
						this.vbool197_rep_rep_F[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool197_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch], this.vbool197_rep_rep_F_marginal[nMatches], nTeamsPerMatch, this.vbool197_rep_rep_F[nMatches][nTeamsPerMatch]);
						this.vbool197_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool197_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch], this.vbool197_rep_rep_F[nMatches][nTeamsPerMatch], this.vbool197_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch]);
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Message to 'vbool197_rep_rep_rep' from Replicate factor
							this.vbool197_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool197_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vbool197_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch], nPlayersMinusPerTeam, this.vbool197_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'Under_performing' from And factor
							this.Under_performing_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = BooleanAndOp.BAverageConditional(this.vbool201_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vbool197_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble1245' from IsPositive factor
							this.vdouble1245_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = IsPositiveOp_Proper.XAverageConditional(this.Under_performing_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble1245_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble1243_use' from Difference factor
							this.vdouble1243_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.BAverageConditional(0.0, this.vdouble1245_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble1241' from Gaussian factor
							this.vdouble1241_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.MeanAverageConditional(this.vdouble1243_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0.01);
							// Message to 'vdouble1239' from Difference factor
							this.vdouble1239_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.SumAverageConditional(this.vdouble1241_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 15.0);
							// Message to 'Perfomance_opposing_team_uses' from Difference factor
							this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = DoublePlusOp.BAverageConditional(this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3], this.vdouble1239_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'player_perf_t__n_uses' from Replicate factor
							this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2], this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 2, this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2]);
							// Message to 'vdouble1230' from Product factor
							vdouble1230_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(-5.1E-05, this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2]);
							// Message to 'vdouble1233' from Plus factor
							vdouble1233_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.SumAverageConditional(vdouble1230_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble1232_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble1234' from Product factor
							vdouble1234_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(vdouble1233_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble1236' from Gaussian factor
							vdouble1236_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.SampleAverageConditional(vdouble1234_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], vc_Times_p_time[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble1236_use' from Max factor
							vdouble1236_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = MaxGaussianOp.BAverageConditional(this.Deathcount[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0.0, vdouble1236_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble1234' from Gaussian factor
							vdouble1234_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.MeanAverageConditional(vdouble1236_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], vc_Times_p_time[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble1233' from Product factor
							vdouble1233_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.AAverageConditional(vdouble1234_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble1232' from Plus factor
							vdouble1232_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.BAverageConditional(vdouble1233_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], vdouble1230_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'Perfomance_opposing_team_uses' from Product factor
							this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = GaussianProductOpBase.BAverageConditional(vdouble1232_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 9.5000000000000005E-05);
							// Message to 'player_perf_t__n_uses' from Replicate factor
							this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0], this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0, this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]);
						}
					}
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][1]; nPlayersMinusPerTeam++) {
						// Message to 'player_perf_t__n_depth1' from Copy factor
						this.player_perf_t__n_depth1_F[nMatches][1][nPlayersMinusPerTeam] = ArrayHelper.SetTo<Gaussian>(this.player_perf_t__n_depth1_F[nMatches][1][nPlayersMinusPerTeam], this.player_perf_t__n_uses_F[nMatches][1][nPlayersMinusPerTeam][0]);
					}
					// Message to 'player_perf_t__n_item1_uses' from Replicate factor
					this.player_perf_t__n_item1_uses_F[nMatches][1] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item1_uses_B[nMatches], this.player_perf_t__n_depth1_F[nMatches][1], 1, this.player_perf_t__n_item1_uses_F[nMatches][1]);
					// Message to 'SumTeam2' from Sum factor
					SumTeam2_F[nMatches] = FastSumOp.SumAverageConditional(this.player_perf_t__n_item1_uses_F[nMatches][1]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][0]; nPlayersMinusPerTeam++) {
						// Message to 'player_perf_t__n_depth1' from Copy factor
						this.player_perf_t__n_depth1_F[nMatches][0][nPlayersMinusPerTeam] = ArrayHelper.SetTo<Gaussian>(this.player_perf_t__n_depth1_F[nMatches][0][nPlayersMinusPerTeam], this.player_perf_t__n_uses_F[nMatches][0][nPlayersMinusPerTeam][0]);
					}
					// Message to 'player_perf_t__n_item0_uses' from Replicate factor
					this.player_perf_t__n_item0_uses_F[nMatches][0] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item0_uses_B[nMatches], this.player_perf_t__n_depth1_F[nMatches][0], 0, this.player_perf_t__n_item0_uses_F[nMatches][0]);
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						if (nTeamsPerMatch==0) {
							this.player_perf_t__n_item0_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.Marginal<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item0_rep_B_toDef[nMatches][nTeamsPerMatch], this.player_perf_t__n_item0_uses_F[nMatches][0], this.player_perf_t__n_item0_rep_F_marginal[nMatches][nTeamsPerMatch]);
							for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
								// Message to 'player_perf_t__n_item0_rep' from Replicate factor
								this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_0_0__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_item0_rep_F_marginal[nMatches][nTeamsPerMatch], nPlayersMinusPerTeam, this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								this.Perfomance_opposing_team_uses_B_toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.ToDef<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_B_toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'Perfomance_opposing_team' from Replicate factor
								Perfomance_opposing_team_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ArrayHelper.SetTo<Gaussian>(Perfomance_opposing_team_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_B_toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'vdouble1212' from Product factor
								vdouble1212_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.BAverageConditional(Perfomance_opposing_team_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble1210_reduced[nMatches][nTeamsPerMatch]);
								// Message to 'vdouble1211' from Ratio factor
								vdouble1211_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.AAverageConditional(vdouble1212_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Avg_play_time_team_reduced[nMatches][nTeamsPerMatch]);
								// Message to 'vdouble1211' from Sum factor
								this.vdouble1211_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = FastSumOp.SumAverageConditional(this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'player_perf_t__n_0_0_' from Sum factor
								this.player_perf_t__n_0_0__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(vdouble1211_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble1211_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_0_0__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'vdouble1212' from Ratio factor
								this.vdouble1212_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.RatioAverageConditional(this.vdouble1211_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Avg_play_time_team_reduced[nMatches][nTeamsPerMatch]);
								// Message to 'Perfomance_opposing_team_0_' from Product factor
								this.Perfomance_opposing_team_0__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(this.vdouble1210_reduced[nMatches][nTeamsPerMatch], this.vdouble1212_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'Perfomance_opposing_team' from Copy factor
								this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ArrayHelper.SetTo<Gaussian>(this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_0__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.Marginal<Gaussian>(this.Perfomance_opposing_team_uses_B_toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							}
							this.player_perf_t__n_item0_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.ToDef<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_0_0__B[nMatches][nTeamsPerMatch], this.player_perf_t__n_item0_rep_B_toDef[nMatches][nTeamsPerMatch]);
							// Message to 'player_perf_t__n_item0_uses' from Replicate factor
							this.player_perf_t__n_item0_uses_B[nMatches][0] = ArrayHelper.SetTo<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item0_uses_B[nMatches][0], this.player_perf_t__n_item0_rep_B_toDef[nMatches][nTeamsPerMatch]);
						}
					}
					// Message to 'player_perf_t__n_item0_uses' from Replicate factor
					this.player_perf_t__n_item0_uses_F[nMatches][1] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item0_uses_B[nMatches], this.player_perf_t__n_depth1_F[nMatches][0], 1, this.player_perf_t__n_item0_uses_F[nMatches][1]);
					// Message to 'SumTeam1' from Sum factor
					SumTeam1_F[nMatches] = FastSumOp.SumAverageConditional(this.player_perf_t__n_item0_uses_F[nMatches][1]);
					// Message to 'Diff' from Difference factor
					Diff_F[nMatches] = DoublePlusOp.AAverageConditional(SumTeam1_F[nMatches], SumTeam2_F[nMatches]);
					if (this.Team2wins[nMatches]==1) {
						// Message to 'vdouble1254' from Difference factor
						vdouble1254_F[nMatches] = DoublePlusOp.AAverageConditional(-0.11293766717953034, Diff_F[nMatches]);
						// Message to 'vdouble1254' from IsPositive factor
						vdouble1254_B[nMatches] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(true), vdouble1254_F[nMatches]);
						// Message to 'Diff_1_' from Difference factor
						Diff_1__B[nMatches] = DoublePlusOp.BAverageConditional(-0.11293766717953034, vdouble1254_B[nMatches]);
						// Message to 'Diff' from Copy factor
						Diff_B[nMatches] = ArrayHelper.SetTo<Gaussian>(Diff_B[nMatches], Diff_1__B[nMatches]);
					}
					if (this.Team2wins[nMatches]==0) {
						// Message to 'vdouble1252' from Difference factor
						vdouble1252_F[nMatches] = DoublePlusOp.AAverageConditional(Diff_F[nMatches], 0.11293766717953034);
						// Message to 'vdouble1252' from IsPositive factor
						vdouble1252_B[nMatches] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(true), vdouble1252_F[nMatches]);
						// Message to 'Diff_0_' from Difference factor
						Diff_0__B[nMatches] = DoublePlusOp.SumAverageConditional(vdouble1252_B[nMatches], 0.11293766717953034);
						// Message to 'Diff' from Copy factor
						Diff_B[nMatches] = ArrayHelper.SetTo<Gaussian>(Diff_B[nMatches], Diff_0__B[nMatches]);
					}
					if (this.Team2wins[nMatches]==2) {
						// Message to 'Diff_2_' from IsBetween factor
						Diff_2__B[nMatches] = IsBetweenGaussianOp.XAverageConditional(true, Diff_F[nMatches], -0.11293766717953034, 0.11293766717953034);
						// Message to 'Diff' from Copy factor
						Diff_B[nMatches] = ArrayHelper.SetTo<Gaussian>(Diff_B[nMatches], Diff_2__B[nMatches]);
					}
					// Message to 'SumTeam2' from Difference factor
					SumTeam2_B[nMatches] = DoublePlusOp.BAverageConditional(SumTeam1_F[nMatches], Diff_B[nMatches]);
					// Message to 'player_perf_t__n_item1_uses' from Sum factor
					this.player_perf_t__n_item1_uses_B[nMatches][1] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(SumTeam2_B[nMatches], SumTeam2_F[nMatches], this.player_perf_t__n_item1_uses_F[nMatches][1], this.player_perf_t__n_item1_uses_B[nMatches][1]);
					// Message to 'player_perf_t__n_item1_uses' from Replicate factor
					this.player_perf_t__n_item1_uses_F[nMatches][0] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item1_uses_B[nMatches], this.player_perf_t__n_depth1_F[nMatches][1], 0, this.player_perf_t__n_item1_uses_F[nMatches][0]);
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						if (nTeamsPerMatch==1) {
							player_perf_t__n_item1_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.Marginal<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item1_rep_B_toDef[nMatches][nTeamsPerMatch], this.player_perf_t__n_item1_uses_F[nMatches][0], player_perf_t__n_item1_rep_F_marginal[nMatches][nTeamsPerMatch]);
							for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
								// Message to 'player_perf_t__n_item1_rep' from Replicate factor
								player_perf_t__n_item1_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_1_1__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], player_perf_t__n_item1_rep_F_marginal[nMatches][nTeamsPerMatch], nPlayersMinusPerTeam, player_perf_t__n_item1_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								this.Perfomance_opposing_team_uses_B_toDef2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.ToDef<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_B_toDef2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'vdouble1216' from Sum factor
								vdouble1216_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = FastSumOp.SumAverageConditional(player_perf_t__n_item1_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'vdouble1217' from Ratio factor
								vdouble1217_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.RatioAverageConditional(vdouble1216_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Avg_play_time_team_reduced[nMatches][nTeamsPerMatch]);
								// Message to 'Perfomance_opposing_team_1_' from Product factor
								this.Perfomance_opposing_team_1__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(vdouble1215_reduced[nMatches][nTeamsPerMatch], vdouble1217_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.Marginal<Gaussian>(this.Perfomance_opposing_team_uses_B_toDef2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_1__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'Perfomance_opposing_team_uses' from Replicate factor
								this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2], this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 2, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2]);
								// Message to 'vdouble1217' from Product factor
								vdouble1217_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.BAverageConditional(this.Perfomance_opposing_team_uses_B_toDef2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], vdouble1215_reduced[nMatches][nTeamsPerMatch]);
								// Message to 'vdouble1216' from Ratio factor
								vdouble1216_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.AAverageConditional(vdouble1217_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Avg_play_time_team_reduced[nMatches][nTeamsPerMatch]);
								// Message to 'player_perf_t__n_1_1_' from Sum factor
								this.player_perf_t__n_1_1__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(vdouble1216_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], vdouble1216_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], player_perf_t__n_item1_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_1_1__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'Perfomance_opposing_team_uses' from Replicate factor
								this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0], this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]);
								// Message to 'Perfomance_opposing_team_uses' from Replicate factor
								this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1], this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 1, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
							}
						}
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							if (nTeamsPerMatch==0) {
								// Message to 'Perfomance_opposing_team_uses' from Replicate factor
								this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2], this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 2, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2]);
							}
							// Message to 'player_perf_t__n_uses' from Difference factor
							this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3] = DoublePlusOp.SumAverageConditional(this.vdouble1239_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2]);
							if (nTeamsPerMatch==0) {
								// Message to 'Perfomance_opposing_team_uses' from Replicate factor
								this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0], this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]);
							}
							// Message to 'vdouble1222' from Product factor
							this.vdouble1222_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(-9.1000000000000003E-05, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]);
							if (nTeamsPerMatch==0) {
								// Message to 'Perfomance_opposing_team_uses' from Replicate factor
								this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1], this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 1, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
							}
							// Message to 'vdouble1232' from Product factor
							this.vdouble1232_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(9.5000000000000005E-05, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
						}
						if (nTeamsPerMatch==1) {
							this.player_perf_t__n_item1_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.ToDef<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_1_1__B[nMatches][nTeamsPerMatch], this.player_perf_t__n_item1_rep_B_toDef[nMatches][nTeamsPerMatch]);
							// Message to 'player_perf_t__n_item1_uses' from Replicate factor
							this.player_perf_t__n_item1_uses_B[nMatches][0] = ArrayHelper.SetTo<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item1_uses_B[nMatches][0], this.player_perf_t__n_item1_rep_B_toDef[nMatches][nTeamsPerMatch]);
						}
					}
					// Message to 'SumTeam1' from Difference factor
					SumTeam1_B[nMatches] = DoublePlusOp.SumAverageConditional(Diff_B[nMatches], SumTeam2_F[nMatches]);
					// Message to 'player_perf_t__n_item0_uses' from Sum factor
					this.player_perf_t__n_item0_uses_B[nMatches][1] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(SumTeam1_B[nMatches], SumTeam1_F[nMatches], this.player_perf_t__n_item0_uses_F[nMatches][1], this.player_perf_t__n_item0_uses_B[nMatches][1]);
					// Message to 'player_perf_t__n_item0' from Replicate factor
					player_perf_t__n_item0_B[nMatches] = ReplicateOp_NoDivide.DefAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item0_uses_B[nMatches], player_perf_t__n_item0_B[nMatches]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][0]; nPlayersMinusPerTeam++) {
						// Message to 'player_perf_t__n_uses' from Copy factor
						this.player_perf_t__n_uses_B[nMatches][0][nPlayersMinusPerTeam][0] = ArrayHelper.SetTo<Gaussian>(this.player_perf_t__n_uses_B[nMatches][0][nPlayersMinusPerTeam][0], player_perf_t__n_item0_B[nMatches][nPlayersMinusPerTeam]);
					}
					// Message to 'player_perf_t__n_item1' from Replicate factor
					player_perf_t__n_item1_B[nMatches] = ReplicateOp_NoDivide.DefAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item1_uses_B[nMatches], player_perf_t__n_item1_B[nMatches]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][1]; nPlayersMinusPerTeam++) {
						// Message to 'player_perf_t__n_uses' from Copy factor
						this.player_perf_t__n_uses_B[nMatches][1][nPlayersMinusPerTeam][0] = ArrayHelper.SetTo<Gaussian>(this.player_perf_t__n_uses_B[nMatches][1][nPlayersMinusPerTeam][0], player_perf_t__n_item1_B[nMatches][nPlayersMinusPerTeam]);
					}
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Message to 'vdouble1220' from Plus factor
							vdouble1220_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.AAverageConditional(vdouble1223_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble1222_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'player_perf_t__n_uses' from Product factor
							this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = GaussianProductOpBase.BAverageConditional(vdouble1220_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 1.1E-05);
							// Message to 'vdouble1230' from Plus factor
							vdouble1230_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.AAverageConditional(vdouble1233_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble1232_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'player_perf_t__n_uses' from Product factor
							this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = GaussianProductOpBase.BAverageConditional(vdouble1230_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], -5.1E-05);
							this.player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.ToDef<Gaussian>(this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						}
					}
				}
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			// Message to 'vbool197_marginal' from Variable factor
			this.vbool197_marginal_F = VariableOp.MarginalAverageConditional<Bernoulli>(this.vbool197_rep_B_toDef, this.vBernoulli26, this.vbool197_marginal_F);
			this.vbool198_marginal_F = Bernoulli.Uniform();
			// Message to 'vbool198_marginal' from Variable factor
			this.vbool198_marginal_F = VariableOp.MarginalAverageConditional<Bernoulli>(this.vbool198_rep_B_toDef, this.vBernoulli27, this.vbool198_marginal_F);
			this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam1_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of deathcount and PlayerInTeam</summary>
		private void Changed_deathcount_PlayerInTeam()
		{
			if (this.Changed_deathcount_PlayerInTeam_isDone) {
				return ;
			}
			// Create array for 'deathcount_marginal' Forwards messages.
			this.deathcount_marginal_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(1000);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'deathcount_marginal' Forwards messages.
				this.deathcount_marginal_F[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for 'deathcount_marginal' Forwards messages.
					this.deathcount_marginal_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						this.deathcount_marginal_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Message to 'deathcount_marginal' from DerivedVariable factor
			this.deathcount_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>,double[][][]>(this.Deathcount, this.deathcount_marginal_F);
			this.Changed_deathcount_PlayerInTeam_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of killcount and PlayerInTeam</summary>
		private void Changed_killcount_PlayerInTeam()
		{
			if (this.Changed_killcount_PlayerInTeam_isDone) {
				return ;
			}
			// Create array for 'killcount_marginal' Forwards messages.
			this.killcount_marginal_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(1000);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'killcount_marginal' Forwards messages.
				this.killcount_marginal_F[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for 'killcount_marginal' Forwards messages.
					this.killcount_marginal_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						this.killcount_marginal_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Message to 'killcount_marginal' from DerivedVariable factor
			this.killcount_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>,double[][][]>(this.Killcount, this.killcount_marginal_F);
			this.Changed_killcount_PlayerInTeam_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of Match_time_m</summary>
		private void Changed_Match_time_m()
		{
			if (this.Changed_Match_time_m_isDone) {
				return ;
			}
			// Create array for 'Match_time_m_marginal' Forwards messages.
			this.Match_time_m_marginal_F = new DistributionStructArray<Gaussian,double>(1000);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				this.Match_time_m_marginal_F[nMatches] = Gaussian.Uniform();
			}
			// Message to 'Match_time_m_marginal' from DerivedVariable factor
			this.Match_time_m_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Gaussian,double>,double[]>(this.match_time_m, this.Match_time_m_marginal_F);
			this.Changed_Match_time_m_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of Match_time_m and numberOfIterationsDecreased and p_time_m__t__n and PlayerIndex and PlayerInTeam and quit and vdouble__345 and must reset on changes to deathcount and killcount and team2wins</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl11(bool initialise)
		{
			if (this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl11_isDone&&((!initialise)||this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl11_isInitialised)) {
				return ;
			}
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Message to 'vbool198_rep_rep_rep' from Or factor
						this.vbool198_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = BooleanOrOp.AAverageConditional(this.Quit[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vbool201_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
					}
					this.vbool198_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool198_rep_rep_rep_B[nMatches][nTeamsPerMatch], this.vbool198_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch]);
				}
				this.vbool198_rep_rep_B_toDef[nMatches] = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool198_rep_rep_rep_B_toDef[nMatches], this.vbool198_rep_rep_B_toDef[nMatches]);
			}
			this.vbool198_rep_B_toDef = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool198_rep_rep_B_toDef, this.vbool198_rep_B_toDef);
			this.vbool198_rep_F_marginal = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool198_rep_B_toDef, this.vBernoulli27, this.vbool198_rep_F_marginal);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Message to 'vbool198_rep' from Replicate factor
				this.vbool198_rep_F[nMatches] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool198_rep_rep_B_toDef[nMatches], this.vbool198_rep_F_marginal, nMatches, this.vbool198_rep_F[nMatches]);
				this.vbool198_rep_rep_F_marginal[nMatches] = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool198_rep_rep_B_toDef[nMatches], this.vbool198_rep_F[nMatches], this.vbool198_rep_rep_F_marginal[nMatches]);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Message to 'vbool198_rep_rep' from Replicate factor
					this.vbool198_rep_rep_F[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool198_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch], this.vbool198_rep_rep_F_marginal[nMatches], nTeamsPerMatch, this.vbool198_rep_rep_F[nMatches][nTeamsPerMatch]);
					this.vbool198_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool198_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch], this.vbool198_rep_rep_F[nMatches][nTeamsPerMatch], this.vbool198_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Message to 'vbool198_rep_rep_rep' from Replicate factor
						this.vbool198_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool198_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vbool198_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch], nPlayersMinusPerTeam, this.vbool198_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'vbool201' from Or factor
						this.vbool201_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = BooleanOrOp.BAverageConditional(this.Quit[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vbool198_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'vbool197_rep_rep_rep' from And factor
						this.vbool197_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = BooleanAndOp.AAverageConditional(this.vbool201_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Under_performing_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
					}
					this.vbool197_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool197_rep_rep_rep_B[nMatches][nTeamsPerMatch], this.vbool197_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch]);
				}
				this.vbool197_rep_rep_B_toDef[nMatches] = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool197_rep_rep_rep_B_toDef[nMatches], this.vbool197_rep_rep_B_toDef[nMatches]);
			}
			this.vbool197_rep_B_toDef = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool197_rep_rep_B_toDef, this.vbool197_rep_B_toDef);
			this.vbool197_rep_F_marginal = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool197_rep_B_toDef, this.vBernoulli26, this.vbool197_rep_F_marginal);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Message to 'vbool197_rep' from Replicate factor
				this.vbool197_rep_F[nMatches] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool197_rep_rep_B_toDef[nMatches], this.vbool197_rep_F_marginal, nMatches, this.vbool197_rep_F[nMatches]);
				this.vbool197_rep_rep_F_marginal[nMatches] = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool197_rep_rep_B_toDef[nMatches], this.vbool197_rep_F[nMatches], this.vbool197_rep_rep_F_marginal[nMatches]);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Message to 'vbool197_rep_rep' from Replicate factor
					this.vbool197_rep_rep_F[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool197_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch], this.vbool197_rep_rep_F_marginal[nMatches], nTeamsPerMatch, this.vbool197_rep_rep_F[nMatches][nTeamsPerMatch]);
					this.vbool197_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool197_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch], this.vbool197_rep_rep_F[nMatches][nTeamsPerMatch], this.vbool197_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Message to 'vbool197_rep_rep_rep' from Replicate factor
						this.vbool197_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool197_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vbool197_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch], nPlayersMinusPerTeam, this.vbool197_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'Under_performing' from And factor
						this.Under_performing_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = BooleanAndOp.BAverageConditional(this.vbool201_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vbool197_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'vdouble1245' from IsPositive factor
						this.vdouble1245_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = IsPositiveOp_Proper.XAverageConditional(this.Under_performing_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble1245_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'vdouble1243_use' from Difference factor
						this.vdouble1243_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.BAverageConditional(0.0, this.vdouble1245_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'vdouble1241' from Gaussian factor
						this.vdouble1241_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.MeanAverageConditional(this.vdouble1243_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0.01);
						// Message to 'vdouble1239' from Difference factor
						this.vdouble1239_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.SumAverageConditional(this.vdouble1241_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 15.0);
						// Message to 'Perfomance_opposing_team_uses' from Difference factor
						this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = DoublePlusOp.BAverageConditional(this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3], this.vdouble1239_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						if (nTeamsPerMatch==1) {
							this.Perfomance_opposing_team_uses_B_toDef2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.ToDef<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_B_toDef2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.Marginal<Gaussian>(this.Perfomance_opposing_team_uses_B_toDef2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_1__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'Perfomance_opposing_team_uses' from Replicate factor
							this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2], this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 2, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2]);
							// Message to 'Perfomance_opposing_team_uses' from Replicate factor
							this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0], this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]);
						}
						if (nTeamsPerMatch==0) {
							this.Perfomance_opposing_team_uses_B_toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.ToDef<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_B_toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.Marginal<Gaussian>(this.Perfomance_opposing_team_uses_B_toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'Perfomance_opposing_team_uses' from Replicate factor
							this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0], this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]);
						}
						// Message to 'vdouble1222' from Product factor
						this.vdouble1222_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(-9.1000000000000003E-05, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]);
						if (nTeamsPerMatch==1) {
							// Message to 'Perfomance_opposing_team_uses' from Replicate factor
							this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1], this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 1, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
						}
						if (nTeamsPerMatch==0) {
							// Message to 'Perfomance_opposing_team_uses' from Replicate factor
							this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1], this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 1, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
						}
						// Message to 'vdouble1232' from Product factor
						this.vdouble1232_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(9.5000000000000005E-05, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
					}
				}
			}
			this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl11_isDone = true;
			this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl11_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of Match_time_m and numberOfIterationsDecreased and p_time_m__t__n and PlayerIndex and PlayerInTeam and vdouble__345 and must reset on changes to deathcount and killcount and quit and team2wins</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__3410(bool initialise)
		{
			if (this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__3410_isDone&&((!initialise)||this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__3410_isInitialised)) {
				return ;
			}
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.Marginal<Gaussian>(this.player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'player_perf_t__n_uses' from Replicate factor
						this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3], this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 3, this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3]);
						// Message to 'player_perf_t__n_uses' from Replicate factor
						this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0], this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0, this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]);
					}
				}
				for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][0]; nPlayersMinusPerTeam++) {
					// Message to 'player_perf_t__n_depth1' from Copy factor
					this.player_perf_t__n_depth1_F[nMatches][0][nPlayersMinusPerTeam] = ArrayHelper.SetTo<Gaussian>(this.player_perf_t__n_depth1_F[nMatches][0][nPlayersMinusPerTeam], this.player_perf_t__n_uses_F[nMatches][0][nPlayersMinusPerTeam][0]);
				}
				// Message to 'player_perf_t__n_item0_uses' from Replicate factor
				this.player_perf_t__n_item0_uses_F[nMatches][0] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item0_uses_B[nMatches], this.player_perf_t__n_depth1_F[nMatches][0], 0, this.player_perf_t__n_item0_uses_F[nMatches][0]);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					if (nTeamsPerMatch==0) {
						this.player_perf_t__n_item0_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.Marginal<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item0_rep_B_toDef[nMatches][nTeamsPerMatch], this.player_perf_t__n_item0_uses_F[nMatches][0], this.player_perf_t__n_item0_rep_F_marginal[nMatches][nTeamsPerMatch]);
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Message to 'player_perf_t__n_item0_rep' from Replicate factor
							this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_0_0__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_item0_rep_F_marginal[nMatches][nTeamsPerMatch], nPlayersMinusPerTeam, this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble1211' from Sum factor
							this.vdouble1211_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = FastSumOp.SumAverageConditional(this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble1212' from Ratio factor
							this.vdouble1212_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.RatioAverageConditional(this.vdouble1211_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Avg_play_time_team_reduced[nMatches][nTeamsPerMatch]);
							// Message to 'Perfomance_opposing_team_0_' from Product factor
							this.Perfomance_opposing_team_0__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(this.vdouble1210_reduced[nMatches][nTeamsPerMatch], this.vdouble1212_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'Perfomance_opposing_team' from Copy factor
							this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ArrayHelper.SetTo<Gaussian>(this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_0__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.Marginal<Gaussian>(this.Perfomance_opposing_team_uses_B_toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'Perfomance_opposing_team_uses' from Replicate factor
							this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2], this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 2, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2]);
						}
					}
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Message to 'vdouble1239' from Difference factor
						this.vdouble1239_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.AAverageConditional(this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3], this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2]);
						// Message to 'vdouble1241' from Difference factor
						this.vdouble1241_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.AAverageConditional(this.vdouble1239_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 15.0);
						// Message to 'vdouble1243' from Gaussian factor
						this.vdouble1243_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.SampleAverageConditional(this.vdouble1241_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0.01);
						// Message to 'vdouble1245' from Difference factor
						this.vdouble1245_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.AAverageConditional(0.0, this.vdouble1243_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'Under_performing' from IsPositive factor
						this.Under_performing_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = IsPositiveOp.IsPositiveAverageConditional(this.vdouble1245_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'vbool201' from And factor
						this.vbool201_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = BooleanAndOp.AndAverageConditional(this.vbool197_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Under_performing_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
					}
				}
			}
			this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__3410_isDone = true;
			this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__3410_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of Match_time_m and p_time_m__t__n and PlayerIndex and PlayerInTeam and vdouble__345</summary>
		private void Changed_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__345()
		{
			if (this.Changed_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__345_isDone) {
				return ;
			}
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Message to 'player_perf_t__n' from Ratio factor
						this.player_perf_t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.RatioAverageConditional(this.perf_n_m_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.match_time_m[nMatches]);
					}
				}
			}
			this.Changed_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__345_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of Match_time_m and p_time_m__t__n and PlayerInTeam</summary>
		private void Changed_Match_time_m_p_time_m__t__n_PlayerInTeam()
		{
			if (this.Changed_Match_time_m_p_time_m__t__n_PlayerInTeam_isDone) {
				return ;
			}
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					if (this.playerInTeam[nMatches][nTeamsPerMatch]>0) {
						this.Avg_play_time_team_reduced[nMatches][nTeamsPerMatch] = Factor.Ratio(this.vdouble1202_reduced[nMatches][nTeamsPerMatch], this.match_time_m[nMatches]);
						if (nTeamsPerMatch==0) {
							this.vdouble1210_reduced[nMatches][nTeamsPerMatch] = Factor.Ratio(this.vdouble1209_reduced[nMatches][nTeamsPerMatch], this.match_time_m[nMatches]);
						}
					}
				}
			}
			this.Changed_Match_time_m_p_time_m__t__n_PlayerInTeam_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and must reset on changes to deathcount and killcount and Match_time_m and p_time_m__t__n and PlayerIndex and PlayerInTeam and quit and team2wins and vdouble__345</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde9(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde9_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde9_isInitialised)) {
				return ;
			}
			this.vbool197_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.vBernoulli26);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				this.vbool197_rep_F[nMatches] = Bernoulli.Uniform();
				this.vbool197_rep_rep_F_marginal[nMatches] = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.vbool197_rep_F[nMatches]);
				this.vbool197_rep_rep_B_toDef[nMatches] = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.vbool197_rep_F[nMatches]);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					this.vbool197_rep_rep_F[nMatches][nTeamsPerMatch] = Bernoulli.Uniform();
					this.vbool197_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.vbool197_rep_rep_F[nMatches][nTeamsPerMatch]);
					this.vbool197_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.vbool197_rep_rep_F[nMatches][nTeamsPerMatch]);
					this.vbool198_rep_rep_F[nMatches][nTeamsPerMatch] = Bernoulli.Uniform();
					this.vbool198_rep_rep_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.vbool198_rep_rep_F[nMatches][nTeamsPerMatch]);
				}
				this.vbool198_rep_F[nMatches] = Bernoulli.Uniform();
				this.vbool198_rep_rep_B_toDef[nMatches] = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.vbool198_rep_F[nMatches]);
			}
			this.vbool198_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.vBernoulli27);
			this.vbool198_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.vBernoulli27);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				this.vbool198_rep_rep_F_marginal[nMatches] = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.vbool198_rep_F[nMatches]);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					this.vbool198_rep_rep_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.vbool198_rep_rep_F[nMatches][nTeamsPerMatch]);
				}
			}
			this.vbool197_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.vBernoulli26);
			this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde9_isDone = true;
			this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde9_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and PlayerInTeam and must reset on changes to deathcount and killcount and Match_time_m and p_time_m__t__n and PlayerIndex and quit and team2wins and vdouble__345</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5_isInitialised)) {
				return ;
			}
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.MarginalInit<Gaussian>(this.player_perf_t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						this.player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.ToDefInit<Gaussian>(this.player_perf_t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						this.player_perf_t__n_depth1_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
				for(int _a3 = 0; _a3<this.playerInTeam[nMatches][0]; _a3++) {
					this.player_perf_t__n_item0_uses_F[nMatches][0][_a3] = Gaussian.Uniform();
				}
				for(int _a4 = 0; _a4<this.playerInTeam[nMatches][1]; _a4++) {
					this.player_perf_t__n_item1_uses_B[nMatches][0][_a4] = Gaussian.Uniform();
				}
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					if (nTeamsPerMatch==1) {
						this.player_perf_t__n_item1_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.ToDefInit<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item1_uses_F[nMatches][0]);
					}
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						if (nTeamsPerMatch==0) {
							this.vdouble1211_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
							this.vdouble1212_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
							this.Perfomance_opposing_team_0__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						}
						this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						if (nTeamsPerMatch==0) {
							this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.MarginalInit<Gaussian>(this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							this.Perfomance_opposing_team_uses_B_toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.ToDefInit<Gaussian>(this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						}
						this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = Gaussian.Uniform();
						this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = Gaussian.Uniform();
						this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = Gaussian.Uniform();
						if (nTeamsPerMatch==1) {
							this.Perfomance_opposing_team_1__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
							this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.MarginalInit<Gaussian>(this.Perfomance_opposing_team_1__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							this.Perfomance_opposing_team_uses_B_toDef2[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.ToDefInit<Gaussian>(this.Perfomance_opposing_team_1__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						}
						this.vdouble1232_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = Gaussian.Uniform();
						this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = Gaussian.Uniform();
						this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = Gaussian.Uniform();
						this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3] = Gaussian.Uniform();
						this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = Gaussian.Uniform();
						this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][3] = Gaussian.Uniform();
						this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = Gaussian.Uniform();
						this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = Gaussian.Uniform();
						this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = Gaussian.Uniform();
						this.vbool197_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Bernoulli.Uniform();
						this.vbool201_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Bernoulli.Uniform();
						this.vbool198_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Bernoulli.Uniform();
						this.vbool198_rep_rep_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Bernoulli.Uniform();
						this.vbool201_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Bernoulli.Uniform();
						this.Under_performing_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Bernoulli.Uniform();
						this.vdouble1245_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble1243_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble1241_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble1239_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble1222_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						for(int _a2 = 0; _a2<this.playerInTeam[nMatches][1]; _a2++) {
							if (nTeamsPerMatch==1) {
								this.player_perf_t__n_1_1__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][_a2] = Gaussian.Uniform();
							}
						}
					}
				}
				for(int _a3 = 0; _a3<this.playerInTeam[nMatches][0]; _a3++) {
					this.player_perf_t__n_item0_uses_B[nMatches][1][_a3] = Gaussian.Uniform();
				}
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					if (nTeamsPerMatch==0) {
						this.player_perf_t__n_item0_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.MarginalInit<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item0_uses_F[nMatches][0]);
						this.player_perf_t__n_item0_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.ToDefInit<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item0_uses_F[nMatches][0]);
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							for(int _a3 = 0; _a3<this.playerInTeam[nMatches][0]; _a3++) {
								this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][_a3] = Gaussian.Uniform();
							}
							for(int _a = 0; _a<this.playerInTeam[nMatches][0]; _a++) {
								this.player_perf_t__n_0_0__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][_a] = Gaussian.Uniform();
							}
						}
					}
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						this.vdouble1239_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble1241_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble1243_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble1245_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.Under_performing_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Bernoulli.Uniform();
						this.vbool197_rep_rep_rep_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Bernoulli.Uniform();
					}
				}
			}
			this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5_isDone = true;
			this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of p_time_m__t__n and PlayerIndex and PlayerInTeam and vdouble__345</summary>
		private void Changed_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__345()
		{
			if (this.Changed_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__345_isDone) {
				return ;
			}
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Message to 'perf_n_m' from Product factor
						this.perf_n_m_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(this.perf_from_ds_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
					}
				}
			}
			this.Changed_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__345_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of p_time_m__t__n and PlayerInTeam</summary>
		private void Changed_p_time_m__t__n_PlayerInTeam()
		{
			if (this.Changed_p_time_m__t__n_PlayerInTeam_isDone) {
				return ;
			}
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					if (this.playerInTeam[nMatches][nTeamsPerMatch]>0) {
						this.vdouble1202_reduced[nMatches][nTeamsPerMatch] = Factor.Sum(this.P_time_m__t__n[nMatches][nTeamsPerMatch]);
						if (nTeamsPerMatch==0) {
							this.vdouble1209_reduced[nMatches][nTeamsPerMatch] = Factor.Sum(this.P_time_m__t__n[nMatches][1]);
						}
					}
				}
			}
			// Create array for 'p_time_m__t__n_marginal' Forwards messages.
			this.p_time_m__t__n_marginal_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(1000);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'p_time_m__t__n_marginal' Forwards messages.
				this.p_time_m__t__n_marginal_F[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for 'p_time_m__t__n_marginal' Forwards messages.
					this.p_time_m__t__n_marginal_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						this.p_time_m__t__n_marginal_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Message to 'p_time_m__t__n_marginal' from DerivedVariable factor
			this.p_time_m__t__n_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>,double[][][]>(this.P_time_m__t__n, this.p_time_m__t__n_marginal_F);
			this.Changed_p_time_m__t__n_PlayerInTeam_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of PlayerIndex</summary>
		private void Changed_PlayerIndex()
		{
			if (this.Changed_PlayerIndex_isDone) {
				return ;
			}
			// Create array for 'PlayerIndex_marginal' Forwards messages.
			this.PlayerIndex_marginal_F = new PointMass<int[][][]>(this.playerIndex);
			// Message to 'PlayerIndex_marginal' from DerivedVariable factor
			this.PlayerIndex_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int[][][]>,int[][][]>(this.playerIndex, this.PlayerIndex_marginal_F);
			this.Changed_PlayerIndex_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of PlayerIndex and PlayerInTeam and vdouble__345</summary>
		private void Changed_PlayerIndex_PlayerInTeam_vdouble__345()
		{
			if (this.Changed_PlayerIndex_PlayerInTeam_vdouble__345_isDone) {
				return ;
			}
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Message to 'perf_from_ds' from Gaussian factor
						this.perf_from_ds_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.SampleAverageConditional(this.Vdouble__345[this.playerIndex[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]], 1.0);
					}
				}
			}
			this.Changed_PlayerIndex_PlayerInTeam_vdouble__345_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of PlayerInTeam</summary>
		private void Changed_PlayerInTeam()
		{
			if (this.Changed_PlayerInTeam_isDone) {
				return ;
			}
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'perf_from_ds_F'
					this.perf_from_ds_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for 'player_perf_t__n' Forwards messages.
					this.player_perf_t__n_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					// Create array for replicates of 'player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal'
					this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef'
					this.player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'perf_n_m_F'
					this.perf_n_m_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						this.perf_from_ds_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.perf_n_m_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.player_perf_t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
					// Create array for 'player_perf_t__n_depth1' Forwards messages.
					this.player_perf_t__n_depth1_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
				}
				// Create array for 'player_perf_t__n_item1_uses' Forwards messages.
				this.player_perf_t__n_item1_uses_F[nMatches][0] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][1]);
				for(int _a4 = 0; _a4<this.playerInTeam[nMatches][1]; _a4++) {
					this.player_perf_t__n_item1_uses_F[nMatches][0][_a4] = Gaussian.Uniform();
				}
				// Create array for 'player_perf_t__n_item0_uses' Forwards messages.
				this.player_perf_t__n_item0_uses_F[nMatches][0] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][0]);
				// Create array for 'player_perf_t__n_item1_uses' Backwards messages.
				this.player_perf_t__n_item1_uses_B[nMatches][0] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][1]);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					this.vdouble1202_reduced[nMatches][nTeamsPerMatch] = default(double);
					this.Avg_play_time_team_reduced[nMatches][nTeamsPerMatch] = default(double);
					this.vdouble1209_reduced[nMatches][nTeamsPerMatch] = default(double);
					this.vdouble1210_reduced[nMatches][nTeamsPerMatch] = default(double);
					// Create array for replicates of 'vdouble1211_F'
					this.vdouble1211_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble1212_F'
					this.vdouble1212_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'Perfomance_opposing_team_0__F'
					this.Perfomance_opposing_team_0__F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'Perfomance_opposing_team_F'
					this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'Perfomance_opposing_team_uses_F_marginal'
					this.Perfomance_opposing_team_uses_F_marginal[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'Perfomance_opposing_team_uses_B_toDef'
					this.Perfomance_opposing_team_uses_B_toDef[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'Perfomance_opposing_team_uses_F'
					this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]][];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Create array for 'Perfomance_opposing_team_uses' Forwards messages.
						this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = new Gaussian[3];
					}
					// Create array for replicates of 'Perfomance_opposing_team_1__F'
					this.Perfomance_opposing_team_1__F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'Perfomance_opposing_team_uses_F_marginal2'
					this.Perfomance_opposing_team_uses_F_marginal2[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'Perfomance_opposing_team_uses_B_toDef2'
					this.Perfomance_opposing_team_uses_B_toDef2[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble1232_F'
					this.vdouble1232_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for 'player_perf_t__n_uses' Backwards messages.
					this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]][];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Create array for 'player_perf_t__n_uses' Backwards messages.
						this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = new Gaussian[4];
					}
					// Create array for 'player_perf_t__n_uses' Forwards messages.
					this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]][];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Create array for 'player_perf_t__n_uses' Forwards messages.
						this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = new Gaussian[4];
					}
					// Create array for replicates of 'Perfomance_opposing_team_uses_B'
					this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]][];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Create array for 'Perfomance_opposing_team_uses' Backwards messages.
						this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = new Gaussian[3];
					}
					// Create array for 'vbool197_rep_rep_rep' Forwards messages.
					this.vbool197_rep_rep_rep_F[nMatches][nTeamsPerMatch] = new Bernoulli[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vbool201_F'
					this.vbool201_F[nMatches][nTeamsPerMatch] = new Bernoulli[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for 'vbool198_rep_rep_rep' Backwards messages.
					this.vbool198_rep_rep_rep_B[nMatches][nTeamsPerMatch] = new Bernoulli[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for 'vbool198_rep_rep_rep' Forwards messages.
					this.vbool198_rep_rep_rep_F[nMatches][nTeamsPerMatch] = new Bernoulli[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vbool201_B'
					this.vbool201_B[nMatches][nTeamsPerMatch] = new Bernoulli[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'Under_performing_B'
					this.Under_performing_B[nMatches][nTeamsPerMatch] = new Bernoulli[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble1245_B'
					this.vdouble1245_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble1243_use_B'
					this.vdouble1243_use_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble1241_B'
					this.vdouble1241_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble1239_B'
					this.vdouble1239_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble1222_F'
					this.vdouble1222_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'player_perf_t__n_1_1__B'
					this.player_perf_t__n_1_1__B[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						if (nTeamsPerMatch==1) {
							// Create array for 'player_perf_t__n_1_1_' Backwards messages.
							this.player_perf_t__n_1_1__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][1]);
						}
					}
				}
				// Create array for 'player_perf_t__n_item0_uses' Backwards messages.
				this.player_perf_t__n_item0_uses_B[nMatches][1] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][0]);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					if (nTeamsPerMatch==0) {
						// Create array for 'player_perf_t__n_item0_rep' Forwards messages.
						this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>[this.playerInTeam[nMatches][nTeamsPerMatch]];
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Create array for 'player_perf_t__n_item0_rep' Forwards messages.
							this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][0]);
						}
					}
					// Create array for replicates of 'player_perf_t__n_0_0__B'
					this.player_perf_t__n_0_0__B[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						if (nTeamsPerMatch==0) {
							// Create array for 'player_perf_t__n_0_0_' Backwards messages.
							this.player_perf_t__n_0_0__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][0]);
						}
					}
					// Create array for replicates of 'vdouble1239_F'
					this.vdouble1239_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble1241_F'
					this.vdouble1241_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble1243_F'
					this.vdouble1243_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble1245_F'
					this.vdouble1245_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'Under_performing_F'
					this.Under_performing_F[nMatches][nTeamsPerMatch] = new Bernoulli[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for 'vbool197_rep_rep_rep' Backwards messages.
					this.vbool197_rep_rep_rep_B[nMatches][nTeamsPerMatch] = new Bernoulli[this.playerInTeam[nMatches][nTeamsPerMatch]];
				}
			}
			// Create array for 'PlayerInTeam_marginal' Forwards messages.
			this.PlayerInTeam_marginal_F = new PointMass<int[][]>(this.playerInTeam);
			// Message to 'PlayerInTeam_marginal' from DerivedVariable factor
			this.PlayerInTeam_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int[][]>,int[][]>(this.playerInTeam, this.PlayerInTeam_marginal_F);
			this.Changed_PlayerInTeam_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of PlayerInTeam and quit</summary>
		private void Changed_PlayerInTeam_quit()
		{
			if (this.Changed_PlayerInTeam_quit_isDone) {
				return ;
			}
			// Create array for 'quit_marginal' Forwards messages.
			this.quit_marginal_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]>(1000);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'quit_marginal' Forwards messages.
				this.quit_marginal_F[nMatches] = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(2);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for 'quit_marginal' Forwards messages.
					this.quit_marginal_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Bernoulli,bool>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						this.quit_marginal_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Bernoulli.Uniform();
					}
				}
			}
			// Message to 'quit_marginal' from DerivedVariable factor
			this.quit_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]>,bool[][][]>(this.Quit, this.quit_marginal_F);
			this.Changed_PlayerInTeam_quit_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of PlayerInTeam and time_passed</summary>
		private void Changed_PlayerInTeam_time_passed()
		{
			if (this.Changed_PlayerInTeam_time_passed_isDone) {
				return ;
			}
			// Create array for 'time_passed_marginal' Forwards messages.
			this.time_passed_marginal_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(1000);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'time_passed_marginal' Forwards messages.
				this.time_passed_marginal_F[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for 'time_passed_marginal' Forwards messages.
					this.time_passed_marginal_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						this.time_passed_marginal_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Message to 'time_passed_marginal' from DerivedVariable factor
			this.time_passed_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>,double[][][]>(this.Time_passed, this.time_passed_marginal_F);
			this.Changed_PlayerInTeam_time_passed_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of skills__gamma_</summary>
		private void Changed_skills__gamma_()
		{
			if (this.Changed_skills__gamma__isDone) {
				return ;
			}
			// Create array for 'skills__gamma__marginal' Forwards messages.
			this.skills__gamma__marginal_F = new DistributionStructArray<Gaussian,double>(7097);
			for(int nPlayers = 0; nPlayers<7097; nPlayers++) {
				this.skills__gamma__marginal_F[nPlayers] = Gaussian.Uniform();
			}
			// Message to 'skills__gamma__marginal' from DerivedVariable factor
			this.skills__gamma__marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Gaussian,double>,double[]>(this.Skills__gamma_, this.skills__gamma__marginal_F);
			this.Changed_skills__gamma__isDone = true;
		}

		/// <summary>Computations that depend on the observed value of skills__tau_</summary>
		private void Changed_skills__tau_()
		{
			if (this.Changed_skills__tau__isDone) {
				return ;
			}
			// Create array for 'skills__tau__marginal' Forwards messages.
			this.skills__tau__marginal_F = new DistributionStructArray<Gaussian,double>(7097);
			for(int nPlayers = 0; nPlayers<7097; nPlayers++) {
				this.skills__tau__marginal_F[nPlayers] = Gaussian.Uniform();
			}
			// Message to 'skills__tau__marginal' from DerivedVariable factor
			this.skills__tau__marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Gaussian,double>,double[]>(this.Skills__tau_, this.skills__tau__marginal_F);
			this.Changed_skills__tau__isDone = true;
		}

		/// <summary>Computations that depend on the observed value of team2wins</summary>
		private void Changed_team2wins()
		{
			if (this.Changed_team2wins_isDone) {
				return ;
			}
			// Create array for replicates of 'vbool204'
			bool[] vbool204 = new bool[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					vbool204[nMatches] = true;
					Constrain.Equal<bool>(true, vbool204[nMatches]);
				}
			}
			// Create array for replicates of 'vbool206'
			bool[] vbool206 = new bool[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Team2wins[nMatches]==0) {
					vbool206[nMatches] = true;
					Constrain.Equal<bool>(true, vbool206[nMatches]);
				}
			}
			// Create array for replicates of 'vbool208'
			bool[] vbool208 = new bool[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Team2wins[nMatches]==1) {
					vbool208[nMatches] = true;
					Constrain.Equal<bool>(true, vbool208[nMatches]);
				}
			}
			// Create array for 'team2wins_marginal' Forwards messages.
			this.team2wins_marginal_F = new PointMass<int[]>(this.Team2wins);
			// Message to 'team2wins_marginal' from DerivedVariable factor
			this.team2wins_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int[]>,int[]>(this.Team2wins, this.team2wins_marginal_F);
			this.Changed_team2wins_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vbool__53</summary>
		private void Changed_vbool__53()
		{
			if (this.Changed_vbool__53_isDone) {
				return ;
			}
			// Create array for 'vbool__53_marginal' Forwards messages.
			this.vbool__53_marginal_F = new DistributionStructArray<Bernoulli,bool>(7097);
			for(int nPlayers = 0; nPlayers<7097; nPlayers++) {
				this.vbool__53_marginal_F[nPlayers] = Bernoulli.Uniform();
			}
			// Message to 'vbool__53_marginal' from DerivedVariable factor
			this.vbool__53_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Bernoulli,bool>,bool[]>(this.Vbool__53, this.vbool__53_marginal_F);
			this.Changed_vbool__53_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vdouble__340</summary>
		private void Changed_vdouble__340()
		{
			if (this.Changed_vdouble__340_isDone) {
				return ;
			}
			// Create array for 'vdouble__340_marginal' Forwards messages.
			this.vdouble__340_marginal_F = new DistributionStructArray<Gaussian,double>(200);
			for(int index147 = 0; index147<200; index147++) {
				this.vdouble__340_marginal_F[index147] = Gaussian.Uniform();
			}
			// Message to 'vdouble__340_marginal' from DerivedVariable factor
			this.vdouble__340_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Gaussian,double>,double[]>(this.Vdouble__340, this.vdouble__340_marginal_F);
			this.Changed_vdouble__340_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vdouble__345</summary>
		private void Changed_vdouble__345()
		{
			if (this.Changed_vdouble__345_isDone) {
				return ;
			}
			// Create array for 'vdouble__345_marginal' Forwards messages.
			this.vdouble__345_marginal_F = new DistributionStructArray<Gaussian,double>(7097);
			for(int nPlayers = 0; nPlayers<7097; nPlayers++) {
				this.vdouble__345_marginal_F[nPlayers] = Gaussian.Uniform();
			}
			// Message to 'vdouble__345_marginal' from DerivedVariable factor
			this.vdouble__345_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Gaussian,double>,double[]>(this.Vdouble__345, this.vdouble__345_marginal_F);
			this.Changed_vdouble__345_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vint____54</summary>
		private void Changed_vint____54()
		{
			if (this.Changed_vint____54_isDone) {
				return ;
			}
			// Create array for 'vint____54_marginal' Forwards messages.
			this.vint____54_marginal_F = new PointMass<int[][]>(this.Vint____54);
			// Message to 'vint____54_marginal' from DerivedVariable factor
			this.vint____54_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int[][]>,int[][]>(this.Vint____54, this.vint____54_marginal_F);
			this.Changed_vint____54_isDone = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			this.vBernoulli26 = Bernoulli.FromLogOdds(0.84729786038720345);
			// Create array for replicates of 'perf_from_ds_F'
			this.perf_from_ds_F = new Gaussian[1000][][];
			// Create array for replicates of 'player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef'
			this.player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef = new Gaussian[1000][][];
			// Create array for replicates of 'player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal'
			this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal = new Gaussian[1000][][];
			// Create array for replicates of 'player_perf_t__n_F'
			this.player_perf_t__n_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>[1000];
			// Create array for replicates of 'perf_n_m_F'
			this.perf_n_m_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'perf_from_ds_F'
				this.perf_from_ds_F[nMatches] = new Gaussian[2][];
				// Create array for replicates of 'player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal'
				this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches] = new Gaussian[2][];
				// Create array for replicates of 'player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef'
				this.player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef[nMatches] = new Gaussian[2][];
				// Create array for 'player_perf_t__n' Forwards messages.
				this.player_perf_t__n_F[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
				// Create array for replicates of 'perf_n_m_F'
				this.perf_n_m_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'player_perf_t__n_depth1_F'
			this.player_perf_t__n_depth1_F = new DistributionStructArray<Gaussian,double>[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'player_perf_t__n_depth1' Forwards messages.
				this.player_perf_t__n_depth1_F[nMatches] = new DistributionStructArray<Gaussian,double>[2];
			}
			// Create array for replicates of 'player_perf_t__n_item1_uses_F'
			this.player_perf_t__n_item1_uses_F = new DistributionStructArray<Gaussian,double>[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'player_perf_t__n_item1_uses' Forwards messages.
				this.player_perf_t__n_item1_uses_F[nMatches] = new DistributionStructArray<Gaussian,double>[2];
			}
			// Create array for replicates of 'player_perf_t__n_item0_uses_F'
			this.player_perf_t__n_item0_uses_F = new DistributionStructArray<Gaussian,double>[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'player_perf_t__n_item0_uses' Forwards messages.
				this.player_perf_t__n_item0_uses_F[nMatches] = new DistributionStructArray<Gaussian,double>[2];
			}
			// Create array for replicates of 'player_perf_t__n_item1_uses_B'
			this.player_perf_t__n_item1_uses_B = new DistributionStructArray<Gaussian,double>[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'player_perf_t__n_item1_uses' Backwards messages.
				this.player_perf_t__n_item1_uses_B[nMatches] = new DistributionStructArray<Gaussian,double>[2];
			}
			// Create array for replicates of 'player_perf_t__n_item1_rep_B_toDef'
			this.player_perf_t__n_item1_rep_B_toDef = new DistributionStructArray<Gaussian,double>[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'player_perf_t__n_item1_rep_B_toDef'
				this.player_perf_t__n_item1_rep_B_toDef[nMatches] = new DistributionStructArray<Gaussian,double>[2];
			}
			this.vdouble1202_reduced = new double[1000][];
			this.Avg_play_time_team_reduced = new double[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				this.vdouble1202_reduced[nMatches] = new double[2];
				this.Avg_play_time_team_reduced[nMatches] = new double[2];
			}
			this.vdouble1209_reduced = new double[1000][];
			this.vdouble1210_reduced = new double[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				this.vdouble1209_reduced[nMatches] = new double[2];
				this.vdouble1210_reduced[nMatches] = new double[2];
			}
			// Create array for replicates of 'vdouble1211_F'
			this.vdouble1211_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble1211_F'
				this.vdouble1211_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble1212_F'
			this.vdouble1212_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble1212_F'
				this.vdouble1212_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'Perfomance_opposing_team_0__F'
			this.Perfomance_opposing_team_0__F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'Perfomance_opposing_team_0__F'
				this.Perfomance_opposing_team_0__F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'Perfomance_opposing_team_F'
			this.Perfomance_opposing_team_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'Perfomance_opposing_team_F'
				this.Perfomance_opposing_team_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'Perfomance_opposing_team_uses_F_marginal'
			this.Perfomance_opposing_team_uses_F_marginal = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'Perfomance_opposing_team_uses_F_marginal'
				this.Perfomance_opposing_team_uses_F_marginal[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'Perfomance_opposing_team_uses_B_toDef'
			this.Perfomance_opposing_team_uses_B_toDef = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'Perfomance_opposing_team_uses_B_toDef'
				this.Perfomance_opposing_team_uses_B_toDef[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'Perfomance_opposing_team_uses_F'
			this.Perfomance_opposing_team_uses_F = new Gaussian[1000][][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'Perfomance_opposing_team_uses_F'
				this.Perfomance_opposing_team_uses_F[nMatches] = new Gaussian[2][][];
			}
			// Create array for replicates of 'Perfomance_opposing_team_1__F'
			this.Perfomance_opposing_team_1__F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'Perfomance_opposing_team_1__F'
				this.Perfomance_opposing_team_1__F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'Perfomance_opposing_team_uses_F_marginal2'
			this.Perfomance_opposing_team_uses_F_marginal2 = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'Perfomance_opposing_team_uses_F_marginal2'
				this.Perfomance_opposing_team_uses_F_marginal2[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'Perfomance_opposing_team_uses_B_toDef2'
			this.Perfomance_opposing_team_uses_B_toDef2 = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'Perfomance_opposing_team_uses_B_toDef2'
				this.Perfomance_opposing_team_uses_B_toDef2[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble1232_F'
			this.vdouble1232_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble1232_F'
				this.vdouble1232_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'player_perf_t__n_uses_B'
			this.player_perf_t__n_uses_B = new Gaussian[1000][][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'player_perf_t__n_uses' Backwards messages.
				this.player_perf_t__n_uses_B[nMatches] = new Gaussian[2][][];
			}
			// Create array for replicates of 'player_perf_t__n_uses_F'
			this.player_perf_t__n_uses_F = new Gaussian[1000][][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'player_perf_t__n_uses' Forwards messages.
				this.player_perf_t__n_uses_F[nMatches] = new Gaussian[2][][];
			}
			// Create array for replicates of 'Perfomance_opposing_team_uses_B'
			this.Perfomance_opposing_team_uses_B = new Gaussian[1000][][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'Perfomance_opposing_team_uses_B'
				this.Perfomance_opposing_team_uses_B[nMatches] = new Gaussian[2][][];
			}
			// Create array for 'vbool197_rep' Forwards messages.
			this.vbool197_rep_F = new Bernoulli[1000];
			// Create array for replicates of 'vbool197_rep_rep_F_marginal'
			this.vbool197_rep_rep_F_marginal = new Bernoulli[1000];
			// Create array for replicates of 'vbool197_rep_rep_B_toDef'
			this.vbool197_rep_rep_B_toDef = new Bernoulli[1000];
			// Create array for replicates of 'vbool197_rep_rep_F'
			this.vbool197_rep_rep_F = new Bernoulli[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'vbool197_rep_rep' Forwards messages.
				this.vbool197_rep_rep_F[nMatches] = new Bernoulli[2];
			}
			// Create array for replicates of 'vbool197_rep_rep_rep_F_marginal'
			this.vbool197_rep_rep_rep_F_marginal = new Bernoulli[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vbool197_rep_rep_rep_F_marginal'
				this.vbool197_rep_rep_rep_F_marginal[nMatches] = new Bernoulli[2];
			}
			// Create array for replicates of 'vbool197_rep_rep_rep_B_toDef'
			this.vbool197_rep_rep_rep_B_toDef = new Bernoulli[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vbool197_rep_rep_rep_B_toDef'
				this.vbool197_rep_rep_rep_B_toDef[nMatches] = new Bernoulli[2];
			}
			// Create array for replicates of 'vbool197_rep_rep_rep_F'
			this.vbool197_rep_rep_rep_F = new Bernoulli[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vbool197_rep_rep_rep_F'
				this.vbool197_rep_rep_rep_F[nMatches] = new Bernoulli[2][];
			}
			this.vBernoulli27 = Bernoulli.FromLogOdds(-0.84729786038720356);
			// Create array for replicates of 'vbool201_F'
			this.vbool201_F = new Bernoulli[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vbool201_F'
				this.vbool201_F[nMatches] = new Bernoulli[2][];
			}
			// Create array for replicates of 'vbool198_rep_rep_rep_B'
			this.vbool198_rep_rep_rep_B = new Bernoulli[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vbool198_rep_rep_rep_B'
				this.vbool198_rep_rep_rep_B[nMatches] = new Bernoulli[2][];
			}
			// Create array for replicates of 'vbool198_rep_rep_F'
			this.vbool198_rep_rep_F = new Bernoulli[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'vbool198_rep_rep' Forwards messages.
				this.vbool198_rep_rep_F[nMatches] = new Bernoulli[2];
			}
			// Create array for replicates of 'vbool198_rep_rep_rep_B_toDef'
			this.vbool198_rep_rep_rep_B_toDef = new Bernoulli[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vbool198_rep_rep_rep_B_toDef'
				this.vbool198_rep_rep_rep_B_toDef[nMatches] = new Bernoulli[2];
			}
			// Create array for 'vbool198_rep' Forwards messages.
			this.vbool198_rep_F = new Bernoulli[1000];
			// Create array for replicates of 'vbool198_rep_rep_B_toDef'
			this.vbool198_rep_rep_B_toDef = new Bernoulli[1000];
			// Create array for replicates of 'vbool198_rep_rep_F_marginal'
			this.vbool198_rep_rep_F_marginal = new Bernoulli[1000];
			// Create array for replicates of 'vbool198_rep_rep_rep_F_marginal'
			this.vbool198_rep_rep_rep_F_marginal = new Bernoulli[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vbool198_rep_rep_rep_F_marginal'
				this.vbool198_rep_rep_rep_F_marginal[nMatches] = new Bernoulli[2];
			}
			// Create array for replicates of 'vbool198_rep_rep_rep_F'
			this.vbool198_rep_rep_rep_F = new Bernoulli[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vbool198_rep_rep_rep_F'
				this.vbool198_rep_rep_rep_F[nMatches] = new Bernoulli[2][];
			}
			// Create array for replicates of 'vbool201_B'
			this.vbool201_B = new Bernoulli[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vbool201_B'
				this.vbool201_B[nMatches] = new Bernoulli[2][];
			}
			// Create array for replicates of 'Under_performing_B'
			this.Under_performing_B = new Bernoulli[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'Under_performing_B'
				this.Under_performing_B[nMatches] = new Bernoulli[2][];
			}
			// Create array for replicates of 'vdouble1245_B'
			this.vdouble1245_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble1245_B'
				this.vdouble1245_B[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble1243_use_B'
			this.vdouble1243_use_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble1243_use_B'
				this.vdouble1243_use_B[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble1241_B'
			this.vdouble1241_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble1241_B'
				this.vdouble1241_B[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble1239_B'
			this.vdouble1239_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble1239_B'
				this.vdouble1239_B[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble1222_F'
			this.vdouble1222_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble1222_F'
				this.vdouble1222_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'player_perf_t__n_1_1__B'
			this.player_perf_t__n_1_1__B = new DistributionStructArray<Gaussian,double>[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'player_perf_t__n_1_1__B'
				this.player_perf_t__n_1_1__B[nMatches] = new DistributionStructArray<Gaussian,double>[2][];
			}
			// Create array for replicates of 'player_perf_t__n_item0_uses_B'
			this.player_perf_t__n_item0_uses_B = new DistributionStructArray<Gaussian,double>[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'player_perf_t__n_item0_uses' Backwards messages.
				this.player_perf_t__n_item0_uses_B[nMatches] = new DistributionStructArray<Gaussian,double>[2];
			}
			// Create array for replicates of 'player_perf_t__n_item0_rep_F_marginal'
			this.player_perf_t__n_item0_rep_F_marginal = new DistributionStructArray<Gaussian,double>[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'player_perf_t__n_item0_rep_F_marginal'
				this.player_perf_t__n_item0_rep_F_marginal[nMatches] = new DistributionStructArray<Gaussian,double>[2];
			}
			// Create array for replicates of 'player_perf_t__n_item0_rep_B_toDef'
			this.player_perf_t__n_item0_rep_B_toDef = new DistributionStructArray<Gaussian,double>[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'player_perf_t__n_item0_rep_B_toDef'
				this.player_perf_t__n_item0_rep_B_toDef[nMatches] = new DistributionStructArray<Gaussian,double>[2];
			}
			// Create array for replicates of 'player_perf_t__n_item0_rep_F'
			this.player_perf_t__n_item0_rep_F = new DistributionStructArray<Gaussian,double>[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'player_perf_t__n_item0_rep_F'
				this.player_perf_t__n_item0_rep_F[nMatches] = new DistributionStructArray<Gaussian,double>[2][];
			}
			// Create array for replicates of 'player_perf_t__n_0_0__B'
			this.player_perf_t__n_0_0__B = new DistributionStructArray<Gaussian,double>[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'player_perf_t__n_0_0__B'
				this.player_perf_t__n_0_0__B[nMatches] = new DistributionStructArray<Gaussian,double>[2][];
			}
			// Create array for replicates of 'vdouble1239_F'
			this.vdouble1239_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble1239_F'
				this.vdouble1239_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble1241_F'
			this.vdouble1241_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble1241_F'
				this.vdouble1241_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble1243_F'
			this.vdouble1243_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble1243_F'
				this.vdouble1243_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble1245_F'
			this.vdouble1245_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble1245_F'
				this.vdouble1245_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'Under_performing_F'
			this.Under_performing_F = new Bernoulli[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'Under_performing_F'
				this.Under_performing_F[nMatches] = new Bernoulli[2][];
			}
			// Create array for replicates of 'vbool197_rep_rep_rep_B'
			this.vbool197_rep_rep_rep_B = new Bernoulli[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vbool197_rep_rep_rep_B'
				this.vbool197_rep_rep_rep_B[nMatches] = new Bernoulli[2][];
			}
			this.Constant_isDone = true;
		}

		/// <summary>
		/// Returns the marginal distribution for 'deathcount' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> DeathcountMarginal()
		{
			return this.deathcount_marginal_F;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde9_isDone = false;
					this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5_isDone = false;
					this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__3410_isDone = false;
					this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl11_isDone = false;
				}
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam1_isDone = false;
			}
			this.Changed_skills__gamma_();
			this.Changed_vdouble__345();
			this.Changed_skills__tau_();
			this.Changed_vbool__53();
			this.Changed_vdouble__340();
			this.Changed_vint____54();
			this.Changed_PlayerInTeam_time_passed();
			this.Changed_PlayerInTeam_quit();
			this.Changed_Match_time_m();
			this.Changed_deathcount_PlayerInTeam();
			this.Changed_killcount_PlayerInTeam();
			this.Changed_PlayerIndex();
			this.Changed_team2wins();
			this.Constant();
			this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde9(initialise);
			this.Changed_PlayerInTeam();
			this.Changed_p_time_m__t__n_PlayerInTeam();
			this.Changed_Match_time_m_p_time_m__t__n_PlayerInTeam();
			this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_5(initialise);
			this.Changed_PlayerIndex_PlayerInTeam_vdouble__345();
			this.Changed_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__345();
			this.Changed_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__345();
			this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__3410(initialise);
			this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_quit_vdoubl11(initialise);
			this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam1(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="PlayerInTeam") {
				return this.PlayerInTeam;
			}
			if (variableName=="PlayerIndex") {
				return this.PlayerIndex;
			}
			if (variableName=="killcount") {
				return this.killcount;
			}
			if (variableName=="deathcount") {
				return this.deathcount;
			}
			if (variableName=="team2wins") {
				return this.team2wins;
			}
			if (variableName=="Match_time_m") {
				return this.Match_time_m;
			}
			if (variableName=="p_time_m__t__n") {
				return this.p_time_m__t__n;
			}
			if (variableName=="quit") {
				return this.quit;
			}
			if (variableName=="time_passed") {
				return this.time_passed;
			}
			if (variableName=="vint____54") {
				return this.vint____54;
			}
			if (variableName=="vdouble__340") {
				return this.vdouble__340;
			}
			if (variableName=="vbool__53") {
				return this.vbool__53;
			}
			if (variableName=="skills__tau_") {
				return this.skills__tau_;
			}
			if (variableName=="vdouble__345") {
				return this.vdouble__345;
			}
			if (variableName=="skills__gamma_") {
				return this.skills__gamma_;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'killcount' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> KillcountMarginal()
		{
			return this.killcount_marginal_F;
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="skills__gamma_") {
				return this.Skills__gamma_Marginal();
			}
			if (variableName=="vdouble__345") {
				return this.Vdouble__345Marginal();
			}
			if (variableName=="skills__tau_") {
				return this.Skills__tau_Marginal();
			}
			if (variableName=="vbool__53") {
				return this.Vbool__53Marginal();
			}
			if (variableName=="vdouble__340") {
				return this.Vdouble__340Marginal();
			}
			if (variableName=="vint____54") {
				return this.Vint____54Marginal();
			}
			if (variableName=="time_passed") {
				return this.Time_passedMarginal();
			}
			if (variableName=="quit") {
				return this.QuitMarginal();
			}
			if (variableName=="Match_time_m") {
				return this.Match_time_mMarginal();
			}
			if (variableName=="deathcount") {
				return this.DeathcountMarginal();
			}
			if (variableName=="killcount") {
				return this.KillcountMarginal();
			}
			if (variableName=="PlayerIndex") {
				return this.PlayerIndexMarginal();
			}
			if (variableName=="team2wins") {
				return this.Team2winsMarginal();
			}
			if (variableName=="PlayerInTeam") {
				return this.PlayerInTeamMarginal();
			}
			if (variableName=="p_time_m__t__n") {
				return this.P_time_m__t__nMarginal();
			}
			if (variableName=="vbool197") {
				return this.Vbool197Marginal();
			}
			if (variableName=="vbool198") {
				return this.Vbool198Marginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		/// <summary>
		/// Returns the marginal distribution for 'Match_time_m' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Match_time_mMarginal()
		{
			return this.Match_time_m_marginal_F;
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>
		/// Returns the marginal distribution for 'p_time_m__t__n' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> P_time_m__t__nMarginal()
		{
			return this.p_time_m__t__n_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'PlayerIndex' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[][][]> PlayerIndexMarginal()
		{
			return this.PlayerIndex_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'PlayerInTeam' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[][]> PlayerInTeamMarginal()
		{
			return this.PlayerInTeam_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'quit' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]> QuitMarginal()
		{
			return this.quit_marginal_F;
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="PlayerInTeam") {
				this.PlayerInTeam = (int[][])value;
				return ;
			}
			if (variableName=="PlayerIndex") {
				this.PlayerIndex = (int[][][])value;
				return ;
			}
			if (variableName=="killcount") {
				this.killcount = (double[][][])value;
				return ;
			}
			if (variableName=="deathcount") {
				this.deathcount = (double[][][])value;
				return ;
			}
			if (variableName=="team2wins") {
				this.team2wins = (int[])value;
				return ;
			}
			if (variableName=="Match_time_m") {
				this.Match_time_m = (double[])value;
				return ;
			}
			if (variableName=="p_time_m__t__n") {
				this.p_time_m__t__n = (double[][][])value;
				return ;
			}
			if (variableName=="quit") {
				this.quit = (bool[][][])value;
				return ;
			}
			if (variableName=="time_passed") {
				this.time_passed = (double[][][])value;
				return ;
			}
			if (variableName=="vint____54") {
				this.vint____54 = (int[][])value;
				return ;
			}
			if (variableName=="vdouble__340") {
				this.vdouble__340 = (double[])value;
				return ;
			}
			if (variableName=="vbool__53") {
				this.vbool__53 = (bool[])value;
				return ;
			}
			if (variableName=="skills__tau_") {
				this.skills__tau_ = (double[])value;
				return ;
			}
			if (variableName=="vdouble__345") {
				this.vdouble__345 = (double[])value;
				return ;
			}
			if (variableName=="skills__gamma_") {
				this.skills__gamma_ = (double[])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'skills__gamma_' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Skills__gamma_Marginal()
		{
			return this.skills__gamma__marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'skills__tau_' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Skills__tau_Marginal()
		{
			return this.skills__tau__marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'team2wins' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[]> Team2winsMarginal()
		{
			return this.team2wins_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'time_passed' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> Time_passedMarginal()
		{
			return this.time_passed_marginal_F;
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool__53' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> Vbool__53Marginal()
		{
			return this.vbool__53_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool197' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool197Marginal()
		{
			return this.vbool197_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool198' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool198Marginal()
		{
			return this.vbool198_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__340' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__340Marginal()
		{
			return this.vdouble__340_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__345' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__345Marginal()
		{
			return this.vdouble__345_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vint____54' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[][]> Vint____54Marginal()
		{
			return this.vint____54_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
