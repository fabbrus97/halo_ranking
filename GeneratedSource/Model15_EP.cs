// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;
using Microsoft.ML.Probabilistic.Collections;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.4.2203.202 at 17:10 on gioved√¨ 7 luglio 2022.
	/// </remarks>
	public partial class Model15_EP : IGeneratedAlgorithm
	{
		#region Fields
		public double[][] Avg_play_time_team_reduced;
		/// <summary>True if Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam3 has executed. Set this to false to force re-execution of Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam3</summary>
		public bool Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam3_isDone;
		/// <summary>True if Changed_deathcount_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_Pla15 has executed. Set this to false to force re-execution of Changed_deathcount_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_Pla15</summary>
		public bool Changed_deathcount_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_Pla15_isDone;
		/// <summary>True if Changed_deathcount_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_Pla15 has performed initialisation. Set this to false to force re-execution of Changed_deathcount_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_Pla15</summary>
		public bool Changed_deathcount_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_Pla15_isInitialised;
		/// <summary>True if Changed_deathcount_PlayerInTeam has executed. Set this to false to force re-execution of Changed_deathcount_PlayerInTeam</summary>
		public bool Changed_deathcount_PlayerInTeam_isDone;
		/// <summary>True if Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_v14 has executed. Set this to false to force re-execution of Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_v14</summary>
		public bool Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_v14_isDone;
		/// <summary>True if Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_v14 has performed initialisation. Set this to false to force re-execution of Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_v14</summary>
		public bool Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_v14_isInitialised;
		/// <summary>True if Changed_killcount_PlayerInTeam has executed. Set this to false to force re-execution of Changed_killcount_PlayerInTeam</summary>
		public bool Changed_killcount_PlayerInTeam_isDone;
		/// <summary>True if Changed_Match_time_m has executed. Set this to false to force re-execution of Changed_Match_time_m</summary>
		public bool Changed_Match_time_m_isDone;
		/// <summary>True if Changed_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__198 has executed. Set this to false to force re-execution of Changed_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__198</summary>
		public bool Changed_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__198_isDone;
		/// <summary>True if Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1911 has executed. Set this to false to force re-execution of Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1911</summary>
		public bool Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1911_isDone;
		/// <summary>True if Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1911 has performed initialisation. Set this to false to force re-execution of Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1911</summary>
		public bool Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1911_isInitialised;
		/// <summary>True if Changed_Match_time_m_p_time_m__t__n_PlayerInTeam has executed. Set this to false to force re-execution of Changed_Match_time_m_p_time_m__t__n_PlayerInTeam</summary>
		public bool Changed_Match_time_m_p_time_m__t__n_PlayerInTeam_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde4 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde4</summary>
		public bool Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde4_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde4 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde4</summary>
		public bool Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde4_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdoubl2 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdoubl2</summary>
		public bool Changed_numberOfIterationsDecreased_Init_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdoubl2_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdoubl2 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdoubl2</summary>
		public bool Changed_numberOfIterationsDecreased_Init_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdoubl2_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__1910 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__1910</summary>
		public bool Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__1910_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__1910 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__1910</summary>
		public bool Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__1910_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__199_Init_deathcou9 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__199_Init_deathcou9</summary>
		public bool Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__199_Init_deathcou9_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__199_Init_deathcou9 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__199_Init_deathcou9</summary>
		public bool Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__199_Init_deathcou9_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_7 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_7</summary>
		public bool Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_7_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_7 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_7</summary>
		public bool Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_7_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_17 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_17</summary>
		public bool Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_17_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_17 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_17</summary>
		public bool Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_17_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_vdouble__198_vdouble__199_Init_deathcount_killcount_Match_time_m8 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_vdouble__198_vdouble__199_Init_deathcount_killcount_Match_time_m8</summary>
		public bool Changed_numberOfIterationsDecreased_vdouble__198_vdouble__199_Init_deathcount_killcount_Match_time_m8_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_vdouble__198_vdouble__199_Init_deathcount_killcount_Match_time_m8 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_vdouble__198_vdouble__199_Init_deathcount_killcount_Match_time_m8</summary>
		public bool Changed_numberOfIterationsDecreased_vdouble__198_vdouble__199_Init_deathcount_killcount_Match_time_m8_isInitialised;
		/// <summary>True if Changed_p_time_m__t__n_PlayerInTeam has executed. Set this to false to force re-execution of Changed_p_time_m__t__n_PlayerInTeam</summary>
		public bool Changed_p_time_m__t__n_PlayerInTeam_isDone;
		/// <summary>True if Changed_PlayerIndex has executed. Set this to false to force re-execution of Changed_PlayerIndex</summary>
		public bool Changed_PlayerIndex_isDone;
		/// <summary>True if Changed_PlayerInTeam has executed. Set this to false to force re-execution of Changed_PlayerInTeam</summary>
		public bool Changed_PlayerInTeam_isDone;
		/// <summary>True if Changed_team2wins has executed. Set this to false to force re-execution of Changed_team2wins</summary>
		public bool Changed_team2wins_isDone;
		/// <summary>True if Changed_vdouble__198 has executed. Set this to false to force re-execution of Changed_vdouble__198</summary>
		public bool Changed_vdouble__198_isDone;
		/// <summary>True if Changed_vdouble__198_vdouble__199 has executed. Set this to false to force re-execution of Changed_vdouble__198_vdouble__199</summary>
		public bool Changed_vdouble__198_vdouble__199_isDone;
		/// <summary>True if Changed_vdouble__199 has executed. Set this to false to force re-execution of Changed_vdouble__199</summary>
		public bool Changed_vdouble__199_isDone;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		public Gaussian[][][] death_count_m__t__n_B;
		public Gaussian[][][] death_count_m__t__n_F;
		/// <summary>Field backing the deathcount property</summary>
		private double[][][] Deathcount;
		/// <summary>Message to marginal of 'deathcount'</summary>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> deathcount_marginal_F;
		/// <summary>Messages from uses of 'Diff_2_'</summary>
		public Gaussian[][] Diff_2__uses_B;
		public Gaussian[][][] kill_count_m__t__n_B;
		public Gaussian[][][] kill_count_m__t__n_F;
		/// <summary>Field backing the killcount property</summary>
		private double[][][] Killcount;
		/// <summary>Message to marginal of 'killcount'</summary>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> killcount_marginal_F;
		/// <summary>Field backing the Match_time_m property</summary>
		private double[] match_time_m;
		/// <summary>Message to marginal of 'Match_time_m'</summary>
		public DistributionStructArray<Gaussian,double> Match_time_m_marginal_F;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Field backing the p_time_m__t__n property</summary>
		private double[][][] P_time_m__t__n;
		/// <summary>Message to marginal of 'p_time_m__t__n'</summary>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> p_time_m__t__n_marginal_F;
		public Gaussian[][][] perf_from_ds_F;
		public Gaussian[][][] perf_n_m_F;
		public Gaussian[][][] Perfomance_opposing_team_0__F;
		public Gaussian[][][] Perfomance_opposing_team_1__F;
		public Gaussian[][][] Perfomance_opposing_team_B;
		public Gaussian[][][] Perfomance_opposing_team_F;
		/// <summary>Messages from uses of 'Perfomance_opposing_team'</summary>
		public Gaussian[][][][] Perfomance_opposing_team_uses_B;
		/// <summary>Messages to uses of 'Perfomance_opposing_team'</summary>
		public Gaussian[][][][] Perfomance_opposing_team_uses_F;
		public DistributionStructArray<Gaussian,double>[][][] player_perf_t__n_0_0__B;
		public DistributionStructArray<Gaussian,double>[][][] player_perf_t__n_1_1__B;
		public DistributionStructArray<Gaussian,double>[][] player_perf_t__n_depth1_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>[] player_perf_t__n_F;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;DistributionStructArray&lt;Gaussian, double&gt;&gt;</summary>
		public DistributionStructArray<Gaussian,double>[][] player_perf_t__n_item0_rep_B_toDef;
		public DistributionStructArray<Gaussian,double>[][][] player_perf_t__n_item0_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;DistributionStructArray&lt;Gaussian, double&gt;&gt;</summary>
		public DistributionStructArray<Gaussian,double>[][] player_perf_t__n_item0_rep_F_marginal;
		/// <summary>Messages from uses of 'player_perf_t__n_item0'</summary>
		public DistributionStructArray<Gaussian,double>[][] player_perf_t__n_item0_uses_B;
		/// <summary>Messages to uses of 'player_perf_t__n_item0'</summary>
		public DistributionStructArray<Gaussian,double>[][] player_perf_t__n_item0_uses_F;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;DistributionStructArray&lt;Gaussian, double&gt;&gt;</summary>
		public DistributionStructArray<Gaussian,double>[][] player_perf_t__n_item1_rep_B_toDef;
		public DistributionStructArray<Gaussian,double>[][][] player_perf_t__n_item1_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;DistributionStructArray&lt;Gaussian, double&gt;&gt;</summary>
		public DistributionStructArray<Gaussian,double>[][] player_perf_t__n_item1_rep_F_marginal;
		/// <summary>Messages from uses of 'player_perf_t__n_item1'</summary>
		public DistributionStructArray<Gaussian,double>[][] player_perf_t__n_item1_uses_B;
		/// <summary>Messages to uses of 'player_perf_t__n_item1'</summary>
		public DistributionStructArray<Gaussian,double>[][] player_perf_t__n_item1_uses_F;
		/// <summary>Messages from uses of 'player_perf_t__n'</summary>
		public Gaussian[][][][] player_perf_t__n_uses_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Gaussian&gt;</summary>
		public Gaussian[][][] player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef;
		/// <summary>Messages to uses of 'player_perf_t__n'</summary>
		public Gaussian[][][][] player_perf_t__n_uses_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Gaussian&gt;</summary>
		public Gaussian[][][] player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal;
		/// <summary>Field backing the PlayerIndex property</summary>
		private int[][][] playerIndex;
		/// <summary>Message to marginal of 'PlayerIndex'</summary>
		public PointMass<int[][][]> PlayerIndex_marginal_F;
		/// <summary>Field backing the PlayerInTeam property</summary>
		private int[][] playerInTeam;
		/// <summary>Message to marginal of 'PlayerInTeam'</summary>
		public PointMass<int[][]> PlayerInTeam_marginal_F;
		public DistributionStructArray<Gaussian,double> skills_prior_F;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F;
		/// <summary>Message to marginal of 'skills_prior'</summary>
		public DistributionStructArray<Gaussian,double> skills_prior_marginal_F;
		/// <summary>Message from use of 'skills_prior'</summary>
		public DistributionStructArray<Gaussian,double> skills_prior_use_B;
		/// <summary>Buffer for GetDeepJaggedItemsOp&lt;double&gt;.ItemsAverageConditional&lt;DistributionStructArray&lt;Gaussian, double&gt;, DistributionRefArray&lt;DistributionStructArray&lt;Gaussian, double&gt;, double[]&gt;, DistributionStructArray&lt;Gaussian, double&gt;, Gaussian&gt;</summary>
		public DistributionStructArray<Gaussian,double> skills_prior_use_F_marginal;
		/// <summary>Field backing the team2wins property</summary>
		private int[] Team2wins;
		/// <summary>Message to marginal of 'team2wins'</summary>
		public PointMass<int[]> team2wins_marginal_F;
		/// <summary>The constant 'vc_Times_p_time'</summary>
		public double[][][] vc_Times_p_time;
		/// <summary>Field backing the vdouble__198 property</summary>
		private double[] Vdouble__198;
		/// <summary>Message to marginal of 'vdouble__198'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__198_marginal_F;
		/// <summary>Field backing the vdouble__199 property</summary>
		private double[] Vdouble__199;
		/// <summary>Message to marginal of 'vdouble__199'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__199_marginal_F;
		/// <summary>Message to marginal of 'vdouble__200'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__200_marginal_F;
		/// <summary>Buffer for VariablePointOp_Rprop.MarginalAverageConditional</summary>
		public RpropBufferData[] vdouble__200_use_B_nMatches__buffer;
		public double[][] vdouble683_reduced;
		public double[][] vdouble690_reduced;
		public double[][] vdouble691_reduced;
		public Gaussian[][][] vdouble692_F;
		public Gaussian[][][] vdouble693_F;
		public double[][] vdouble695_reduced;
		public double[][] vdouble696_reduced;
		public Gaussian[][][] vdouble697_B;
		public Gaussian[][][] vdouble697_F;
		public Gaussian[][][] vdouble698_B;
		public Gaussian[][][] vdouble698_F;
		public Gaussian[][][] vdouble701_F;
		public Gaussian[][][] vdouble703_B;
		public Gaussian[][][] vdouble703_F;
		public Gaussian[][][] vdouble704_B;
		public Gaussian[][][] vdouble704_F;
		public Gaussian[][][] vdouble707_F;
		/// <summary>Message from use of 'vdouble707'</summary>
		public Gaussian[][][] vdouble707_use_B;
		public Gaussian[][][] vdouble711_F;
		public Gaussian[][][] vdouble713_B;
		public Gaussian[][][] vdouble713_F;
		public Gaussian[][][] vdouble714_B;
		public Gaussian[][][] vdouble714_F;
		public Gaussian[][][] vdouble717_F;
		/// <summary>Message from use of 'vdouble717'</summary>
		public Gaussian[][][] vdouble717_use_B;
		#endregion

		#region Properties
		/// <summary>The externally-specified value of 'deathcount'</summary>
		public double[][][] deathcount
		{
			get {
				return this.Deathcount;
			}
			set {
				if ((value!=null)&&(value.Length!=1000)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+1000)+" was expected for variable \'deathcount\'");
				}
				this.Deathcount = value;
				this.numberOfIterationsDone = 0;
				this.Changed_deathcount_PlayerInTeam_isDone = false;
				this.Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_17_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_7_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde4_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vdouble__198_vdouble__199_Init_deathcount_killcount_Match_time_m8_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__199_Init_deathcou9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__1910_isInitialised = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1911_isInitialised = false;
				this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_v14_isInitialised = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_Pla15_isDone = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam3_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'killcount'</summary>
		public double[][][] killcount
		{
			get {
				return this.Killcount;
			}
			set {
				if ((value!=null)&&(value.Length!=1000)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+1000)+" was expected for variable \'killcount\'");
				}
				this.Killcount = value;
				this.numberOfIterationsDone = 0;
				this.Changed_killcount_PlayerInTeam_isDone = false;
				this.Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_17_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_7_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde4_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vdouble__198_vdouble__199_Init_deathcount_killcount_Match_time_m8_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__199_Init_deathcou9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__1910_isInitialised = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1911_isInitialised = false;
				this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_v14_isDone = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_Pla15_isDone = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam3_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'Match_time_m'</summary>
		public double[] Match_time_m
		{
			get {
				return this.match_time_m;
			}
			set {
				if ((value!=null)&&(value.Length!=1000)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+1000)+" was expected for variable \'Match_time_m\'");
				}
				this.match_time_m = value;
				this.numberOfIterationsDone = 0;
				this.Changed_Match_time_m_isDone = false;
				this.Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_17_isInitialised = false;
				this.Changed_Match_time_m_p_time_m__t__n_PlayerInTeam_isDone = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_7_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde4_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vdouble__198_vdouble__199_Init_deathcount_killcount_Match_time_m8_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__199_Init_deathcou9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__1910_isInitialised = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1911_isDone = false;
				this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_v14_isDone = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_Pla15_isDone = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam3_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdoubl2_isInitialised = false;
				this.Changed_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__198_isDone = false;
			}
		}

		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'p_time_m__t__n'</summary>
		public double[][][] p_time_m__t__n
		{
			get {
				return this.P_time_m__t__n;
			}
			set {
				if ((value!=null)&&(value.Length!=1000)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+1000)+" was expected for variable \'p_time_m__t__n\'");
				}
				this.P_time_m__t__n = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_17_isInitialised = false;
				this.Changed_p_time_m__t__n_PlayerInTeam_isDone = false;
				this.Changed_Match_time_m_p_time_m__t__n_PlayerInTeam_isDone = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_7_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde4_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vdouble__198_vdouble__199_Init_deathcount_killcount_Match_time_m8_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__199_Init_deathcou9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__1910_isDone = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1911_isDone = false;
				this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_v14_isDone = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_Pla15_isDone = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam3_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdoubl2_isInitialised = false;
				this.Changed_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__198_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'PlayerIndex'</summary>
		public int[][][] PlayerIndex
		{
			get {
				return this.playerIndex;
			}
			set {
				if ((value!=null)&&(value.Length!=1000)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+1000)+" was expected for variable \'PlayerIndex\'");
				}
				this.playerIndex = value;
				this.numberOfIterationsDone = 0;
				this.Changed_PlayerIndex_isDone = false;
				this.Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_17_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_7_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde4_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vdouble__198_vdouble__199_Init_deathcount_killcount_Match_time_m8_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__199_Init_deathcou9_isDone = false;
				this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__1910_isDone = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1911_isDone = false;
				this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_v14_isDone = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_Pla15_isDone = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam3_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdoubl2_isInitialised = false;
				this.Changed_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__198_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'PlayerInTeam'</summary>
		public int[][] PlayerInTeam
		{
			get {
				return this.playerInTeam;
			}
			set {
				if ((value!=null)&&(value.Length!=1000)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+1000)+" was expected for variable \'PlayerInTeam\'");
				}
				this.playerInTeam = value;
				this.numberOfIterationsDone = 0;
				this.Changed_deathcount_PlayerInTeam_isDone = false;
				this.Changed_killcount_PlayerInTeam_isDone = false;
				this.Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_17_isInitialised = false;
				this.Changed_PlayerInTeam_isDone = false;
				this.Changed_p_time_m__t__n_PlayerInTeam_isDone = false;
				this.Changed_Match_time_m_p_time_m__t__n_PlayerInTeam_isDone = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_7_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde4_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vdouble__198_vdouble__199_Init_deathcount_killcount_Match_time_m8_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__199_Init_deathcou9_isDone = false;
				this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__1910_isDone = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1911_isDone = false;
				this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_v14_isDone = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_Pla15_isDone = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam3_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdoubl2_isInitialised = false;
				this.Changed_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__198_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'team2wins'</summary>
		public int[] team2wins
		{
			get {
				return this.Team2wins;
			}
			set {
				if ((value!=null)&&(value.Length!=1000)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+1000)+" was expected for variable \'team2wins\'");
				}
				this.Team2wins = value;
				this.numberOfIterationsDone = 0;
				this.Changed_team2wins_isDone = false;
				this.Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_17_isDone = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_7_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde4_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vdouble__198_vdouble__199_Init_deathcount_killcount_Match_time_m8_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__199_Init_deathcou9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__1910_isInitialised = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1911_isInitialised = false;
				this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_v14_isInitialised = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_Pla15_isInitialised = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam3_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vdouble__198'</summary>
		public double[] vdouble__198
		{
			get {
				return this.Vdouble__198;
			}
			set {
				if ((value!=null)&&(value.Length!=6580)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+6580)+" was expected for variable \'vdouble__198\'");
				}
				this.Vdouble__198 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vdouble__198_isDone = false;
				this.Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_17_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_7_isInitialised = false;
				this.Changed_vdouble__198_vdouble__199_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde4_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vdouble__198_vdouble__199_Init_deathcount_killcount_Match_time_m8_isDone = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__199_Init_deathcou9_isDone = false;
				this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__1910_isDone = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1911_isDone = false;
				this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_v14_isDone = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_Pla15_isDone = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam3_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdoubl2_isInitialised = false;
				this.Changed_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__198_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vdouble__199'</summary>
		public double[] vdouble__199
		{
			get {
				return this.Vdouble__199;
			}
			set {
				if ((value!=null)&&(value.Length!=6580)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+6580)+" was expected for variable \'vdouble__199\'");
				}
				this.Vdouble__199 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vdouble__199_isDone = false;
				this.Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_17_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_7_isInitialised = false;
				this.Changed_vdouble__198_vdouble__199_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde4_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vdouble__198_vdouble__199_Init_deathcount_killcount_Match_time_m8_isDone = false;
				this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__199_Init_deathcou9_isDone = false;
				this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__1910_isDone = false;
				this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1911_isDone = false;
				this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_v14_isDone = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_Pla15_isDone = false;
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam3_isDone = false;
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of deathcount and killcount and Match_time_m and numberOfIterations and p_time_m__t__n and PlayerIndex and PlayerInTeam and team2wins and vdouble__198 and vdouble__199</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam3(int numberOfIterations)
		{
			if (this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam3_isDone) {
				return ;
			}
			// Create array for 'skills_prior_marginal' Forwards messages.
			this.skills_prior_marginal_F = new DistributionStructArray<Gaussian,double>(6580);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'player_perf_t__n_item1_uses' Forwards messages.
				this.player_perf_t__n_item1_uses_F[nMatches][1] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][1]);
				for(int _a4 = 0; _a4<this.playerInTeam[nMatches][1]; _a4++) {
					this.player_perf_t__n_item1_uses_F[nMatches][1][_a4] = Gaussian.Uniform();
				}
				// Create array for 'player_perf_t__n_item0_uses' Forwards messages.
				this.player_perf_t__n_item0_uses_F[nMatches][1] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][0]);
				for(int _a3 = 0; _a3<this.playerInTeam[nMatches][0]; _a3++) {
					this.player_perf_t__n_item0_uses_F[nMatches][1][_a3] = Gaussian.Uniform();
				}
				// Create array for 'player_perf_t__n_item0_uses' Backwards messages.
				this.player_perf_t__n_item0_uses_B[nMatches][0] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][0]);
				for(int _a3 = 0; _a3<this.playerInTeam[nMatches][0]; _a3++) {
					this.player_perf_t__n_item0_uses_B[nMatches][0][_a3] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble693_B'
			Gaussian[][][] vdouble693_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble693_B'
				vdouble693_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble693_B'
					vdouble693_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						if (nTeamsPerMatch==0) {
							vdouble693_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						}
					}
				}
			}
			// Create array for replicates of 'vdouble692_B'
			Gaussian[][][] vdouble692_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble692_B'
				vdouble692_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble692_B'
					vdouble692_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						if (nTeamsPerMatch==0) {
							vdouble692_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						}
					}
				}
			}
			// Create array for replicates of 'SumTeam1_F'
			Gaussian[] SumTeam1_F = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				SumTeam1_F[nMatches] = Gaussian.Uniform();
			}
			// Create array for replicates of 'SumTeam2_F'
			Gaussian[] SumTeam2_F = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				SumTeam2_F[nMatches] = Gaussian.Uniform();
			}
			// Create array for replicates of 'Diff_F'
			Gaussian[] Diff_F = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				Diff_F[nMatches] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble730_F'
			Gaussian[] vdouble730_F = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Team2wins[nMatches]==1) {
					vdouble730_F[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble730_B'
			Gaussian[] vdouble730_B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Team2wins[nMatches]==1) {
					vdouble730_B[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'Diff_1__B'
			Gaussian[] Diff_1__B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Team2wins[nMatches]==1) {
					Diff_1__B[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'Diff_B'
			Gaussian[] Diff_B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				Diff_B[nMatches] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble728_F'
			Gaussian[] vdouble728_F = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Team2wins[nMatches]==0) {
					vdouble728_F[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble728_B'
			Gaussian[] vdouble728_B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Team2wins[nMatches]==0) {
					vdouble728_B[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'Diff_0__B'
			Gaussian[] Diff_0__B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Team2wins[nMatches]==0) {
					Diff_0__B[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'Diff_2__uses_F'
			Gaussian[][] Diff_2__uses_F = new Gaussian[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					// Create array for 'Diff_2__uses' Forwards messages.
					Diff_2__uses_F[nMatches] = new Gaussian[2];
					Diff_2__uses_F[nMatches][1] = Gaussian.Uniform();
					Diff_2__uses_F[nMatches][0] = Gaussian.Uniform();
					this.Diff_2__uses_B[nMatches][1] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble726_F'
			Gaussian[] vdouble726_F = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					vdouble726_F[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble726_B'
			Gaussian[] vdouble726_B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					vdouble726_B[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vbool101_B'
			Bernoulli[] vbool101_B = new Bernoulli[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					vbool101_B[nMatches] = Bernoulli.Uniform();
					// Message to 'vbool101' from Not factor
					vbool101_B[nMatches] = BooleanNotOp.BAverageConditional(true);
				}
			}
			// Create array for replicates of 'vdouble724_F'
			Gaussian[] vdouble724_F = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					vdouble724_F[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble724_B'
			Gaussian[] vdouble724_B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					vdouble724_B[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vbool98_B'
			Bernoulli[] vbool98_B = new Bernoulli[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					vbool98_B[nMatches] = Bernoulli.Uniform();
					// Message to 'vbool98' from Not factor
					vbool98_B[nMatches] = BooleanNotOp.BAverageConditional(true);
				}
			}
			// Create array for replicates of 'Diff_2__B'
			Gaussian[] Diff_2__B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					Diff_2__B[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'SumTeam1_B'
			Gaussian[] SumTeam1_B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				SumTeam1_B[nMatches] = Gaussian.Uniform();
			}
			// Create array for replicates of 'player_perf_t__n_item0_B'
			DistributionStructArray<Gaussian,double>[] player_perf_t__n_item0_B = new DistributionStructArray<Gaussian,double>[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'player_perf_t__n_item0' Backwards messages.
				player_perf_t__n_item0_B[nMatches] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][0]);
				for(int _a3 = 0; _a3<this.playerInTeam[nMatches][0]; _a3++) {
					player_perf_t__n_item0_B[nMatches][_a3] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'SumTeam2_B'
			Gaussian[] SumTeam2_B = new Gaussian[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				SumTeam2_B[nMatches] = Gaussian.Uniform();
			}
			// Create array for replicates of 'player_perf_t__n_item1_B'
			DistributionStructArray<Gaussian,double>[] player_perf_t__n_item1_B = new DistributionStructArray<Gaussian,double>[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'player_perf_t__n_item1' Backwards messages.
				player_perf_t__n_item1_B[nMatches] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][1]);
				for(int _a4 = 0; _a4<this.playerInTeam[nMatches][1]; _a4++) {
					player_perf_t__n_item1_B[nMatches][_a4] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble701_B'
			Gaussian[][][] vdouble701_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble701_B'
				vdouble701_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble701_B'
					vdouble701_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble701_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'vdouble711_B'
			Gaussian[][][] vdouble711_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble711_B'
				vdouble711_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'vdouble711_B'
					vdouble711_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble711_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'perf_n_m_B'
			Gaussian[][][] perf_n_m_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'perf_n_m_B'
				perf_n_m_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'perf_n_m_B'
					perf_n_m_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						perf_n_m_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'perf_from_ds_use_B'
			Gaussian[][][] perf_from_ds_use_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'perf_from_ds_use_B'
				perf_from_ds_use_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'perf_from_ds_use_B'
					perf_from_ds_use_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						perf_from_ds_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				this.skills_prior_use_F_marginal = GetDeepJaggedItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.skills_prior_F, this.skills_prior_use_B, this.skills_prior_use_F_marginal);
				for(int nMatches = 0; nMatches<1000; nMatches++) {
					// Message to 'skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' from GetDeepJaggedItems factor
					this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F[nMatches] = GetDeepJaggedItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>,Gaussian>(this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B[nMatches], this.skills_prior_F, this.skills_prior_use_F_marginal, this.playerIndex, nMatches, this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F[nMatches]);
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Message to 'perf_from_ds' from Gaussian factor
							this.perf_from_ds_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.SampleAverageConditional(this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 1.0);
							// Message to 'perf_n_m' from Product factor
							this.perf_n_m_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(this.perf_from_ds_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'player_perf_t__n' from Ratio factor
							this.player_perf_t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.RatioAverageConditional(this.perf_n_m_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.match_time_m[nMatches]);
							this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.Marginal<Gaussian>(this.player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'player_perf_t__n_uses' from Replicate factor
							this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1], this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 1, this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
							// Message to 'vdouble701' from Product factor
							this.vdouble701_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(2.5567203850565789, this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
							// Message to 'vdouble704' from Plus factor
							this.vdouble704_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.SumAverageConditional(this.vdouble701_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble703_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'kill_count_m__t__n' from Product factor
							this.kill_count_m__t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(this.vdouble704_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble707' from Gaussian factor
							this.vdouble707_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.SampleAverageConditional(this.kill_count_m__t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vc_Times_p_time[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble707_use' from Max factor
							this.vdouble707_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = MaxGaussianOp.BAverageConditional(this.Killcount[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0.0, this.vdouble707_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'kill_count_m__t__n' from Gaussian factor
							this.kill_count_m__t__n_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.MeanAverageConditional(this.vdouble707_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vc_Times_p_time[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble704' from Product factor
							this.vdouble704_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.AAverageConditional(this.kill_count_m__t__n_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble703' from Plus factor
							this.vdouble703_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.BAverageConditional(this.vdouble704_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble701_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'Perfomance_opposing_team_uses' from Product factor
							this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = GaussianProductOpBase.BAverageConditional(this.vdouble703_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], -0.54459509911730619);
							// Message to 'player_perf_t__n_uses' from Replicate factor
							this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2], this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 2, this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2]);
							// Message to 'vdouble711' from Product factor
							this.vdouble711_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(-2.7928178121382596, this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2]);
							// Message to 'vdouble714' from Plus factor
							this.vdouble714_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.SumAverageConditional(this.vdouble711_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble713_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'death_count_m__t__n' from Product factor
							this.death_count_m__t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(this.vdouble714_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble717' from Gaussian factor
							this.vdouble717_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.SampleAverageConditional(this.death_count_m__t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vc_Times_p_time[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble717_use' from Max factor
							this.vdouble717_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = MaxGaussianOp.BAverageConditional(this.Deathcount[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0.0, this.vdouble717_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'death_count_m__t__n' from Gaussian factor
							this.death_count_m__t__n_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.MeanAverageConditional(this.vdouble717_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vc_Times_p_time[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble714' from Product factor
							this.vdouble714_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.AAverageConditional(this.death_count_m__t__n_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble713' from Plus factor
							this.vdouble713_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.BAverageConditional(this.vdouble714_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble711_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'Perfomance_opposing_team_uses' from Product factor
							this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = GaussianProductOpBase.BAverageConditional(this.vdouble713_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0.79084835337752024);
							// Message to 'player_perf_t__n_uses' from Replicate factor
							this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0], this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0, this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]);
						}
					}
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][0]; nPlayersMinusPerTeam++) {
						// Message to 'player_perf_t__n_depth1' from Copy factor
						this.player_perf_t__n_depth1_F[nMatches][0][nPlayersMinusPerTeam] = ArrayHelper.SetTo<Gaussian>(this.player_perf_t__n_depth1_F[nMatches][0][nPlayersMinusPerTeam], this.player_perf_t__n_uses_F[nMatches][0][nPlayersMinusPerTeam][0]);
					}
					// Message to 'player_perf_t__n_item0_uses' from Replicate factor
					this.player_perf_t__n_item0_uses_F[nMatches][0] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item0_uses_B[nMatches], this.player_perf_t__n_depth1_F[nMatches][0], 0, this.player_perf_t__n_item0_uses_F[nMatches][0]);
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						if (nTeamsPerMatch==0) {
							this.player_perf_t__n_item0_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.Marginal<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item0_rep_B_toDef[nMatches][nTeamsPerMatch], this.player_perf_t__n_item0_uses_F[nMatches][0], this.player_perf_t__n_item0_rep_F_marginal[nMatches][nTeamsPerMatch]);
							for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
								// Message to 'player_perf_t__n_item0_rep' from Replicate factor
								this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_0_0__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_item0_rep_F_marginal[nMatches][nTeamsPerMatch], nPlayersMinusPerTeam, this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'Perfomance_opposing_team' from Replicate factor
								this.Perfomance_opposing_team_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'vdouble693' from Product factor
								vdouble693_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.BAverageConditional(this.Perfomance_opposing_team_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble691_reduced[nMatches][nTeamsPerMatch]);
								// Message to 'vdouble692' from Ratio factor
								vdouble692_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.AAverageConditional(vdouble693_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Avg_play_time_team_reduced[nMatches][nTeamsPerMatch]);
								// Message to 'vdouble692' from Sum factor
								this.vdouble692_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = FastSumOp.SumAverageConditional(this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'player_perf_t__n_0_0_' from Sum factor
								this.player_perf_t__n_0_0__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(vdouble692_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble692_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_0_0__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'vdouble693' from Ratio factor
								this.vdouble693_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.RatioAverageConditional(this.vdouble692_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Avg_play_time_team_reduced[nMatches][nTeamsPerMatch]);
								// Message to 'Perfomance_opposing_team_0_' from Product factor
								this.Perfomance_opposing_team_0__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(this.vdouble691_reduced[nMatches][nTeamsPerMatch], this.vdouble693_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							}
							this.player_perf_t__n_item0_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.ToDef<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_0_0__B[nMatches][nTeamsPerMatch], this.player_perf_t__n_item0_rep_B_toDef[nMatches][nTeamsPerMatch]);
							// Message to 'player_perf_t__n_item0_uses' from Replicate factor
							this.player_perf_t__n_item0_uses_B[nMatches][0] = ArrayHelper.SetTo<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item0_uses_B[nMatches][0], this.player_perf_t__n_item0_rep_B_toDef[nMatches][nTeamsPerMatch]);
						}
					}
					// Message to 'player_perf_t__n_item0_uses' from Replicate factor
					this.player_perf_t__n_item0_uses_F[nMatches][1] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item0_uses_B[nMatches], this.player_perf_t__n_depth1_F[nMatches][0], 1, this.player_perf_t__n_item0_uses_F[nMatches][1]);
					// Message to 'SumTeam1' from Sum factor
					SumTeam1_F[nMatches] = FastSumOp.SumAverageConditional(this.player_perf_t__n_item0_uses_F[nMatches][1]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][1]; nPlayersMinusPerTeam++) {
						// Message to 'player_perf_t__n_depth1' from Copy factor
						this.player_perf_t__n_depth1_F[nMatches][1][nPlayersMinusPerTeam] = ArrayHelper.SetTo<Gaussian>(this.player_perf_t__n_depth1_F[nMatches][1][nPlayersMinusPerTeam], this.player_perf_t__n_uses_F[nMatches][1][nPlayersMinusPerTeam][0]);
					}
					// Message to 'player_perf_t__n_item1_uses' from Replicate factor
					this.player_perf_t__n_item1_uses_F[nMatches][1] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item1_uses_B[nMatches], this.player_perf_t__n_depth1_F[nMatches][1], 1, this.player_perf_t__n_item1_uses_F[nMatches][1]);
					// Message to 'SumTeam2' from Sum factor
					SumTeam2_F[nMatches] = FastSumOp.SumAverageConditional(this.player_perf_t__n_item1_uses_F[nMatches][1]);
					// Message to 'Diff' from Difference factor
					Diff_F[nMatches] = DoublePlusOp.AAverageConditional(SumTeam1_F[nMatches], SumTeam2_F[nMatches]);
					if (this.Team2wins[nMatches]==1) {
						// Message to 'vdouble730' from Difference factor
						vdouble730_F[nMatches] = DoublePlusOp.AAverageConditional(-0.062759999999999996, Diff_F[nMatches]);
						// Message to 'vdouble730' from IsPositive factor
						vdouble730_B[nMatches] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(true), vdouble730_F[nMatches]);
						// Message to 'Diff_1_' from Difference factor
						Diff_1__B[nMatches] = DoublePlusOp.BAverageConditional(-0.062759999999999996, vdouble730_B[nMatches]);
						// Message to 'Diff' from Copy factor
						Diff_B[nMatches] = ArrayHelper.SetTo<Gaussian>(Diff_B[nMatches], Diff_1__B[nMatches]);
					}
					if (this.Team2wins[nMatches]==0) {
						// Message to 'vdouble728' from Difference factor
						vdouble728_F[nMatches] = DoublePlusOp.AAverageConditional(Diff_F[nMatches], 0.062759999999999996);
						// Message to 'vdouble728' from IsPositive factor
						vdouble728_B[nMatches] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(true), vdouble728_F[nMatches]);
						// Message to 'Diff_0_' from Difference factor
						Diff_0__B[nMatches] = DoublePlusOp.SumAverageConditional(vdouble728_B[nMatches], 0.062759999999999996);
						// Message to 'Diff' from Copy factor
						Diff_B[nMatches] = ArrayHelper.SetTo<Gaussian>(Diff_B[nMatches], Diff_0__B[nMatches]);
					}
					if (this.Team2wins[nMatches]==2) {
						// Message to 'Diff_2__uses' from Replicate factor
						Diff_2__uses_F[nMatches][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.Diff_2__uses_B[nMatches], Diff_F[nMatches], 1, Diff_2__uses_F[nMatches][1]);
						// Message to 'vdouble726' from Difference factor
						vdouble726_F[nMatches] = DoublePlusOp.AAverageConditional(-0.062759999999999996, Diff_2__uses_F[nMatches][1]);
						// Message to 'vdouble726' from IsPositive factor
						vdouble726_B[nMatches] = IsPositiveOp_Proper.XAverageConditional(vbool101_B[nMatches], vdouble726_F[nMatches]);
						// Message to 'Diff_2__uses' from Difference factor
						this.Diff_2__uses_B[nMatches][1] = DoublePlusOp.BAverageConditional(-0.062759999999999996, vdouble726_B[nMatches]);
						// Message to 'Diff_2__uses' from Replicate factor
						Diff_2__uses_F[nMatches][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.Diff_2__uses_B[nMatches], Diff_F[nMatches], 0, Diff_2__uses_F[nMatches][0]);
						// Message to 'vdouble724' from Difference factor
						vdouble724_F[nMatches] = DoublePlusOp.AAverageConditional(Diff_2__uses_F[nMatches][0], 0.062759999999999996);
						// Message to 'vdouble724' from IsPositive factor
						vdouble724_B[nMatches] = IsPositiveOp_Proper.XAverageConditional(vbool98_B[nMatches], vdouble724_F[nMatches]);
						// Message to 'Diff_2__uses' from Difference factor
						this.Diff_2__uses_B[nMatches][0] = DoublePlusOp.SumAverageConditional(vdouble724_B[nMatches], 0.062759999999999996);
						// Message to 'Diff_2_' from Replicate factor
						Diff_2__B[nMatches] = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(this.Diff_2__uses_B[nMatches], Diff_2__B[nMatches]);
						// Message to 'Diff' from Copy factor
						Diff_B[nMatches] = ArrayHelper.SetTo<Gaussian>(Diff_B[nMatches], Diff_2__B[nMatches]);
					}
					// Message to 'SumTeam1' from Difference factor
					SumTeam1_B[nMatches] = DoublePlusOp.SumAverageConditional(Diff_B[nMatches], SumTeam2_F[nMatches]);
					// Message to 'player_perf_t__n_item0_uses' from Sum factor
					this.player_perf_t__n_item0_uses_B[nMatches][1] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(SumTeam1_B[nMatches], SumTeam1_F[nMatches], this.player_perf_t__n_item0_uses_F[nMatches][1], this.player_perf_t__n_item0_uses_B[nMatches][1]);
					// Message to 'player_perf_t__n_item0' from Replicate factor
					player_perf_t__n_item0_B[nMatches] = ReplicateOp_NoDivide.DefAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item0_uses_B[nMatches], player_perf_t__n_item0_B[nMatches]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][0]; nPlayersMinusPerTeam++) {
						// Message to 'player_perf_t__n_uses' from Copy factor
						this.player_perf_t__n_uses_B[nMatches][0][nPlayersMinusPerTeam][0] = ArrayHelper.SetTo<Gaussian>(this.player_perf_t__n_uses_B[nMatches][0][nPlayersMinusPerTeam][0], player_perf_t__n_item0_B[nMatches][nPlayersMinusPerTeam]);
					}
					// Message to 'SumTeam2' from Difference factor
					SumTeam2_B[nMatches] = DoublePlusOp.BAverageConditional(SumTeam1_F[nMatches], Diff_B[nMatches]);
					// Message to 'player_perf_t__n_item1_uses' from Sum factor
					this.player_perf_t__n_item1_uses_B[nMatches][1] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(SumTeam2_B[nMatches], SumTeam2_F[nMatches], this.player_perf_t__n_item1_uses_F[nMatches][1], this.player_perf_t__n_item1_uses_B[nMatches][1]);
					// Message to 'player_perf_t__n_item1_uses' from Replicate factor
					this.player_perf_t__n_item1_uses_F[nMatches][0] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item1_uses_B[nMatches], this.player_perf_t__n_depth1_F[nMatches][1], 0, this.player_perf_t__n_item1_uses_F[nMatches][0]);
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						if (nTeamsPerMatch==1) {
							this.player_perf_t__n_item1_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.Marginal<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item1_rep_B_toDef[nMatches][nTeamsPerMatch], this.player_perf_t__n_item1_uses_F[nMatches][0], this.player_perf_t__n_item1_rep_F_marginal[nMatches][nTeamsPerMatch]);
							for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
								// Message to 'player_perf_t__n_item1_rep' from Replicate factor
								this.player_perf_t__n_item1_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_1_1__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_item1_rep_F_marginal[nMatches][nTeamsPerMatch], nPlayersMinusPerTeam, this.player_perf_t__n_item1_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'Perfomance_opposing_team' from Replicate factor
								this.Perfomance_opposing_team_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'vdouble698' from Product factor
								this.vdouble698_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.BAverageConditional(this.Perfomance_opposing_team_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble696_reduced[nMatches][nTeamsPerMatch]);
								// Message to 'vdouble697' from Ratio factor
								this.vdouble697_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.AAverageConditional(this.vdouble698_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Avg_play_time_team_reduced[nMatches][nTeamsPerMatch]);
								// Message to 'vdouble697' from Sum factor
								this.vdouble697_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = FastSumOp.SumAverageConditional(this.player_perf_t__n_item1_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'player_perf_t__n_1_1_' from Sum factor
								this.player_perf_t__n_1_1__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(this.vdouble697_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble697_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_item1_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_1_1__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'vdouble698' from Ratio factor
								this.vdouble698_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.RatioAverageConditional(this.vdouble697_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Avg_play_time_team_reduced[nMatches][nTeamsPerMatch]);
								// Message to 'Perfomance_opposing_team_1_' from Product factor
								this.Perfomance_opposing_team_1__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(this.vdouble696_reduced[nMatches][nTeamsPerMatch], this.vdouble698_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'Perfomance_opposing_team_uses' from Replicate factor
								this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_1__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]);
								// Message to 'Perfomance_opposing_team_uses' from Replicate factor
								this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_1__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 1, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
							}
						}
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							if (nTeamsPerMatch==0) {
								// Message to 'Perfomance_opposing_team' from Copy factor
								this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ArrayHelper.SetTo<Gaussian>(this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_0__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
								// Message to 'Perfomance_opposing_team_uses' from Replicate factor
								this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]);
								// Message to 'Perfomance_opposing_team_uses' from Replicate factor
								this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 1, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
							}
							// Message to 'vdouble703' from Product factor
							this.vdouble703_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(-0.54459509911730619, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]);
							// Message to 'vdouble701' from Plus factor
							vdouble701_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.AAverageConditional(this.vdouble704_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble703_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble713' from Product factor
							this.vdouble713_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(0.79084835337752024, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
							// Message to 'vdouble711' from Plus factor
							vdouble711_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.AAverageConditional(this.vdouble714_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble713_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						}
						if (nTeamsPerMatch==1) {
							this.player_perf_t__n_item1_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.ToDef<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_1_1__B[nMatches][nTeamsPerMatch], this.player_perf_t__n_item1_rep_B_toDef[nMatches][nTeamsPerMatch]);
							// Message to 'player_perf_t__n_item1_uses' from Replicate factor
							this.player_perf_t__n_item1_uses_B[nMatches][0] = ArrayHelper.SetTo<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item1_uses_B[nMatches][0], this.player_perf_t__n_item1_rep_B_toDef[nMatches][nTeamsPerMatch]);
						}
					}
					// Message to 'player_perf_t__n_item1' from Replicate factor
					player_perf_t__n_item1_B[nMatches] = ReplicateOp_NoDivide.DefAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item1_uses_B[nMatches], player_perf_t__n_item1_B[nMatches]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][1]; nPlayersMinusPerTeam++) {
						// Message to 'player_perf_t__n_uses' from Copy factor
						this.player_perf_t__n_uses_B[nMatches][1][nPlayersMinusPerTeam][0] = ArrayHelper.SetTo<Gaussian>(this.player_perf_t__n_uses_B[nMatches][1][nPlayersMinusPerTeam][0], player_perf_t__n_item1_B[nMatches][nPlayersMinusPerTeam]);
					}
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Message to 'player_perf_t__n_uses' from Product factor
							this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = GaussianProductOpBase.BAverageConditional(vdouble701_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 2.5567203850565789);
							// Message to 'player_perf_t__n_uses' from Product factor
							this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = GaussianProductOpBase.BAverageConditional(vdouble711_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], -2.7928178121382596);
							this.player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.ToDef<Gaussian>(this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'perf_n_m' from Ratio factor
							perf_n_m_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.AAverageConditional(this.player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.match_time_m[nMatches]);
							// Message to 'perf_from_ds_use' from Product factor
							perf_from_ds_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.AAverageConditional(perf_n_m_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' from Gaussian factor
							this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.MeanAverageConditional(perf_from_ds_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 1.0);
						}
					}
				}
				// Message to 'skills_prior_use' from GetDeepJaggedItems factor
				this.skills_prior_use_B = GetDeepJaggedItemsOp<double>.ArrayAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>,Gaussian,DistributionStructArray<Gaussian,double>>(this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B, this.playerIndex, this.skills_prior_use_B);
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			for(int nPlayers = 0; nPlayers<6580; nPlayers++) {
				this.skills_prior_marginal_F[nPlayers] = Gaussian.Uniform();
				// Message to 'skills_prior_marginal' from Variable factor
				this.skills_prior_marginal_F[nPlayers] = VariableOp.MarginalAverageConditional<Gaussian>(this.skills_prior_use_B[nPlayers], this.skills_prior_F[nPlayers], this.skills_prior_marginal_F[nPlayers]);
			}
			this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam3_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of deathcount and killcount and Match_time_m and numberOfIterationsDecreased and p_time_m__t__n and PlayerIndex and PlayerInTeam and vdouble__198 and vdouble__199 and must reset on changes to team2wins</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_deathcount_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_Pla15(bool initialise)
		{
			if (this.Changed_deathcount_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_Pla15_isDone&&((!initialise)||this.Changed_deathcount_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_Pla15_isInitialised)) {
				return ;
			}
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Message to 'vdouble717_use' from Max factor
						this.vdouble717_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = MaxGaussianOp.BAverageConditional(this.Deathcount[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0.0, this.vdouble717_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'death_count_m__t__n' from Gaussian factor
						this.death_count_m__t__n_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.MeanAverageConditional(this.vdouble717_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vc_Times_p_time[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'vdouble714' from Product factor
						this.vdouble714_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.AAverageConditional(this.death_count_m__t__n_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'vdouble713' from Plus factor
						this.vdouble713_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.BAverageConditional(this.vdouble714_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble711_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'Perfomance_opposing_team_uses' from Product factor
						this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = GaussianProductOpBase.BAverageConditional(this.vdouble713_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0.79084835337752024);
						if (nTeamsPerMatch==1) {
							// Message to 'Perfomance_opposing_team' from Replicate factor
							this.Perfomance_opposing_team_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble698' from Product factor
							this.vdouble698_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.BAverageConditional(this.Perfomance_opposing_team_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble696_reduced[nMatches][nTeamsPerMatch]);
							// Message to 'vdouble697' from Ratio factor
							this.vdouble697_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.AAverageConditional(this.vdouble698_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Avg_play_time_team_reduced[nMatches][nTeamsPerMatch]);
							// Message to 'player_perf_t__n_1_1_' from Sum factor
							this.player_perf_t__n_1_1__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(this.vdouble697_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble697_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_item1_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_1_1__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						}
					}
					if (nTeamsPerMatch==1) {
						this.player_perf_t__n_item1_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.ToDef<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_1_1__B[nMatches][nTeamsPerMatch], this.player_perf_t__n_item1_rep_B_toDef[nMatches][nTeamsPerMatch]);
						// Message to 'player_perf_t__n_item1_uses' from Replicate factor
						this.player_perf_t__n_item1_uses_B[nMatches][0] = ArrayHelper.SetTo<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item1_uses_B[nMatches][0], this.player_perf_t__n_item1_rep_B_toDef[nMatches][nTeamsPerMatch]);
					}
				}
			}
			this.Changed_deathcount_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_Pla15_isDone = true;
			this.Changed_deathcount_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_Pla15_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of deathcount and PlayerInTeam</summary>
		private void Changed_deathcount_PlayerInTeam()
		{
			if (this.Changed_deathcount_PlayerInTeam_isDone) {
				return ;
			}
			// Create array for 'deathcount_marginal' Forwards messages.
			this.deathcount_marginal_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(1000);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'deathcount_marginal' Forwards messages.
				this.deathcount_marginal_F[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for 'deathcount_marginal' Forwards messages.
					this.deathcount_marginal_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						this.deathcount_marginal_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Message to 'deathcount_marginal' from DerivedVariable factor
			this.deathcount_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>,double[][][]>(this.Deathcount, this.deathcount_marginal_F);
			this.Changed_deathcount_PlayerInTeam_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of killcount and Match_time_m and numberOfIterationsDecreased and p_time_m__t__n and PlayerIndex and PlayerInTeam and vdouble__198 and vdouble__199 and must reset on changes to deathcount and team2wins</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_v14(bool initialise)
		{
			if (this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_v14_isDone&&((!initialise)||this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_v14_isInitialised)) {
				return ;
			}
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Message to 'vdouble707_use' from Max factor
						this.vdouble707_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = MaxGaussianOp.BAverageConditional(this.Killcount[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0.0, this.vdouble707_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'kill_count_m__t__n' from Gaussian factor
						this.kill_count_m__t__n_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.MeanAverageConditional(this.vdouble707_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vc_Times_p_time[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'vdouble704' from Product factor
						this.vdouble704_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.AAverageConditional(this.kill_count_m__t__n_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'vdouble703' from Plus factor
						this.vdouble703_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.BAverageConditional(this.vdouble704_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble701_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'Perfomance_opposing_team_uses' from Product factor
						this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = GaussianProductOpBase.BAverageConditional(this.vdouble703_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], -0.54459509911730619);
						if (nTeamsPerMatch==1) {
							// Message to 'Perfomance_opposing_team_uses' from Replicate factor
							this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_1__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 1, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
						}
						if (nTeamsPerMatch==0) {
							// Message to 'Perfomance_opposing_team_uses' from Replicate factor
							this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 1, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
						}
						// Message to 'vdouble713' from Product factor
						this.vdouble713_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(0.79084835337752024, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
						// Message to 'vdouble714' from Plus factor
						this.vdouble714_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.SumAverageConditional(this.vdouble711_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble713_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'death_count_m__t__n' from Product factor
						this.death_count_m__t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(this.vdouble714_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'vdouble717' from Gaussian factor
						this.vdouble717_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.SampleAverageConditional(this.death_count_m__t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vc_Times_p_time[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
					}
				}
			}
			this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_v14_isDone = true;
			this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_v14_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of killcount and PlayerInTeam</summary>
		private void Changed_killcount_PlayerInTeam()
		{
			if (this.Changed_killcount_PlayerInTeam_isDone) {
				return ;
			}
			// Create array for 'killcount_marginal' Forwards messages.
			this.killcount_marginal_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(1000);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'killcount_marginal' Forwards messages.
				this.killcount_marginal_F[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for 'killcount_marginal' Forwards messages.
					this.killcount_marginal_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						this.killcount_marginal_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Message to 'killcount_marginal' from DerivedVariable factor
			this.killcount_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>,double[][][]>(this.Killcount, this.killcount_marginal_F);
			this.Changed_killcount_PlayerInTeam_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of Match_time_m</summary>
		private void Changed_Match_time_m()
		{
			if (this.Changed_Match_time_m_isDone) {
				return ;
			}
			// Create array for 'Match_time_m_marginal' Forwards messages.
			this.Match_time_m_marginal_F = new DistributionStructArray<Gaussian,double>(1000);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				this.Match_time_m_marginal_F[nMatches] = Gaussian.Uniform();
			}
			// Message to 'Match_time_m_marginal' from DerivedVariable factor
			this.Match_time_m_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Gaussian,double>,double[]>(this.match_time_m, this.Match_time_m_marginal_F);
			this.Changed_Match_time_m_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of Match_time_m and numberOfIterations and p_time_m__t__n and PlayerIndex and PlayerInTeam and vdouble__198</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__198(int numberOfIterations)
		{
			if (this.Changed_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__198_isDone) {
				return ;
			}
			DistributionStructArray<Gaussian,double> vdouble__200_F;
			// Create array for 'vdouble__200' Forwards messages.
			vdouble__200_F = new DistributionStructArray<Gaussian,double>(1000);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				vdouble__200_F[nMatches] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble____66_F'
			DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>[] vdouble____66_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>[1000];
			// Create array for replicates of 'vdouble668_F'
			Gaussian[] vdouble668_F = new Gaussian[1000];
			// Create array for replicates of 'vdouble667_F'
			Gaussian[] vdouble667_F = new Gaussian[1000];
			// Create array for replicates of 'vdouble663_F'
			Gaussian[][][] vdouble663_F = new Gaussian[1000][][];
			// Create array for replicates of 'vdouble661_F'
			Gaussian[][][] vdouble661_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'vdouble____66' Forwards messages.
				vdouble____66_F[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
				// Create array for replicates of 'vdouble663_F'
				vdouble663_F[nMatches] = new Gaussian[2][];
				// Create array for replicates of 'vdouble661_F'
				vdouble661_F[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for 'vdouble____66' Forwards messages.
					vdouble____66_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					// Create array for replicates of 'vdouble661_F'
					vdouble661_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble663_F'
					vdouble663_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble____66_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						vdouble661_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						// Message to 'vdouble661' from Gaussian factor
						vdouble661_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.SampleAverageConditional(this.Vdouble__198[this.playerIndex[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]], 1.0);
						vdouble663_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						// Message to 'vdouble663' from Product factor
						vdouble663_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(vdouble661_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'vdouble____66' from Ratio factor
						vdouble____66_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.RatioAverageConditional(vdouble663_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.match_time_m[nMatches]);
					}
				}
				vdouble667_F[nMatches] = Gaussian.Uniform();
				// Message to 'vdouble667' from Sum factor
				vdouble667_F[nMatches] = FastSumOp.SumAverageConditional(vdouble____66_F[nMatches][0]);
				vdouble668_F[nMatches] = Gaussian.Uniform();
				// Message to 'vdouble668' from Sum factor
				vdouble668_F[nMatches] = FastSumOp.SumAverageConditional(vdouble____66_F[nMatches][1]);
				// Message to 'vdouble__200' from Difference factor
				vdouble__200_F[nMatches] = Tracing.FireEvent<Gaussian>(DoublePlusOp.AAverageConditional(vdouble667_F[nMatches], vdouble668_F[nMatches]), string.Format("vdouble__200_F[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
			}
			Gaussian vdouble__200_use_B_reduced;
			vdouble__200_use_B_reduced = Gaussian.Uniform();
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				for(int nMatches = 0; nMatches<1000; nMatches++) {
					this.vdouble__200_use_B_nMatches__buffer[nMatches] = VariablePointOp_Rprop.Buffer(vdouble__200_use_B_reduced, vdouble__200_F[nMatches], this.vdouble__200_marginal_F[nMatches], this.vdouble__200_use_B_nMatches__buffer[nMatches]);
					// Message to 'vdouble__200_marginal' from VariablePoint factor
					this.vdouble__200_marginal_F[nMatches] = Tracing.FireEvent<Gaussian>(VariablePointOp_Rprop.MarginalAverageConditional(vdouble__200_use_B_reduced, vdouble__200_F[nMatches], this.vdouble__200_use_B_nMatches__buffer[nMatches], this.vdouble__200_marginal_F[nMatches]), string.Format("vdouble__200_marginal_F[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
				}
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			this.Changed_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__198_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of Match_time_m and numberOfIterationsDecreased and p_time_m__t__n and PlayerIndex and PlayerInTeam and vdouble__198 and vdouble__199 and must reset on changes to deathcount and killcount and team2wins</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1911(bool initialise)
		{
			if (this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1911_isDone&&((!initialise)||this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1911_isInitialised)) {
				return ;
			}
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Message to 'player_perf_t__n' from Ratio factor
						this.player_perf_t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.RatioAverageConditional(this.perf_n_m_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.match_time_m[nMatches]);
						this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.Marginal<Gaussian>(this.player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'player_perf_t__n_uses' from Replicate factor
						this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1], this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 1, this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
						// Message to 'player_perf_t__n_uses' from Replicate factor
						this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0], this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0, this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]);
						// Message to 'player_perf_t__n_uses' from Replicate factor
						this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2], this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 2, this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2]);
						// Message to 'vdouble701' from Product factor
						this.vdouble701_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(2.5567203850565789, this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1]);
					}
				}
				for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][1]; nPlayersMinusPerTeam++) {
					// Message to 'player_perf_t__n_depth1' from Copy factor
					this.player_perf_t__n_depth1_F[nMatches][1][nPlayersMinusPerTeam] = ArrayHelper.SetTo<Gaussian>(this.player_perf_t__n_depth1_F[nMatches][1][nPlayersMinusPerTeam], this.player_perf_t__n_uses_F[nMatches][1][nPlayersMinusPerTeam][0]);
				}
				// Message to 'player_perf_t__n_item1_uses' from Replicate factor
				this.player_perf_t__n_item1_uses_F[nMatches][0] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item1_uses_B[nMatches], this.player_perf_t__n_depth1_F[nMatches][1], 0, this.player_perf_t__n_item1_uses_F[nMatches][0]);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					if (nTeamsPerMatch==1) {
						this.player_perf_t__n_item1_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.Marginal<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item1_rep_B_toDef[nMatches][nTeamsPerMatch], this.player_perf_t__n_item1_uses_F[nMatches][0], this.player_perf_t__n_item1_rep_F_marginal[nMatches][nTeamsPerMatch]);
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Message to 'player_perf_t__n_item1_rep' from Replicate factor
							this.player_perf_t__n_item1_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_1_1__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_item1_rep_F_marginal[nMatches][nTeamsPerMatch], nPlayersMinusPerTeam, this.player_perf_t__n_item1_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble697' from Sum factor
							this.vdouble697_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = FastSumOp.SumAverageConditional(this.player_perf_t__n_item1_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble698' from Ratio factor
							this.vdouble698_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.RatioAverageConditional(this.vdouble697_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Avg_play_time_team_reduced[nMatches][nTeamsPerMatch]);
							// Message to 'Perfomance_opposing_team_1_' from Product factor
							this.Perfomance_opposing_team_1__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(this.vdouble696_reduced[nMatches][nTeamsPerMatch], this.vdouble698_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'Perfomance_opposing_team_uses' from Replicate factor
							this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_1__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]);
						}
					}
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Message to 'vdouble703' from Product factor
						this.vdouble703_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(-0.54459509911730619, this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0]);
						// Message to 'vdouble704' from Plus factor
						this.vdouble704_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DoublePlusOp.SumAverageConditional(this.vdouble701_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vdouble703_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'kill_count_m__t__n' from Product factor
						this.kill_count_m__t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(this.vdouble704_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'vdouble707' from Gaussian factor
						this.vdouble707_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.SampleAverageConditional(this.kill_count_m__t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.vc_Times_p_time[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
					}
				}
				for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][0]; nPlayersMinusPerTeam++) {
					// Message to 'player_perf_t__n_depth1' from Copy factor
					this.player_perf_t__n_depth1_F[nMatches][0][nPlayersMinusPerTeam] = ArrayHelper.SetTo<Gaussian>(this.player_perf_t__n_depth1_F[nMatches][0][nPlayersMinusPerTeam], this.player_perf_t__n_uses_F[nMatches][0][nPlayersMinusPerTeam][0]);
				}
				// Message to 'player_perf_t__n_item0_uses' from Replicate factor
				this.player_perf_t__n_item0_uses_F[nMatches][0] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item0_uses_B[nMatches], this.player_perf_t__n_depth1_F[nMatches][0], 0, this.player_perf_t__n_item0_uses_F[nMatches][0]);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					if (nTeamsPerMatch==0) {
						this.player_perf_t__n_item0_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.Marginal<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item0_rep_B_toDef[nMatches][nTeamsPerMatch], this.player_perf_t__n_item0_uses_F[nMatches][0], this.player_perf_t__n_item0_rep_F_marginal[nMatches][nTeamsPerMatch]);
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Message to 'player_perf_t__n_item0_rep' from Replicate factor
							this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_0_0__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.player_perf_t__n_item0_rep_F_marginal[nMatches][nTeamsPerMatch], nPlayersMinusPerTeam, this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble692' from Sum factor
							this.vdouble692_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = FastSumOp.SumAverageConditional(this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'vdouble693' from Ratio factor
							this.vdouble693_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.RatioAverageConditional(this.vdouble692_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Avg_play_time_team_reduced[nMatches][nTeamsPerMatch]);
							// Message to 'Perfomance_opposing_team_0_' from Product factor
							this.Perfomance_opposing_team_0__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(this.vdouble691_reduced[nMatches][nTeamsPerMatch], this.vdouble693_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'Perfomance_opposing_team' from Copy factor
							this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ArrayHelper.SetTo<Gaussian>(this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Perfomance_opposing_team_0__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						}
					}
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Message to 'vdouble711' from Product factor
						this.vdouble711_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(-2.7928178121382596, this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2]);
					}
				}
			}
			this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1911_isDone = true;
			this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1911_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of Match_time_m and p_time_m__t__n and PlayerInTeam</summary>
		private void Changed_Match_time_m_p_time_m__t__n_PlayerInTeam()
		{
			if (this.Changed_Match_time_m_p_time_m__t__n_PlayerInTeam_isDone) {
				return ;
			}
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					if (this.playerInTeam[nMatches][nTeamsPerMatch]>0) {
						if (nTeamsPerMatch==1) {
							this.vdouble696_reduced[nMatches][nTeamsPerMatch] = Factor.Ratio(this.vdouble695_reduced[nMatches][nTeamsPerMatch], this.match_time_m[nMatches]);
						}
						this.Avg_play_time_team_reduced[nMatches][nTeamsPerMatch] = Factor.Ratio(this.vdouble683_reduced[nMatches][nTeamsPerMatch], this.match_time_m[nMatches]);
						if (nTeamsPerMatch==0) {
							this.vdouble691_reduced[nMatches][nTeamsPerMatch] = Factor.Ratio(this.vdouble690_reduced[nMatches][nTeamsPerMatch], this.match_time_m[nMatches]);
						}
					}
				}
			}
			this.Changed_Match_time_m_p_time_m__t__n_PlayerInTeam_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and must reset on changes to deathcount and killcount and Match_time_m and p_time_m__t__n and PlayerIndex and PlayerInTeam and team2wins and vdouble__198 and vdouble__199</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde4(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde4_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde4_isInitialised)) {
				return ;
			}
			this.skills_prior_use_F_marginal = GetDeepJaggedItemsOp<double>.MarginalInit<DistributionStructArray<Gaussian,double>>(this.skills_prior_F);
			for(int nPlayers = 0; nPlayers<6580; nPlayers++) {
				this.skills_prior_use_B[nPlayers] = Gaussian.Uniform();
			}
			this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde4_isDone = true;
			this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde4_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and must reset on changes to Match_time_m and p_time_m__t__n and PlayerIndex and PlayerInTeam and vdouble__198</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_Init_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdoubl2(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_Init_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdoubl2_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_Init_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdoubl2_isInitialised)) {
				return ;
			}
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				this.vdouble__200_marginal_F[nMatches] = Gaussian.Uniform();
				this.vdouble__200_use_B_nMatches__buffer[nMatches] = VariablePointOp_Rprop.BufferInit();
			}
			this.Changed_numberOfIterationsDecreased_Init_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdoubl2_isDone = true;
			this.Changed_numberOfIterationsDecreased_Init_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdoubl2_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and p_time_m__t__n and PlayerIndex and PlayerInTeam and vdouble__198 and vdouble__199 and must reset on changes to deathcount and killcount and Match_time_m and team2wins</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__1910(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__1910_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__1910_isInitialised)) {
				return ;
			}
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Message to 'perf_n_m' from Product factor
						this.perf_n_m_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(this.perf_from_ds_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
					}
				}
			}
			this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__1910_isDone = true;
			this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__1910_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and PlayerIndex and PlayerInTeam and vdouble__198 and vdouble__199 and must reset on changes to deathcount and killcount and Match_time_m and p_time_m__t__n and team2wins</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__199_Init_deathcou9(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__199_Init_deathcou9_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__199_Init_deathcou9_isInitialised)) {
				return ;
			}
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Message to 'skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' from GetDeepJaggedItems factor
				this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F[nMatches] = GetDeepJaggedItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>,Gaussian>(this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B[nMatches], this.skills_prior_F, this.skills_prior_use_F_marginal, this.playerIndex, nMatches, this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F[nMatches]);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Message to 'perf_from_ds' from Gaussian factor
						this.perf_from_ds_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.SampleAverageConditional(this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 1.0);
					}
				}
			}
			this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__199_Init_deathcou9_isDone = true;
			this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__199_Init_deathcou9_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and PlayerInTeam and must reset on changes to deathcount and killcount and Match_time_m and p_time_m__t__n and PlayerIndex and team2wins and vdouble__198 and vdouble__199</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_7(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_7_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_7_isInitialised)) {
				return ;
			}
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.perf_from_ds_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.perf_n_m_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.player_perf_t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.MarginalInit<Gaussian>(this.player_perf_t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						this.player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = ReplicateOp_Divide.ToDefInit<Gaussian>(this.player_perf_t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = Gaussian.Uniform();
						this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = Gaussian.Uniform();
						this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = Gaussian.Uniform();
						this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][2] = Gaussian.Uniform();
						this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = Gaussian.Uniform();
						this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = Gaussian.Uniform();
						this.vdouble701_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble704_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble703_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = Gaussian.Uniform();
						this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = Gaussian.Uniform();
						if (nTeamsPerMatch==1) {
							this.Perfomance_opposing_team_1__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
							this.vdouble698_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
							this.vdouble697_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
							for(int _a4 = 0; _a4<this.playerInTeam[nMatches][1]; _a4++) {
								this.player_perf_t__n_item1_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][_a4] = Gaussian.Uniform();
							}
						}
					}
				}
				for(int _a4 = 0; _a4<this.playerInTeam[nMatches][1]; _a4++) {
					this.player_perf_t__n_item1_uses_F[nMatches][0][_a4] = Gaussian.Uniform();
				}
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					if (nTeamsPerMatch==1) {
						this.player_perf_t__n_item1_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.MarginalInit<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item1_uses_F[nMatches][0]);
					}
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						this.player_perf_t__n_depth1_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
				for(int _a4 = 0; _a4<this.playerInTeam[nMatches][1]; _a4++) {
					this.player_perf_t__n_item1_uses_B[nMatches][1][_a4] = Gaussian.Uniform();
					this.player_perf_t__n_item1_uses_B[nMatches][0][_a4] = Gaussian.Uniform();
				}
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					if (nTeamsPerMatch==1) {
						this.player_perf_t__n_item1_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.ToDefInit<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item1_uses_F[nMatches][0]);
					}
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						for(int _a2 = 0; _a2<this.playerInTeam[nMatches][1]; _a2++) {
							if (nTeamsPerMatch==1) {
								this.player_perf_t__n_1_1__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][_a2] = Gaussian.Uniform();
							}
						}
						this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][1] = Gaussian.Uniform();
						this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][0] = Gaussian.Uniform();
						this.vdouble703_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble704_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.kill_count_m__t__n_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble707_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble707_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.kill_count_m__t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						if (nTeamsPerMatch==0) {
							this.Perfomance_opposing_team_0__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
							this.vdouble693_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
							this.vdouble692_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
							for(int _a3 = 0; _a3<this.playerInTeam[nMatches][0]; _a3++) {
								this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][_a3] = Gaussian.Uniform();
							}
						}
					}
				}
				for(int _a3 = 0; _a3<this.playerInTeam[nMatches][0]; _a3++) {
					this.player_perf_t__n_item0_uses_F[nMatches][0][_a3] = Gaussian.Uniform();
				}
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					if (nTeamsPerMatch==0) {
						this.player_perf_t__n_item0_rep_F_marginal[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.MarginalInit<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item0_uses_F[nMatches][0]);
					}
				}
				for(int _a3 = 0; _a3<this.playerInTeam[nMatches][0]; _a3++) {
					this.player_perf_t__n_item0_uses_B[nMatches][1][_a3] = Gaussian.Uniform();
				}
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					if (nTeamsPerMatch==0) {
						this.player_perf_t__n_item0_rep_B_toDef[nMatches][nTeamsPerMatch] = ReplicateOp_Divide.ToDefInit<DistributionStructArray<Gaussian,double>>(this.player_perf_t__n_item0_uses_F[nMatches][0]);
					}
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						for(int _a = 0; _a<this.playerInTeam[nMatches][0]; _a++) {
							if (nTeamsPerMatch==0) {
								this.player_perf_t__n_0_0__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam][_a] = Gaussian.Uniform();
							}
						}
						this.Perfomance_opposing_team_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble713_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble711_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble714_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.death_count_m__t__n_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble717_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble717_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.death_count_m__t__n_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble714_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						this.vdouble713_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						if (nTeamsPerMatch==1) {
							this.vdouble697_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
							this.vdouble698_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						}
					}
				}
			}
			this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_7_isDone = true;
			this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_7_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and team2wins and must reset on changes to deathcount and killcount and Match_time_m and p_time_m__t__n and PlayerIndex and PlayerInTeam and vdouble__198 and vdouble__199</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_17(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_17_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_17_isInitialised)) {
				return ;
			}
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					this.Diff_2__uses_B[nMatches][0] = Gaussian.Uniform();
				}
			}
			this.Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_17_isDone = true;
			this.Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_17_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and vdouble__198 and vdouble__199 and must reset on changes to deathcount and killcount and Match_time_m and p_time_m__t__n and PlayerIndex and PlayerInTeam and team2wins</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_vdouble__198_vdouble__199_Init_deathcount_killcount_Match_time_m8(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_vdouble__198_vdouble__199_Init_deathcount_killcount_Match_time_m8_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_vdouble__198_vdouble__199_Init_deathcount_killcount_Match_time_m8_isInitialised)) {
				return ;
			}
			this.skills_prior_use_F_marginal = GetDeepJaggedItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.skills_prior_F, this.skills_prior_use_B, this.skills_prior_use_F_marginal);
			this.Changed_numberOfIterationsDecreased_vdouble__198_vdouble__199_Init_deathcount_killcount_Match_time_m8_isDone = true;
			this.Changed_numberOfIterationsDecreased_vdouble__198_vdouble__199_Init_deathcount_killcount_Match_time_m8_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of p_time_m__t__n and PlayerInTeam</summary>
		private void Changed_p_time_m__t__n_PlayerInTeam()
		{
			if (this.Changed_p_time_m__t__n_PlayerInTeam_isDone) {
				return ;
			}
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					if (this.playerInTeam[nMatches][nTeamsPerMatch]>0) {
						if (nTeamsPerMatch==1) {
							this.vdouble695_reduced[nMatches][nTeamsPerMatch] = Factor.Sum(this.P_time_m__t__n[nMatches][0]);
						}
						this.vdouble683_reduced[nMatches][nTeamsPerMatch] = Factor.Sum(this.P_time_m__t__n[nMatches][nTeamsPerMatch]);
					}
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						this.vc_Times_p_time[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Factor.Product(7.8919601123724834E-05, this.P_time_m__t__n[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
					}
					if (this.playerInTeam[nMatches][nTeamsPerMatch]>0) {
						if (nTeamsPerMatch==0) {
							this.vdouble690_reduced[nMatches][nTeamsPerMatch] = Factor.Sum(this.P_time_m__t__n[nMatches][1]);
						}
					}
				}
			}
			// Create array for 'p_time_m__t__n_marginal' Forwards messages.
			this.p_time_m__t__n_marginal_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(1000);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'p_time_m__t__n_marginal' Forwards messages.
				this.p_time_m__t__n_marginal_F[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for 'p_time_m__t__n_marginal' Forwards messages.
					this.p_time_m__t__n_marginal_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						this.p_time_m__t__n_marginal_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Message to 'p_time_m__t__n_marginal' from DerivedVariable factor
			this.p_time_m__t__n_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>,double[][][]>(this.P_time_m__t__n, this.p_time_m__t__n_marginal_F);
			this.Changed_p_time_m__t__n_PlayerInTeam_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of PlayerIndex</summary>
		private void Changed_PlayerIndex()
		{
			if (this.Changed_PlayerIndex_isDone) {
				return ;
			}
			// Create array for 'PlayerIndex_marginal' Forwards messages.
			this.PlayerIndex_marginal_F = new PointMass<int[][][]>(this.playerIndex);
			// Message to 'PlayerIndex_marginal' from DerivedVariable factor
			this.PlayerIndex_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int[][][]>,int[][][]>(this.playerIndex, this.PlayerIndex_marginal_F);
			this.Changed_PlayerIndex_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of PlayerInTeam</summary>
		private void Changed_PlayerInTeam()
		{
			if (this.Changed_PlayerInTeam_isDone) {
				return ;
			}
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for 'skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' Forwards messages.
					this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					// Create array for 'skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' Backwards messages.
					this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					// Create array for replicates of 'perf_from_ds_F'
					this.perf_from_ds_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'perf_n_m_F'
					this.perf_n_m_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for 'player_perf_t__n' Forwards messages.
					this.player_perf_t__n_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					// Create array for replicates of 'player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal'
					this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef'
					this.player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for 'player_perf_t__n_uses' Forwards messages.
					this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]][];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Create array for 'player_perf_t__n_uses' Forwards messages.
						this.player_perf_t__n_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = new Gaussian[3];
					}
					// Create array for 'player_perf_t__n_uses' Backwards messages.
					this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]][];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Create array for 'player_perf_t__n_uses' Backwards messages.
						this.player_perf_t__n_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = new Gaussian[3];
					}
					// Create array for replicates of 'vdouble701_F'
					this.vdouble701_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble704_F'
					this.vdouble704_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble703_F'
					this.vdouble703_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'Perfomance_opposing_team_uses_F'
					this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]][];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Create array for 'Perfomance_opposing_team_uses' Forwards messages.
						this.Perfomance_opposing_team_uses_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = new Gaussian[2];
					}
					// Create array for replicates of 'Perfomance_opposing_team_1__F'
					this.Perfomance_opposing_team_1__F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					this.vdouble695_reduced[nMatches][nTeamsPerMatch] = default(double);
					this.vdouble696_reduced[nMatches][nTeamsPerMatch] = default(double);
					// Create array for replicates of 'vdouble698_F'
					this.vdouble698_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble697_F'
					this.vdouble697_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					if (nTeamsPerMatch==1) {
						// Create array for 'player_perf_t__n_item1_rep' Forwards messages.
						this.player_perf_t__n_item1_rep_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>[this.playerInTeam[nMatches][nTeamsPerMatch]];
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Create array for 'player_perf_t__n_item1_rep' Forwards messages.
							this.player_perf_t__n_item1_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][1]);
						}
					}
				}
				// Create array for 'player_perf_t__n_item1_uses' Forwards messages.
				this.player_perf_t__n_item1_uses_F[nMatches][0] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][1]);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for 'player_perf_t__n_depth1' Forwards messages.
					this.player_perf_t__n_depth1_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
				}
				// Create array for 'player_perf_t__n_item1_uses' Backwards messages.
				this.player_perf_t__n_item1_uses_B[nMatches][1] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][1]);
				// Create array for 'player_perf_t__n_item1_uses' Backwards messages.
				this.player_perf_t__n_item1_uses_B[nMatches][0] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][1]);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'player_perf_t__n_1_1__B'
					this.player_perf_t__n_1_1__B[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						if (nTeamsPerMatch==1) {
							// Create array for 'player_perf_t__n_1_1_' Backwards messages.
							this.player_perf_t__n_1_1__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][1]);
						}
					}
					this.vdouble683_reduced[nMatches][nTeamsPerMatch] = default(double);
					this.Avg_play_time_team_reduced[nMatches][nTeamsPerMatch] = default(double);
					// Create array for replicates of 'Perfomance_opposing_team_uses_B'
					this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]][];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						// Create array for 'Perfomance_opposing_team_uses' Backwards messages.
						this.Perfomance_opposing_team_uses_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = new Gaussian[2];
					}
					// Create array for replicates of 'vdouble703_B'
					this.vdouble703_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble704_B'
					this.vdouble704_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'kill_count_m__t__n_B'
					this.kill_count_m__t__n_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble707_use_B'
					this.vdouble707_use_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble707_F'
					this.vdouble707_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'kill_count_m__t__n_F'
					this.kill_count_m__t__n_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vc_Times_p_time'
					this.vc_Times_p_time[nMatches][nTeamsPerMatch] = new double[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'Perfomance_opposing_team_F'
					this.Perfomance_opposing_team_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'Perfomance_opposing_team_0__F'
					this.Perfomance_opposing_team_0__F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					this.vdouble690_reduced[nMatches][nTeamsPerMatch] = default(double);
					this.vdouble691_reduced[nMatches][nTeamsPerMatch] = default(double);
					// Create array for replicates of 'vdouble693_F'
					this.vdouble693_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble692_F'
					this.vdouble692_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					if (nTeamsPerMatch==0) {
						// Create array for 'player_perf_t__n_item0_rep' Forwards messages.
						this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>[this.playerInTeam[nMatches][nTeamsPerMatch]];
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Create array for 'player_perf_t__n_item0_rep' Forwards messages.
							this.player_perf_t__n_item0_rep_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][0]);
						}
					}
				}
				// Create array for 'player_perf_t__n_item0_uses' Forwards messages.
				this.player_perf_t__n_item0_uses_F[nMatches][0] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][0]);
				// Create array for 'player_perf_t__n_item0_uses' Backwards messages.
				this.player_perf_t__n_item0_uses_B[nMatches][1] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][0]);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'player_perf_t__n_0_0__B'
					this.player_perf_t__n_0_0__B[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						if (nTeamsPerMatch==0) {
							// Create array for 'player_perf_t__n_0_0_' Backwards messages.
							this.player_perf_t__n_0_0__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][0]);
						}
					}
					// Create array for replicates of 'Perfomance_opposing_team_B'
					this.Perfomance_opposing_team_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble713_B'
					this.vdouble713_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble711_F'
					this.vdouble711_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble714_B'
					this.vdouble714_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'death_count_m__t__n_B'
					this.death_count_m__t__n_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble717_use_B'
					this.vdouble717_use_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble717_F'
					this.vdouble717_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'death_count_m__t__n_F'
					this.death_count_m__t__n_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble714_F'
					this.vdouble714_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble713_F'
					this.vdouble713_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble697_B'
					this.vdouble697_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble698_B'
					this.vdouble698_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
				}
			}
			// Create array for 'PlayerInTeam_marginal' Forwards messages.
			this.PlayerInTeam_marginal_F = new PointMass<int[][]>(this.playerInTeam);
			// Message to 'PlayerInTeam_marginal' from DerivedVariable factor
			this.PlayerInTeam_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int[][]>,int[][]>(this.playerInTeam, this.PlayerInTeam_marginal_F);
			this.Changed_PlayerInTeam_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of team2wins</summary>
		private void Changed_team2wins()
		{
			if (this.Changed_team2wins_isDone) {
				return ;
			}
			// Create array for replicates of 'Diff_2__uses_B'
			this.Diff_2__uses_B = new Gaussian[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					// Create array for 'Diff_2__uses' Backwards messages.
					this.Diff_2__uses_B[nMatches] = new Gaussian[2];
				}
			}
			// Create array for replicates of 'vbool99'
			bool[] vbool99 = new bool[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					vbool99[nMatches] = true;
					Constrain.Equal<bool>(true, vbool99[nMatches]);
				}
			}
			// Create array for replicates of 'vbool102'
			bool[] vbool102 = new bool[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					vbool102[nMatches] = true;
					Constrain.Equal<bool>(true, vbool102[nMatches]);
				}
			}
			// Create array for replicates of 'vbool104'
			bool[] vbool104 = new bool[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Team2wins[nMatches]==0) {
					vbool104[nMatches] = true;
					Constrain.Equal<bool>(true, vbool104[nMatches]);
				}
			}
			// Create array for replicates of 'vbool106'
			bool[] vbool106 = new bool[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				if (this.Team2wins[nMatches]==1) {
					vbool106[nMatches] = true;
					Constrain.Equal<bool>(true, vbool106[nMatches]);
				}
			}
			// Create array for 'team2wins_marginal' Forwards messages.
			this.team2wins_marginal_F = new PointMass<int[]>(this.Team2wins);
			// Message to 'team2wins_marginal' from DerivedVariable factor
			this.team2wins_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int[]>,int[]>(this.Team2wins, this.team2wins_marginal_F);
			this.Changed_team2wins_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vdouble__198</summary>
		private void Changed_vdouble__198()
		{
			if (this.Changed_vdouble__198_isDone) {
				return ;
			}
			// Create array for 'vdouble__198_marginal' Forwards messages.
			this.vdouble__198_marginal_F = new DistributionStructArray<Gaussian,double>(6580);
			for(int nPlayers = 0; nPlayers<6580; nPlayers++) {
				this.vdouble__198_marginal_F[nPlayers] = Gaussian.Uniform();
			}
			// Message to 'vdouble__198_marginal' from DerivedVariable factor
			this.vdouble__198_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Gaussian,double>,double[]>(this.Vdouble__198, this.vdouble__198_marginal_F);
			this.Changed_vdouble__198_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vdouble__198 and vdouble__199</summary>
		private void Changed_vdouble__198_vdouble__199()
		{
			if (this.Changed_vdouble__198_vdouble__199_isDone) {
				return ;
			}
			for(int nPlayers = 0; nPlayers<6580; nPlayers++) {
				// Message to 'skills_prior' from Gaussian factor
				this.skills_prior_F[nPlayers] = GaussianOpBase.SampleAverageConditional(this.Vdouble__198[nPlayers], this.Vdouble__199[nPlayers]);
			}
			this.Changed_vdouble__198_vdouble__199_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vdouble__199</summary>
		private void Changed_vdouble__199()
		{
			if (this.Changed_vdouble__199_isDone) {
				return ;
			}
			// Create array for 'vdouble__199_marginal' Forwards messages.
			this.vdouble__199_marginal_F = new DistributionStructArray<Gaussian,double>(6580);
			for(int nPlayers = 0; nPlayers<6580; nPlayers++) {
				this.vdouble__199_marginal_F[nPlayers] = Gaussian.Uniform();
			}
			// Message to 'vdouble__199_marginal' from DerivedVariable factor
			this.vdouble__199_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Gaussian,double>,double[]>(this.Vdouble__199, this.vdouble__199_marginal_F);
			this.Changed_vdouble__199_isDone = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			// Create array for 'vdouble__200_marginal' Forwards messages.
			this.vdouble__200_marginal_F = new DistributionStructArray<Gaussian,double>(1000);
			// Create array for replicates of 'vdouble__200_use_B_nMatches__buffer'
			this.vdouble__200_use_B_nMatches__buffer = new RpropBufferData[1000];
			// Create array for 'skills_prior' Forwards messages.
			this.skills_prior_F = new DistributionStructArray<Gaussian,double>(6580);
			for(int nPlayers = 0; nPlayers<6580; nPlayers++) {
				this.skills_prior_F[nPlayers] = Gaussian.Uniform();
			}
			// Create array for 'skills_prior_use' Backwards messages.
			this.skills_prior_use_B = new DistributionStructArray<Gaussian,double>(6580);
			// Create array for 'skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' Forwards messages.
			this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(1000);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' Forwards messages.
				this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
			}
			// Create array for 'skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' Backwards messages.
			this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(1000);
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' Backwards messages.
				this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
			}
			// Create array for replicates of 'perf_from_ds_F'
			this.perf_from_ds_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'perf_from_ds_F'
				this.perf_from_ds_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'perf_n_m_F'
			this.perf_n_m_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'perf_n_m_F'
				this.perf_n_m_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'player_perf_t__n_F'
			this.player_perf_t__n_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>[1000];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'player_perf_t__n' Forwards messages.
				this.player_perf_t__n_F[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
			}
			// Create array for replicates of 'player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal'
			this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal'
				this.player_perf_t__n_uses_F_nTeamsPerMatch__nPlayersMinusPerTeam__marginal[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef'
			this.player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef'
				this.player_perf_t__n_uses_B_nTeamsPerMatch__nPlayersMinusPerTeam__toDef[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'player_perf_t__n_uses_F'
			this.player_perf_t__n_uses_F = new Gaussian[1000][][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'player_perf_t__n_uses' Forwards messages.
				this.player_perf_t__n_uses_F[nMatches] = new Gaussian[2][][];
			}
			// Create array for replicates of 'player_perf_t__n_uses_B'
			this.player_perf_t__n_uses_B = new Gaussian[1000][][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'player_perf_t__n_uses' Backwards messages.
				this.player_perf_t__n_uses_B[nMatches] = new Gaussian[2][][];
			}
			// Create array for replicates of 'vdouble701_F'
			this.vdouble701_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble701_F'
				this.vdouble701_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble704_F'
			this.vdouble704_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble704_F'
				this.vdouble704_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble703_F'
			this.vdouble703_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble703_F'
				this.vdouble703_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'Perfomance_opposing_team_uses_F'
			this.Perfomance_opposing_team_uses_F = new Gaussian[1000][][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'Perfomance_opposing_team_uses_F'
				this.Perfomance_opposing_team_uses_F[nMatches] = new Gaussian[2][][];
			}
			// Create array for replicates of 'Perfomance_opposing_team_1__F'
			this.Perfomance_opposing_team_1__F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'Perfomance_opposing_team_1__F'
				this.Perfomance_opposing_team_1__F[nMatches] = new Gaussian[2][];
			}
			this.vdouble696_reduced = new double[1000][];
			this.vdouble695_reduced = new double[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				this.vdouble695_reduced[nMatches] = new double[2];
				this.vdouble696_reduced[nMatches] = new double[2];
			}
			// Create array for replicates of 'vdouble698_F'
			this.vdouble698_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble698_F'
				this.vdouble698_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble697_F'
			this.vdouble697_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble697_F'
				this.vdouble697_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'player_perf_t__n_item1_rep_F'
			this.player_perf_t__n_item1_rep_F = new DistributionStructArray<Gaussian,double>[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'player_perf_t__n_item1_rep_F'
				this.player_perf_t__n_item1_rep_F[nMatches] = new DistributionStructArray<Gaussian,double>[2][];
			}
			// Create array for replicates of 'player_perf_t__n_item1_rep_F_marginal'
			this.player_perf_t__n_item1_rep_F_marginal = new DistributionStructArray<Gaussian,double>[1000][];
			// Create array for replicates of 'player_perf_t__n_item1_uses_F'
			this.player_perf_t__n_item1_uses_F = new DistributionStructArray<Gaussian,double>[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'player_perf_t__n_item1_uses' Forwards messages.
				this.player_perf_t__n_item1_uses_F[nMatches] = new DistributionStructArray<Gaussian,double>[2];
				// Create array for replicates of 'player_perf_t__n_item1_rep_F_marginal'
				this.player_perf_t__n_item1_rep_F_marginal[nMatches] = new DistributionStructArray<Gaussian,double>[2];
			}
			// Create array for replicates of 'player_perf_t__n_depth1_F'
			this.player_perf_t__n_depth1_F = new DistributionStructArray<Gaussian,double>[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'player_perf_t__n_depth1' Forwards messages.
				this.player_perf_t__n_depth1_F[nMatches] = new DistributionStructArray<Gaussian,double>[2];
			}
			// Create array for replicates of 'player_perf_t__n_item1_uses_B'
			this.player_perf_t__n_item1_uses_B = new DistributionStructArray<Gaussian,double>[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'player_perf_t__n_item1_uses' Backwards messages.
				this.player_perf_t__n_item1_uses_B[nMatches] = new DistributionStructArray<Gaussian,double>[2];
			}
			// Create array for replicates of 'player_perf_t__n_item1_rep_B_toDef'
			this.player_perf_t__n_item1_rep_B_toDef = new DistributionStructArray<Gaussian,double>[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'player_perf_t__n_item1_rep_B_toDef'
				this.player_perf_t__n_item1_rep_B_toDef[nMatches] = new DistributionStructArray<Gaussian,double>[2];
			}
			// Create array for replicates of 'player_perf_t__n_1_1__B'
			this.player_perf_t__n_1_1__B = new DistributionStructArray<Gaussian,double>[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'player_perf_t__n_1_1__B'
				this.player_perf_t__n_1_1__B[nMatches] = new DistributionStructArray<Gaussian,double>[2][];
			}
			this.Avg_play_time_team_reduced = new double[1000][];
			this.vdouble683_reduced = new double[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				this.vdouble683_reduced[nMatches] = new double[2];
				this.Avg_play_time_team_reduced[nMatches] = new double[2];
			}
			// Create array for replicates of 'Perfomance_opposing_team_uses_B'
			this.Perfomance_opposing_team_uses_B = new Gaussian[1000][][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'Perfomance_opposing_team_uses_B'
				this.Perfomance_opposing_team_uses_B[nMatches] = new Gaussian[2][][];
			}
			// Create array for replicates of 'vdouble703_B'
			this.vdouble703_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble703_B'
				this.vdouble703_B[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble704_B'
			this.vdouble704_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble704_B'
				this.vdouble704_B[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'kill_count_m__t__n_B'
			this.kill_count_m__t__n_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'kill_count_m__t__n_B'
				this.kill_count_m__t__n_B[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble707_use_B'
			this.vdouble707_use_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble707_use_B'
				this.vdouble707_use_B[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble707_F'
			this.vdouble707_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble707_F'
				this.vdouble707_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'kill_count_m__t__n_F'
			this.kill_count_m__t__n_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'kill_count_m__t__n_F'
				this.kill_count_m__t__n_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vc_Times_p_time'
			this.vc_Times_p_time = new double[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vc_Times_p_time'
				this.vc_Times_p_time[nMatches] = new double[2][];
			}
			// Create array for replicates of 'Perfomance_opposing_team_F'
			this.Perfomance_opposing_team_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'Perfomance_opposing_team_F'
				this.Perfomance_opposing_team_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'Perfomance_opposing_team_0__F'
			this.Perfomance_opposing_team_0__F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'Perfomance_opposing_team_0__F'
				this.Perfomance_opposing_team_0__F[nMatches] = new Gaussian[2][];
			}
			this.vdouble690_reduced = new double[1000][];
			this.vdouble691_reduced = new double[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				this.vdouble690_reduced[nMatches] = new double[2];
				this.vdouble691_reduced[nMatches] = new double[2];
			}
			// Create array for replicates of 'vdouble693_F'
			this.vdouble693_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble693_F'
				this.vdouble693_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble692_F'
			this.vdouble692_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble692_F'
				this.vdouble692_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'player_perf_t__n_item0_rep_F'
			this.player_perf_t__n_item0_rep_F = new DistributionStructArray<Gaussian,double>[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'player_perf_t__n_item0_rep_F'
				this.player_perf_t__n_item0_rep_F[nMatches] = new DistributionStructArray<Gaussian,double>[2][];
			}
			// Create array for replicates of 'player_perf_t__n_item0_rep_F_marginal'
			this.player_perf_t__n_item0_rep_F_marginal = new DistributionStructArray<Gaussian,double>[1000][];
			// Create array for replicates of 'player_perf_t__n_item0_uses_F'
			this.player_perf_t__n_item0_uses_F = new DistributionStructArray<Gaussian,double>[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'player_perf_t__n_item0_uses' Forwards messages.
				this.player_perf_t__n_item0_uses_F[nMatches] = new DistributionStructArray<Gaussian,double>[2];
				// Create array for replicates of 'player_perf_t__n_item0_rep_F_marginal'
				this.player_perf_t__n_item0_rep_F_marginal[nMatches] = new DistributionStructArray<Gaussian,double>[2];
			}
			// Create array for replicates of 'player_perf_t__n_item0_uses_B'
			this.player_perf_t__n_item0_uses_B = new DistributionStructArray<Gaussian,double>[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for 'player_perf_t__n_item0_uses' Backwards messages.
				this.player_perf_t__n_item0_uses_B[nMatches] = new DistributionStructArray<Gaussian,double>[2];
			}
			// Create array for replicates of 'player_perf_t__n_item0_rep_B_toDef'
			this.player_perf_t__n_item0_rep_B_toDef = new DistributionStructArray<Gaussian,double>[1000][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'player_perf_t__n_item0_rep_B_toDef'
				this.player_perf_t__n_item0_rep_B_toDef[nMatches] = new DistributionStructArray<Gaussian,double>[2];
			}
			// Create array for replicates of 'player_perf_t__n_0_0__B'
			this.player_perf_t__n_0_0__B = new DistributionStructArray<Gaussian,double>[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'player_perf_t__n_0_0__B'
				this.player_perf_t__n_0_0__B[nMatches] = new DistributionStructArray<Gaussian,double>[2][];
			}
			// Create array for replicates of 'Perfomance_opposing_team_B'
			this.Perfomance_opposing_team_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'Perfomance_opposing_team_B'
				this.Perfomance_opposing_team_B[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble713_B'
			this.vdouble713_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble713_B'
				this.vdouble713_B[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble711_F'
			this.vdouble711_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble711_F'
				this.vdouble711_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble714_B'
			this.vdouble714_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble714_B'
				this.vdouble714_B[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'death_count_m__t__n_B'
			this.death_count_m__t__n_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'death_count_m__t__n_B'
				this.death_count_m__t__n_B[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble717_use_B'
			this.vdouble717_use_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble717_use_B'
				this.vdouble717_use_B[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble717_F'
			this.vdouble717_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble717_F'
				this.vdouble717_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'death_count_m__t__n_F'
			this.death_count_m__t__n_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'death_count_m__t__n_F'
				this.death_count_m__t__n_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble714_F'
			this.vdouble714_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble714_F'
				this.vdouble714_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble713_F'
			this.vdouble713_F = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble713_F'
				this.vdouble713_F[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble697_B'
			this.vdouble697_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble697_B'
				this.vdouble697_B[nMatches] = new Gaussian[2][];
			}
			// Create array for replicates of 'vdouble698_B'
			this.vdouble698_B = new Gaussian[1000][][];
			for(int nMatches = 0; nMatches<1000; nMatches++) {
				// Create array for replicates of 'vdouble698_B'
				this.vdouble698_B[nMatches] = new Gaussian[2][];
			}
			this.Constant_isDone = true;
		}

		/// <summary>
		/// Returns the marginal distribution for 'deathcount' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> DeathcountMarginal()
		{
			return this.deathcount_marginal_F;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_17_isDone = false;
					this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_7_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde4_isDone = false;
					this.Changed_numberOfIterationsDecreased_vdouble__198_vdouble__199_Init_deathcount_killcount_Match_time_m8_isDone = false;
					this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__199_Init_deathcou9_isDone = false;
					this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__1910_isDone = false;
					this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1911_isDone = false;
					this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_v14_isDone = false;
					this.Changed_deathcount_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_Pla15_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdoubl2_isDone = false;
				}
				this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam3_isDone = false;
				this.Changed_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__198_isDone = false;
			}
			this.Changed_vdouble__199();
			this.Changed_vdouble__198();
			this.Changed_Match_time_m();
			this.Changed_deathcount_PlayerInTeam();
			this.Changed_killcount_PlayerInTeam();
			this.Changed_PlayerIndex();
			this.Changed_team2wins();
			this.Changed_numberOfIterationsDecreased_team2wins_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_17(initialise);
			this.Constant();
			this.Changed_PlayerInTeam();
			this.Changed_p_time_m__t__n_PlayerInTeam();
			this.Changed_Match_time_m_p_time_m__t__n_PlayerInTeam();
			this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_deathcount_killcount_Match_time_m_p_time_m__t_7(initialise);
			this.Changed_vdouble__198_vdouble__199();
			this.Changed_numberOfIterationsDecreased_Init_deathcount_killcount_Match_time_m_p_time_m__t__n_PlayerInde4(initialise);
			this.Changed_numberOfIterationsDecreased_vdouble__198_vdouble__199_Init_deathcount_killcount_Match_time_m8(initialise);
			this.Changed_numberOfIterationsDecreased_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__199_Init_deathcou9(initialise);
			this.Changed_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__198_vdouble__1910(initialise);
			this.Changed_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__1911(initialise);
			this.Changed_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_PlayerInTeam_v14(initialise);
			this.Changed_deathcount_killcount_Match_time_m_numberOfIterationsDecreased_p_time_m__t__n_PlayerIndex_Pla15(initialise);
			this.Changed_deathcount_killcount_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam3(numberOfIterations);
			this.Changed_numberOfIterationsDecreased_Init_Match_time_m_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdoubl2(initialise);
			this.Changed_Match_time_m_numberOfIterations_p_time_m__t__n_PlayerIndex_PlayerInTeam_vdouble__198(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="PlayerInTeam") {
				return this.PlayerInTeam;
			}
			if (variableName=="PlayerIndex") {
				return this.PlayerIndex;
			}
			if (variableName=="killcount") {
				return this.killcount;
			}
			if (variableName=="deathcount") {
				return this.deathcount;
			}
			if (variableName=="team2wins") {
				return this.team2wins;
			}
			if (variableName=="Match_time_m") {
				return this.Match_time_m;
			}
			if (variableName=="p_time_m__t__n") {
				return this.p_time_m__t__n;
			}
			if (variableName=="vdouble__198") {
				return this.vdouble__198;
			}
			if (variableName=="vdouble__199") {
				return this.vdouble__199;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'killcount' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> KillcountMarginal()
		{
			return this.killcount_marginal_F;
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="vdouble__199") {
				return this.Vdouble__199Marginal();
			}
			if (variableName=="vdouble__198") {
				return this.Vdouble__198Marginal();
			}
			if (variableName=="Match_time_m") {
				return this.Match_time_mMarginal();
			}
			if (variableName=="deathcount") {
				return this.DeathcountMarginal();
			}
			if (variableName=="killcount") {
				return this.KillcountMarginal();
			}
			if (variableName=="PlayerIndex") {
				return this.PlayerIndexMarginal();
			}
			if (variableName=="team2wins") {
				return this.Team2winsMarginal();
			}
			if (variableName=="PlayerInTeam") {
				return this.PlayerInTeamMarginal();
			}
			if (variableName=="p_time_m__t__n") {
				return this.P_time_m__t__nMarginal();
			}
			if (variableName=="skills_prior") {
				return this.Skills_priorMarginal();
			}
			if (variableName=="vdouble__200") {
				return this.Vdouble__200Marginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		/// <summary>
		/// Returns the marginal distribution for 'Match_time_m' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Match_time_mMarginal()
		{
			return this.Match_time_m_marginal_F;
		}

		private void OnMessageUpdated(MessageUpdatedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<MessageUpdatedEventArgs> handler = this.MessageUpdated;
			if (handler!=null) {
				handler(this, e);
			}
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>
		/// Returns the marginal distribution for 'p_time_m__t__n' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> P_time_m__t__nMarginal()
		{
			return this.p_time_m__t__n_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'PlayerIndex' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[][][]> PlayerIndexMarginal()
		{
			return this.PlayerIndex_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'PlayerInTeam' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[][]> PlayerInTeamMarginal()
		{
			return this.PlayerInTeam_marginal_F;
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="PlayerInTeam") {
				this.PlayerInTeam = (int[][])value;
				return ;
			}
			if (variableName=="PlayerIndex") {
				this.PlayerIndex = (int[][][])value;
				return ;
			}
			if (variableName=="killcount") {
				this.killcount = (double[][][])value;
				return ;
			}
			if (variableName=="deathcount") {
				this.deathcount = (double[][][])value;
				return ;
			}
			if (variableName=="team2wins") {
				this.team2wins = (int[])value;
				return ;
			}
			if (variableName=="Match_time_m") {
				this.Match_time_m = (double[])value;
				return ;
			}
			if (variableName=="p_time_m__t__n") {
				this.p_time_m__t__n = (double[][][])value;
				return ;
			}
			if (variableName=="vdouble__198") {
				this.vdouble__198 = (double[])value;
				return ;
			}
			if (variableName=="vdouble__199") {
				this.vdouble__199 = (double[])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'skills_prior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Skills_priorMarginal()
		{
			return this.skills_prior_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'team2wins' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[]> Team2winsMarginal()
		{
			return this.team2wins_marginal_F;
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__198' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__198Marginal()
		{
			return this.vdouble__198_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__199' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__199Marginal()
		{
			return this.vdouble__199_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__200' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__200Marginal()
		{
			return ArrayHelper.MakeCopy<DistributionStructArray<Gaussian,double>>(this.vdouble__200_marginal_F);
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		/// <summary>Event that is fired when a message that is being monitored is updated.</summary>
		public event EventHandler<MessageUpdatedEventArgs> MessageUpdated;
		#endregion

	}

}
