// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;
using Microsoft.ML.Probabilistic.Collections;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.4.2203.202 at 12:17 on gioved√¨ 7 luglio 2022.
	/// </remarks>
	public partial class Model37_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>True if Changed_match_m_Time has executed. Set this to false to force re-execution of Changed_match_m_Time</summary>
		public bool Changed_match_m_Time_isDone;
		/// <summary>True if Changed_match_m_Time_numberOfIterations_player_n_Time_PlayerIndex_PlayerInTeam_team2wins_vdouble__313 has executed. Set this to false to force re-execution of Changed_match_m_Time_numberOfIterations_player_n_Time_PlayerIndex_PlayerInTeam_team2wins_vdouble__313</summary>
		public bool Changed_match_m_Time_numberOfIterations_player_n_Time_PlayerIndex_PlayerInTeam_team2wins_vdouble__313_isDone;
		/// <summary>True if Changed_match_m_Time_numberOfIterations_player_n_Time_PlayerIndex_PlayerInTeam_vdouble__319 has executed. Set this to false to force re-execution of Changed_match_m_Time_numberOfIterations_player_n_Time_PlayerIndex_PlayerInTeam_vdouble__319</summary>
		public bool Changed_match_m_Time_numberOfIterations_player_n_Time_PlayerIndex_PlayerInTeam_vdouble__319_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_team2wi4 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_team2wi4</summary>
		public bool Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_team2wi4_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_team2wi4 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_team2wi4</summary>
		public bool Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_team2wi4_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_vdouble2 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_vdouble2</summary>
		public bool Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_vdouble2_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_vdouble2 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_vdouble2</summary>
		public bool Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_vdouble2_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_PlayerInTeam_Init_match_m_Time_player_n_Time_PlayerIndex_team2wi6 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_PlayerInTeam_Init_match_m_Time_player_n_Time_PlayerIndex_team2wi6</summary>
		public bool Changed_numberOfIterationsDecreased_PlayerInTeam_Init_match_m_Time_player_n_Time_PlayerIndex_team2wi6_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_PlayerInTeam_Init_match_m_Time_player_n_Time_PlayerIndex_team2wi6 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_PlayerInTeam_Init_match_m_Time_player_n_Time_PlayerIndex_team2wi6</summary>
		public bool Changed_numberOfIterationsDecreased_PlayerInTeam_Init_match_m_Time_player_n_Time_PlayerIndex_team2wi6_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_team2wins_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTe8 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_team2wins_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTe8</summary>
		public bool Changed_numberOfIterationsDecreased_team2wins_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTe8_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_team2wins_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTe8 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_team2wins_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTe8</summary>
		public bool Changed_numberOfIterationsDecreased_team2wins_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTe8_isInitialised;
		/// <summary>True if Changed_player_n_Time_PlayerInTeam has executed. Set this to false to force re-execution of Changed_player_n_Time_PlayerInTeam</summary>
		public bool Changed_player_n_Time_PlayerInTeam_isDone;
		/// <summary>True if Changed_PlayerIndex has executed. Set this to false to force re-execution of Changed_PlayerIndex</summary>
		public bool Changed_PlayerIndex_isDone;
		/// <summary>True if Changed_PlayerInTeam has executed. Set this to false to force re-execution of Changed_PlayerInTeam</summary>
		public bool Changed_PlayerInTeam_isDone;
		/// <summary>True if Changed_team2wins has executed. Set this to false to force re-execution of Changed_team2wins</summary>
		public bool Changed_team2wins_isDone;
		/// <summary>True if Changed_vdouble__319 has executed. Set this to false to force re-execution of Changed_vdouble__319</summary>
		public bool Changed_vdouble__319_isDone;
		/// <summary>True if Changed_vdouble__320 has executed. Set this to false to force re-execution of Changed_vdouble__320</summary>
		public bool Changed_vdouble__320_isDone;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		/// <summary>Messages from uses of 'Diff_2_'</summary>
		public Gaussian[][] Diff_2__uses_B;
		/// <summary>Field backing the match_m_Time property</summary>
		private double[] Match_m_Time;
		/// <summary>Message to marginal of 'match_m_Time'</summary>
		public DistributionStructArray<Gaussian,double> match_m_Time_marginal_F;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Field backing the player_n_Time property</summary>
		private double[][][] Player_n_Time;
		/// <summary>Message to marginal of 'player_n_Time'</summary>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> player_n_Time_marginal_F;
		/// <summary>Field backing the PlayerIndex property</summary>
		private int[][][] playerIndex;
		/// <summary>Message to marginal of 'PlayerIndex'</summary>
		public PointMass<int[][][]> PlayerIndex_marginal_F;
		/// <summary>Field backing the PlayerInTeam property</summary>
		private int[][] playerInTeam;
		/// <summary>Message to marginal of 'PlayerInTeam'</summary>
		public PointMass<int[][]> PlayerInTeam_marginal_F;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B;
		/// <summary>Message to marginal of 'skills_prior'</summary>
		public DistributionStructArray<Gaussian,double> skills_prior_marginal_F;
		/// <summary>Message from use of 'skills_prior'</summary>
		public DistributionStructArray<Gaussian,double> skills_prior_use_B;
		/// <summary>Field backing the team2wins property</summary>
		private int[] Team2wins;
		/// <summary>Message to marginal of 'team2wins'</summary>
		public PointMass<int[]> team2wins_marginal_F;
		/// <summary>Field backing the vdouble__319 property</summary>
		private double[] Vdouble__319;
		/// <summary>Message to marginal of 'vdouble__319'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__319_marginal_F;
		/// <summary>Field backing the vdouble__320 property</summary>
		private double[] Vdouble__320;
		/// <summary>Message to marginal of 'vdouble__320'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__320_marginal_F;
		/// <summary>Message to marginal of 'vdouble__321'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__321_marginal_F;
		/// <summary>Buffer for VariablePointOp_Rprop.MarginalAverageConditional</summary>
		public RpropBufferData[] vdouble__321_use_B_nMatches__buffer;
		#endregion

		#region Properties
		/// <summary>The externally-specified value of 'match_m_Time'</summary>
		public double[] match_m_Time
		{
			get {
				return this.Match_m_Time;
			}
			set {
				if ((value!=null)&&(value.Length!=500)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+500)+" was expected for variable \'match_m_Time\'");
				}
				this.Match_m_Time = value;
				this.numberOfIterationsDone = 0;
				this.Changed_match_m_Time_isDone = false;
				this.Changed_numberOfIterationsDecreased_team2wins_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTe8_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_match_m_Time_player_n_Time_PlayerIndex_team2wi6_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_team2wi4_isInitialised = false;
				this.Changed_match_m_Time_numberOfIterations_player_n_Time_PlayerIndex_PlayerInTeam_team2wins_vdouble__313_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_vdouble2_isInitialised = false;
				this.Changed_match_m_Time_numberOfIterations_player_n_Time_PlayerIndex_PlayerInTeam_vdouble__319_isDone = false;
			}
		}

		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'player_n_Time'</summary>
		public double[][][] player_n_Time
		{
			get {
				return this.Player_n_Time;
			}
			set {
				if ((value!=null)&&(value.Length!=500)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+500)+" was expected for variable \'player_n_Time\'");
				}
				this.Player_n_Time = value;
				this.numberOfIterationsDone = 0;
				this.Changed_player_n_Time_PlayerInTeam_isDone = false;
				this.Changed_numberOfIterationsDecreased_team2wins_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTe8_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_match_m_Time_player_n_Time_PlayerIndex_team2wi6_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_team2wi4_isInitialised = false;
				this.Changed_match_m_Time_numberOfIterations_player_n_Time_PlayerIndex_PlayerInTeam_team2wins_vdouble__313_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_vdouble2_isInitialised = false;
				this.Changed_match_m_Time_numberOfIterations_player_n_Time_PlayerIndex_PlayerInTeam_vdouble__319_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'PlayerIndex'</summary>
		public int[][][] PlayerIndex
		{
			get {
				return this.playerIndex;
			}
			set {
				if ((value!=null)&&(value.Length!=500)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+500)+" was expected for variable \'PlayerIndex\'");
				}
				this.playerIndex = value;
				this.numberOfIterationsDone = 0;
				this.Changed_PlayerIndex_isDone = false;
				this.Changed_numberOfIterationsDecreased_team2wins_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTe8_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_match_m_Time_player_n_Time_PlayerIndex_team2wi6_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_team2wi4_isInitialised = false;
				this.Changed_match_m_Time_numberOfIterations_player_n_Time_PlayerIndex_PlayerInTeam_team2wins_vdouble__313_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_vdouble2_isInitialised = false;
				this.Changed_match_m_Time_numberOfIterations_player_n_Time_PlayerIndex_PlayerInTeam_vdouble__319_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'PlayerInTeam'</summary>
		public int[][] PlayerInTeam
		{
			get {
				return this.playerInTeam;
			}
			set {
				if ((value!=null)&&(value.Length!=500)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+500)+" was expected for variable \'PlayerInTeam\'");
				}
				this.playerInTeam = value;
				this.numberOfIterationsDone = 0;
				this.Changed_player_n_Time_PlayerInTeam_isDone = false;
				this.Changed_numberOfIterationsDecreased_team2wins_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTe8_isInitialised = false;
				this.Changed_PlayerInTeam_isDone = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_match_m_Time_player_n_Time_PlayerIndex_team2wi6_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_team2wi4_isInitialised = false;
				this.Changed_match_m_Time_numberOfIterations_player_n_Time_PlayerIndex_PlayerInTeam_team2wins_vdouble__313_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_vdouble2_isInitialised = false;
				this.Changed_match_m_Time_numberOfIterations_player_n_Time_PlayerIndex_PlayerInTeam_vdouble__319_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'team2wins'</summary>
		public int[] team2wins
		{
			get {
				return this.Team2wins;
			}
			set {
				if ((value!=null)&&(value.Length!=500)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+500)+" was expected for variable \'team2wins\'");
				}
				this.Team2wins = value;
				this.numberOfIterationsDone = 0;
				this.Changed_team2wins_isDone = false;
				this.Changed_numberOfIterationsDecreased_team2wins_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTe8_isDone = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_match_m_Time_player_n_Time_PlayerIndex_team2wi6_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_team2wi4_isInitialised = false;
				this.Changed_match_m_Time_numberOfIterations_player_n_Time_PlayerIndex_PlayerInTeam_team2wins_vdouble__313_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vdouble__319'</summary>
		public double[] vdouble__319
		{
			get {
				return this.Vdouble__319;
			}
			set {
				if ((value!=null)&&(value.Length!=3493)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+3493)+" was expected for variable \'vdouble__319\'");
				}
				this.Vdouble__319 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vdouble__319_isDone = false;
				this.Changed_numberOfIterationsDecreased_team2wins_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTe8_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_match_m_Time_player_n_Time_PlayerIndex_team2wi6_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_team2wi4_isInitialised = false;
				this.Changed_match_m_Time_numberOfIterations_player_n_Time_PlayerIndex_PlayerInTeam_team2wins_vdouble__313_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_vdouble2_isInitialised = false;
				this.Changed_match_m_Time_numberOfIterations_player_n_Time_PlayerIndex_PlayerInTeam_vdouble__319_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vdouble__320'</summary>
		public double[] vdouble__320
		{
			get {
				return this.Vdouble__320;
			}
			set {
				if ((value!=null)&&(value.Length!=3493)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+3493)+" was expected for variable \'vdouble__320\'");
				}
				this.Vdouble__320 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vdouble__320_isDone = false;
				this.Changed_numberOfIterationsDecreased_team2wins_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTe8_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_match_m_Time_player_n_Time_PlayerIndex_team2wi6_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_team2wi4_isInitialised = false;
				this.Changed_match_m_Time_numberOfIterations_player_n_Time_PlayerIndex_PlayerInTeam_team2wins_vdouble__313_isDone = false;
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of match_m_Time</summary>
		private void Changed_match_m_Time()
		{
			if (this.Changed_match_m_Time_isDone) {
				return ;
			}
			// Create array for 'match_m_Time_marginal' Forwards messages.
			this.match_m_Time_marginal_F = new DistributionStructArray<Gaussian,double>(500);
			for(int nMatches = 0; nMatches<500; nMatches++) {
				this.match_m_Time_marginal_F[nMatches] = Gaussian.Uniform();
			}
			// Message to 'match_m_Time_marginal' from DerivedVariable factor
			this.match_m_Time_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Gaussian,double>,double[]>(this.Match_m_Time, this.match_m_Time_marginal_F);
			this.Changed_match_m_Time_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of match_m_Time and numberOfIterations and player_n_Time and PlayerIndex and PlayerInTeam and team2wins and vdouble__319 and vdouble__320</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_match_m_Time_numberOfIterations_player_n_Time_PlayerIndex_PlayerInTeam_team2wins_vdouble__313(int numberOfIterations)
		{
			if (this.Changed_match_m_Time_numberOfIterations_player_n_Time_PlayerIndex_PlayerInTeam_team2wins_vdouble__313_isDone) {
				return ;
			}
			DistributionStructArray<Gaussian,double> skills_prior_F;
			// Create array for 'skills_prior' Forwards messages.
			skills_prior_F = new DistributionStructArray<Gaussian,double>(3493);
			for(int nPlayers = 0; nPlayers<3493; nPlayers++) {
				skills_prior_F[nPlayers] = Gaussian.Uniform();
			}
			// Create array for 'skills_prior_marginal' Forwards messages.
			this.skills_prior_marginal_F = new DistributionStructArray<Gaussian,double>(3493);
			DistributionStructArray<Gaussian,double> skills_prior_use_F_marginal;
			skills_prior_use_F_marginal = GetDeepJaggedItemsOp<double>.MarginalInit<DistributionStructArray<Gaussian,double>>(skills_prior_F);
			for(int nPlayers = 0; nPlayers<3493; nPlayers++) {
				// Message to 'skills_prior' from Gaussian factor
				skills_prior_F[nPlayers] = GaussianOpBase.SampleAverageConditional(this.Vdouble__319[nPlayers], this.Vdouble__320[nPlayers]);
			}
			DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F;
			// Create array for 'skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' Forwards messages.
			skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(500);
			for(int nMatches = 0; nMatches<500; nMatches++) {
				// Create array for 'skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' Forwards messages.
				skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for 'skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' Forwards messages.
					skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'perf_from_ds_F'
			Gaussian[][][] perf_from_ds_F = new Gaussian[500][][];
			for(int nMatches = 0; nMatches<500; nMatches++) {
				// Create array for replicates of 'perf_from_ds_F'
				perf_from_ds_F[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'perf_from_ds_F'
					perf_from_ds_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						perf_from_ds_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'perf_n_m_F'
			Gaussian[][][] perf_n_m_F = new Gaussian[500][][];
			for(int nMatches = 0; nMatches<500; nMatches++) {
				// Create array for replicates of 'perf_n_m_F'
				perf_n_m_F[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'perf_n_m_F'
					perf_n_m_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						perf_n_m_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'playerPerformance_F'
			DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>[] playerPerformance_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>[500];
			for(int nMatches = 0; nMatches<500; nMatches++) {
				// Create array for 'playerPerformance' Forwards messages.
				playerPerformance_F[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for 'playerPerformance' Forwards messages.
					playerPerformance_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						playerPerformance_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'SumTeam2_F'
			Gaussian[] SumTeam2_F = new Gaussian[500];
			for(int nMatches = 0; nMatches<500; nMatches++) {
				SumTeam2_F[nMatches] = Gaussian.Uniform();
			}
			// Create array for replicates of 'SumTeam1_F'
			Gaussian[] SumTeam1_F = new Gaussian[500];
			for(int nMatches = 0; nMatches<500; nMatches++) {
				SumTeam1_F[nMatches] = Gaussian.Uniform();
			}
			// Create array for replicates of 'Diff_F'
			Gaussian[] Diff_F = new Gaussian[500];
			for(int nMatches = 0; nMatches<500; nMatches++) {
				Diff_F[nMatches] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble906_F'
			Gaussian[] vdouble906_F = new Gaussian[500];
			for(int nMatches = 0; nMatches<500; nMatches++) {
				if (this.Team2wins[nMatches]==1) {
					vdouble906_F[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble906_B'
			Gaussian[] vdouble906_B = new Gaussian[500];
			for(int nMatches = 0; nMatches<500; nMatches++) {
				if (this.Team2wins[nMatches]==1) {
					vdouble906_B[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'Diff_1__B'
			Gaussian[] Diff_1__B = new Gaussian[500];
			for(int nMatches = 0; nMatches<500; nMatches++) {
				if (this.Team2wins[nMatches]==1) {
					Diff_1__B[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'Diff_B'
			Gaussian[] Diff_B = new Gaussian[500];
			for(int nMatches = 0; nMatches<500; nMatches++) {
				Diff_B[nMatches] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble904_F'
			Gaussian[] vdouble904_F = new Gaussian[500];
			for(int nMatches = 0; nMatches<500; nMatches++) {
				if (this.Team2wins[nMatches]==0) {
					vdouble904_F[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble904_B'
			Gaussian[] vdouble904_B = new Gaussian[500];
			for(int nMatches = 0; nMatches<500; nMatches++) {
				if (this.Team2wins[nMatches]==0) {
					vdouble904_B[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'Diff_0__B'
			Gaussian[] Diff_0__B = new Gaussian[500];
			for(int nMatches = 0; nMatches<500; nMatches++) {
				if (this.Team2wins[nMatches]==0) {
					Diff_0__B[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'Diff_2__uses_F'
			Gaussian[][] Diff_2__uses_F = new Gaussian[500][];
			for(int nMatches = 0; nMatches<500; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					// Create array for 'Diff_2__uses' Forwards messages.
					Diff_2__uses_F[nMatches] = new Gaussian[2];
					Diff_2__uses_F[nMatches][1] = Gaussian.Uniform();
					Diff_2__uses_F[nMatches][0] = Gaussian.Uniform();
					this.Diff_2__uses_B[nMatches][1] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble902_F'
			Gaussian[] vdouble902_F = new Gaussian[500];
			for(int nMatches = 0; nMatches<500; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					vdouble902_F[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble902_B'
			Gaussian[] vdouble902_B = new Gaussian[500];
			for(int nMatches = 0; nMatches<500; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					vdouble902_B[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vbool233_B'
			Bernoulli[] vbool233_B = new Bernoulli[500];
			for(int nMatches = 0; nMatches<500; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					vbool233_B[nMatches] = Bernoulli.Uniform();
					// Message to 'vbool233' from Not factor
					vbool233_B[nMatches] = BooleanNotOp.BAverageConditional(true);
				}
			}
			// Create array for replicates of 'vdouble900_F'
			Gaussian[] vdouble900_F = new Gaussian[500];
			for(int nMatches = 0; nMatches<500; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					vdouble900_F[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble900_B'
			Gaussian[] vdouble900_B = new Gaussian[500];
			for(int nMatches = 0; nMatches<500; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					vdouble900_B[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vbool230_B'
			Bernoulli[] vbool230_B = new Bernoulli[500];
			for(int nMatches = 0; nMatches<500; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					vbool230_B[nMatches] = Bernoulli.Uniform();
					// Message to 'vbool230' from Not factor
					vbool230_B[nMatches] = BooleanNotOp.BAverageConditional(true);
				}
			}
			// Create array for replicates of 'Diff_2__B'
			Gaussian[] Diff_2__B = new Gaussian[500];
			for(int nMatches = 0; nMatches<500; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					Diff_2__B[nMatches] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'SumTeam2_B'
			Gaussian[] SumTeam2_B = new Gaussian[500];
			for(int nMatches = 0; nMatches<500; nMatches++) {
				SumTeam2_B[nMatches] = Gaussian.Uniform();
			}
			// Create array for replicates of 'playerPerformance_B'
			DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>[] playerPerformance_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>[500];
			for(int nMatches = 0; nMatches<500; nMatches++) {
				// Create array for 'playerPerformance' Backwards messages.
				playerPerformance_B[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for 'playerPerformance' Backwards messages.
					playerPerformance_B[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						playerPerformance_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'SumTeam1_B'
			Gaussian[] SumTeam1_B = new Gaussian[500];
			for(int nMatches = 0; nMatches<500; nMatches++) {
				SumTeam1_B[nMatches] = Gaussian.Uniform();
			}
			// Create array for replicates of 'perf_n_m_B'
			Gaussian[][][] perf_n_m_B = new Gaussian[500][][];
			for(int nMatches = 0; nMatches<500; nMatches++) {
				// Create array for replicates of 'perf_n_m_B'
				perf_n_m_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'perf_n_m_B'
					perf_n_m_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						perf_n_m_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'perf_from_ds_use_B'
			Gaussian[][][] perf_from_ds_use_B = new Gaussian[500][][];
			for(int nMatches = 0; nMatches<500; nMatches++) {
				// Create array for replicates of 'perf_from_ds_use_B'
				perf_from_ds_use_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'perf_from_ds_use_B'
					perf_from_ds_use_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						perf_from_ds_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Create array for replicates of 'Damped_skill_B'
			Gaussian[][][] Damped_skill_B = new Gaussian[500][][];
			for(int nMatches = 0; nMatches<500; nMatches++) {
				// Create array for replicates of 'Damped_skill_B'
				Damped_skill_B[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for replicates of 'Damped_skill_B'
					Damped_skill_B[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						Damped_skill_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				skills_prior_use_F_marginal = GetDeepJaggedItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(skills_prior_F, this.skills_prior_use_B, skills_prior_use_F_marginal);
				for(int nMatches = 0; nMatches<500; nMatches++) {
					// Message to 'skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' from GetDeepJaggedItems factor
					skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F[nMatches] = GetDeepJaggedItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>,Gaussian>(this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B[nMatches], skills_prior_F, skills_prior_use_F_marginal, this.playerIndex, nMatches, skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F[nMatches]);
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Message to 'perf_from_ds' from Gaussian factor
							perf_from_ds_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.SampleAverageConditional(skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 1.0);
							// Message to 'perf_n_m' from Product factor
							perf_n_m_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(perf_from_ds_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Player_n_Time[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'playerPerformance' from Ratio factor
							playerPerformance_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.RatioAverageConditional(perf_n_m_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Match_m_Time[nMatches]);
						}
					}
					// Message to 'SumTeam2' from Sum factor
					SumTeam2_F[nMatches] = FastSumOp.SumAverageConditional(playerPerformance_F[nMatches][1]);
					// Message to 'SumTeam1' from Sum factor
					SumTeam1_F[nMatches] = FastSumOp.SumAverageConditional(playerPerformance_F[nMatches][0]);
					// Message to 'Diff' from Difference factor
					Diff_F[nMatches] = DoublePlusOp.AAverageConditional(SumTeam1_F[nMatches], SumTeam2_F[nMatches]);
					if (this.Team2wins[nMatches]==1) {
						// Message to 'vdouble906' from Difference factor
						vdouble906_F[nMatches] = DoublePlusOp.AAverageConditional(-0.062763845379169722, Diff_F[nMatches]);
						// Message to 'vdouble906' from IsPositive factor
						vdouble906_B[nMatches] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(true), vdouble906_F[nMatches]);
						// Message to 'Diff_1_' from Difference factor
						Diff_1__B[nMatches] = DoublePlusOp.BAverageConditional(-0.062763845379169722, vdouble906_B[nMatches]);
						// Message to 'Diff' from Copy factor
						Diff_B[nMatches] = ArrayHelper.SetTo<Gaussian>(Diff_B[nMatches], Diff_1__B[nMatches]);
					}
					if (this.Team2wins[nMatches]==0) {
						// Message to 'vdouble904' from Difference factor
						vdouble904_F[nMatches] = DoublePlusOp.AAverageConditional(Diff_F[nMatches], 0.062763845379169722);
						// Message to 'vdouble904' from IsPositive factor
						vdouble904_B[nMatches] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(true), vdouble904_F[nMatches]);
						// Message to 'Diff_0_' from Difference factor
						Diff_0__B[nMatches] = DoublePlusOp.SumAverageConditional(vdouble904_B[nMatches], 0.062763845379169722);
						// Message to 'Diff' from Copy factor
						Diff_B[nMatches] = ArrayHelper.SetTo<Gaussian>(Diff_B[nMatches], Diff_0__B[nMatches]);
					}
					if (this.Team2wins[nMatches]==2) {
						// Message to 'Diff_2__uses' from Replicate factor
						Diff_2__uses_F[nMatches][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.Diff_2__uses_B[nMatches], Diff_F[nMatches], 1, Diff_2__uses_F[nMatches][1]);
						// Message to 'vdouble902' from Difference factor
						vdouble902_F[nMatches] = DoublePlusOp.AAverageConditional(-0.062763845379169722, Diff_2__uses_F[nMatches][1]);
						// Message to 'vdouble902' from IsPositive factor
						vdouble902_B[nMatches] = IsPositiveOp_Proper.XAverageConditional(vbool233_B[nMatches], vdouble902_F[nMatches]);
						// Message to 'Diff_2__uses' from Difference factor
						this.Diff_2__uses_B[nMatches][1] = DoublePlusOp.BAverageConditional(-0.062763845379169722, vdouble902_B[nMatches]);
						// Message to 'Diff_2__uses' from Replicate factor
						Diff_2__uses_F[nMatches][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.Diff_2__uses_B[nMatches], Diff_F[nMatches], 0, Diff_2__uses_F[nMatches][0]);
						// Message to 'vdouble900' from Difference factor
						vdouble900_F[nMatches] = DoublePlusOp.AAverageConditional(Diff_2__uses_F[nMatches][0], 0.062763845379169722);
						// Message to 'vdouble900' from IsPositive factor
						vdouble900_B[nMatches] = IsPositiveOp_Proper.XAverageConditional(vbool230_B[nMatches], vdouble900_F[nMatches]);
						// Message to 'Diff_2__uses' from Difference factor
						this.Diff_2__uses_B[nMatches][0] = DoublePlusOp.SumAverageConditional(vdouble900_B[nMatches], 0.062763845379169722);
						// Message to 'Diff_2_' from Replicate factor
						Diff_2__B[nMatches] = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(this.Diff_2__uses_B[nMatches], Diff_2__B[nMatches]);
						// Message to 'Diff' from Copy factor
						Diff_B[nMatches] = ArrayHelper.SetTo<Gaussian>(Diff_B[nMatches], Diff_2__B[nMatches]);
					}
					// Message to 'SumTeam2' from Difference factor
					SumTeam2_B[nMatches] = DoublePlusOp.BAverageConditional(SumTeam1_F[nMatches], Diff_B[nMatches]);
					// Message to 'playerPerformance' from Sum factor
					playerPerformance_B[nMatches][1] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(SumTeam2_B[nMatches], SumTeam2_F[nMatches], playerPerformance_F[nMatches][1], playerPerformance_B[nMatches][1]);
					// Message to 'SumTeam1' from Difference factor
					SumTeam1_B[nMatches] = DoublePlusOp.SumAverageConditional(Diff_B[nMatches], SumTeam2_F[nMatches]);
					// Message to 'playerPerformance' from Sum factor
					playerPerformance_B[nMatches][0] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(SumTeam1_B[nMatches], SumTeam1_F[nMatches], playerPerformance_F[nMatches][0], playerPerformance_B[nMatches][0]);
					for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
						for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
							// Message to 'perf_n_m' from Ratio factor
							perf_n_m_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.AAverageConditional(playerPerformance_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Match_m_Time[nMatches]);
							// Message to 'perf_from_ds_use' from Product factor
							perf_from_ds_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.AAverageConditional(perf_n_m_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Player_n_Time[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
							// Message to 'Damped_skill' from Gaussian factor
							Damped_skill_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.MeanAverageConditional(perf_from_ds_use_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 1.0);
							// Message to 'skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' from Backward factor
							this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = DampBackwardOp.ValueAverageConditional<Gaussian>(Damped_skill_B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], 0.5, this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						}
					}
				}
				// Message to 'skills_prior_use' from GetDeepJaggedItems factor
				this.skills_prior_use_B = GetDeepJaggedItemsOp<double>.ArrayAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>,Gaussian,DistributionStructArray<Gaussian,double>>(this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B, this.playerIndex, this.skills_prior_use_B);
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			for(int nPlayers = 0; nPlayers<3493; nPlayers++) {
				this.skills_prior_marginal_F[nPlayers] = Gaussian.Uniform();
				// Message to 'skills_prior_marginal' from Variable factor
				this.skills_prior_marginal_F[nPlayers] = VariableOp.MarginalAverageConditional<Gaussian>(this.skills_prior_use_B[nPlayers], skills_prior_F[nPlayers], this.skills_prior_marginal_F[nPlayers]);
			}
			this.Changed_match_m_Time_numberOfIterations_player_n_Time_PlayerIndex_PlayerInTeam_team2wins_vdouble__313_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of match_m_Time and numberOfIterations and player_n_Time and PlayerIndex and PlayerInTeam and vdouble__319</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_match_m_Time_numberOfIterations_player_n_Time_PlayerIndex_PlayerInTeam_vdouble__319(int numberOfIterations)
		{
			if (this.Changed_match_m_Time_numberOfIterations_player_n_Time_PlayerIndex_PlayerInTeam_vdouble__319_isDone) {
				return ;
			}
			DistributionStructArray<Gaussian,double> vdouble__321_F;
			// Create array for 'vdouble__321' Forwards messages.
			vdouble__321_F = new DistributionStructArray<Gaussian,double>(500);
			for(int nMatches = 0; nMatches<500; nMatches++) {
				vdouble__321_F[nMatches] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble____76_F'
			DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>[] vdouble____76_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>[500];
			// Create array for replicates of 'vdouble874_F'
			Gaussian[][][] vdouble874_F = new Gaussian[500][][];
			// Create array for replicates of 'vdouble872_F'
			Gaussian[][][] vdouble872_F = new Gaussian[500][][];
			// Create array for replicates of 'vdouble878_F'
			Gaussian[] vdouble878_F = new Gaussian[500];
			// Create array for replicates of 'vdouble879_F'
			Gaussian[] vdouble879_F = new Gaussian[500];
			for(int nMatches = 0; nMatches<500; nMatches++) {
				// Create array for 'vdouble____76' Forwards messages.
				vdouble____76_F[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
				// Create array for replicates of 'vdouble872_F'
				vdouble872_F[nMatches] = new Gaussian[2][];
				// Create array for replicates of 'vdouble874_F'
				vdouble874_F[nMatches] = new Gaussian[2][];
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for 'vdouble____76' Forwards messages.
					vdouble____76_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					// Create array for replicates of 'vdouble872_F'
					vdouble872_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					// Create array for replicates of 'vdouble874_F'
					vdouble874_F[nMatches][nTeamsPerMatch] = new Gaussian[this.playerInTeam[nMatches][nTeamsPerMatch]];
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						vdouble____76_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						vdouble872_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						// Message to 'vdouble872' from Gaussian factor
						vdouble872_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianOpBase.SampleAverageConditional(this.Vdouble__319[this.playerIndex[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]], 1.0);
						vdouble874_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
						// Message to 'vdouble874' from Product factor
						vdouble874_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = GaussianProductOpBase.ProductAverageConditional(vdouble872_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Player_n_Time[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam]);
						// Message to 'vdouble____76' from Ratio factor
						vdouble____76_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = RatioGaussianOp.RatioAverageConditional(vdouble874_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam], this.Match_m_Time[nMatches]);
					}
				}
				vdouble878_F[nMatches] = Gaussian.Uniform();
				// Message to 'vdouble878' from Sum factor
				vdouble878_F[nMatches] = FastSumOp.SumAverageConditional(vdouble____76_F[nMatches][0]);
				vdouble879_F[nMatches] = Gaussian.Uniform();
				// Message to 'vdouble879' from Sum factor
				vdouble879_F[nMatches] = FastSumOp.SumAverageConditional(vdouble____76_F[nMatches][1]);
				// Message to 'vdouble__321' from Difference factor
				vdouble__321_F[nMatches] = Tracing.FireEvent<Gaussian>(DoublePlusOp.AAverageConditional(vdouble878_F[nMatches], vdouble879_F[nMatches]), string.Format("vdouble__321_F[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
			}
			Gaussian vdouble__321_use_B_reduced;
			vdouble__321_use_B_reduced = Gaussian.Uniform();
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				for(int nMatches = 0; nMatches<500; nMatches++) {
					this.vdouble__321_use_B_nMatches__buffer[nMatches] = VariablePointOp_Rprop.Buffer(vdouble__321_use_B_reduced, vdouble__321_F[nMatches], this.vdouble__321_marginal_F[nMatches], this.vdouble__321_use_B_nMatches__buffer[nMatches]);
					// Message to 'vdouble__321_marginal' from VariablePoint factor
					this.vdouble__321_marginal_F[nMatches] = Tracing.FireEvent<Gaussian>(VariablePointOp_Rprop.MarginalAverageConditional(vdouble__321_use_B_reduced, vdouble__321_F[nMatches], this.vdouble__321_use_B_nMatches__buffer[nMatches], this.vdouble__321_marginal_F[nMatches]), string.Format("vdouble__321_marginal_F[{0}]", new object[1] {nMatches}), this.OnMessageUpdated, false);
				}
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			this.Changed_match_m_Time_numberOfIterations_player_n_Time_PlayerIndex_PlayerInTeam_vdouble__319_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and must reset on changes to match_m_Time and player_n_Time and PlayerIndex and PlayerInTeam and team2wins and vdouble__319 and vdouble__320</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_team2wi4(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_team2wi4_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_team2wi4_isInitialised)) {
				return ;
			}
			for(int nPlayers = 0; nPlayers<3493; nPlayers++) {
				this.skills_prior_use_B[nPlayers] = Gaussian.Uniform();
			}
			this.Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_team2wi4_isDone = true;
			this.Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_team2wi4_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and must reset on changes to match_m_Time and player_n_Time and PlayerIndex and PlayerInTeam and vdouble__319</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_vdouble2(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_vdouble2_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_vdouble2_isInitialised)) {
				return ;
			}
			for(int nMatches = 0; nMatches<500; nMatches++) {
				this.vdouble__321_marginal_F[nMatches] = Gaussian.Uniform();
				this.vdouble__321_use_B_nMatches__buffer[nMatches] = VariablePointOp_Rprop.BufferInit();
			}
			this.Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_vdouble2_isDone = true;
			this.Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_vdouble2_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and PlayerInTeam and must reset on changes to match_m_Time and player_n_Time and PlayerIndex and team2wins and vdouble__319 and vdouble__320</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_PlayerInTeam_Init_match_m_Time_player_n_Time_PlayerIndex_team2wi6(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_match_m_Time_player_n_Time_PlayerIndex_team2wi6_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_match_m_Time_player_n_Time_PlayerIndex_team2wi6_isInitialised)) {
				return ;
			}
			for(int nMatches = 0; nMatches<500; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_match_m_Time_player_n_Time_PlayerIndex_team2wi6_isDone = true;
			this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_match_m_Time_player_n_Time_PlayerIndex_team2wi6_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and team2wins and must reset on changes to match_m_Time and player_n_Time and PlayerIndex and PlayerInTeam and vdouble__319 and vdouble__320</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_team2wins_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTe8(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_team2wins_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTe8_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_team2wins_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTe8_isInitialised)) {
				return ;
			}
			for(int nMatches = 0; nMatches<500; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					this.Diff_2__uses_B[nMatches][0] = Gaussian.Uniform();
				}
			}
			this.Changed_numberOfIterationsDecreased_team2wins_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTe8_isDone = true;
			this.Changed_numberOfIterationsDecreased_team2wins_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTe8_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of player_n_Time and PlayerInTeam</summary>
		private void Changed_player_n_Time_PlayerInTeam()
		{
			if (this.Changed_player_n_Time_PlayerInTeam_isDone) {
				return ;
			}
			// Create array for 'player_n_Time_marginal' Forwards messages.
			this.player_n_Time_marginal_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(500);
			for(int nMatches = 0; nMatches<500; nMatches++) {
				// Create array for 'player_n_Time_marginal' Forwards messages.
				this.player_n_Time_marginal_F[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for 'player_n_Time_marginal' Forwards messages.
					this.player_n_Time_marginal_F[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
					for(int nPlayersMinusPerTeam = 0; nPlayersMinusPerTeam<this.playerInTeam[nMatches][nTeamsPerMatch]; nPlayersMinusPerTeam++) {
						this.player_n_Time_marginal_F[nMatches][nTeamsPerMatch][nPlayersMinusPerTeam] = Gaussian.Uniform();
					}
				}
			}
			// Message to 'player_n_Time_marginal' from DerivedVariable factor
			this.player_n_Time_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>,double[][][]>(this.Player_n_Time, this.player_n_Time_marginal_F);
			this.Changed_player_n_Time_PlayerInTeam_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of PlayerIndex</summary>
		private void Changed_PlayerIndex()
		{
			if (this.Changed_PlayerIndex_isDone) {
				return ;
			}
			// Create array for 'PlayerIndex_marginal' Forwards messages.
			this.PlayerIndex_marginal_F = new PointMass<int[][][]>(this.playerIndex);
			// Message to 'PlayerIndex_marginal' from DerivedVariable factor
			this.PlayerIndex_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int[][][]>,int[][][]>(this.playerIndex, this.PlayerIndex_marginal_F);
			this.Changed_PlayerIndex_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of PlayerInTeam</summary>
		private void Changed_PlayerInTeam()
		{
			if (this.Changed_PlayerInTeam_isDone) {
				return ;
			}
			for(int nMatches = 0; nMatches<500; nMatches++) {
				for(int nTeamsPerMatch = 0; nTeamsPerMatch<2; nTeamsPerMatch++) {
					// Create array for 'skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' Backwards messages.
					this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B[nMatches][nTeamsPerMatch] = new DistributionStructArray<Gaussian,double>(this.playerInTeam[nMatches][nTeamsPerMatch]);
				}
			}
			// Create array for 'PlayerInTeam_marginal' Forwards messages.
			this.PlayerInTeam_marginal_F = new PointMass<int[][]>(this.playerInTeam);
			// Message to 'PlayerInTeam_marginal' from DerivedVariable factor
			this.PlayerInTeam_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int[][]>,int[][]>(this.playerInTeam, this.PlayerInTeam_marginal_F);
			this.Changed_PlayerInTeam_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of team2wins</summary>
		private void Changed_team2wins()
		{
			if (this.Changed_team2wins_isDone) {
				return ;
			}
			// Create array for replicates of 'Diff_2__uses_B'
			this.Diff_2__uses_B = new Gaussian[500][];
			for(int nMatches = 0; nMatches<500; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					// Create array for 'Diff_2__uses' Backwards messages.
					this.Diff_2__uses_B[nMatches] = new Gaussian[2];
				}
			}
			// Create array for replicates of 'vbool231'
			bool[] vbool231 = new bool[500];
			for(int nMatches = 0; nMatches<500; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					vbool231[nMatches] = true;
					Constrain.Equal<bool>(true, vbool231[nMatches]);
				}
			}
			// Create array for replicates of 'vbool234'
			bool[] vbool234 = new bool[500];
			for(int nMatches = 0; nMatches<500; nMatches++) {
				if (this.Team2wins[nMatches]==2) {
					vbool234[nMatches] = true;
					Constrain.Equal<bool>(true, vbool234[nMatches]);
				}
			}
			// Create array for replicates of 'vbool236'
			bool[] vbool236 = new bool[500];
			for(int nMatches = 0; nMatches<500; nMatches++) {
				if (this.Team2wins[nMatches]==0) {
					vbool236[nMatches] = true;
					Constrain.Equal<bool>(true, vbool236[nMatches]);
				}
			}
			// Create array for replicates of 'vbool238'
			bool[] vbool238 = new bool[500];
			for(int nMatches = 0; nMatches<500; nMatches++) {
				if (this.Team2wins[nMatches]==1) {
					vbool238[nMatches] = true;
					Constrain.Equal<bool>(true, vbool238[nMatches]);
				}
			}
			// Create array for 'team2wins_marginal' Forwards messages.
			this.team2wins_marginal_F = new PointMass<int[]>(this.Team2wins);
			// Message to 'team2wins_marginal' from DerivedVariable factor
			this.team2wins_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int[]>,int[]>(this.Team2wins, this.team2wins_marginal_F);
			this.Changed_team2wins_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vdouble__319</summary>
		private void Changed_vdouble__319()
		{
			if (this.Changed_vdouble__319_isDone) {
				return ;
			}
			// Create array for 'vdouble__319_marginal' Forwards messages.
			this.vdouble__319_marginal_F = new DistributionStructArray<Gaussian,double>(3493);
			for(int nPlayers = 0; nPlayers<3493; nPlayers++) {
				this.vdouble__319_marginal_F[nPlayers] = Gaussian.Uniform();
			}
			// Message to 'vdouble__319_marginal' from DerivedVariable factor
			this.vdouble__319_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Gaussian,double>,double[]>(this.Vdouble__319, this.vdouble__319_marginal_F);
			this.Changed_vdouble__319_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vdouble__320</summary>
		private void Changed_vdouble__320()
		{
			if (this.Changed_vdouble__320_isDone) {
				return ;
			}
			// Create array for 'vdouble__320_marginal' Forwards messages.
			this.vdouble__320_marginal_F = new DistributionStructArray<Gaussian,double>(3493);
			for(int nPlayers = 0; nPlayers<3493; nPlayers++) {
				this.vdouble__320_marginal_F[nPlayers] = Gaussian.Uniform();
			}
			// Message to 'vdouble__320_marginal' from DerivedVariable factor
			this.vdouble__320_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Gaussian,double>,double[]>(this.Vdouble__320, this.vdouble__320_marginal_F);
			this.Changed_vdouble__320_isDone = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			// Create array for 'vdouble__321_marginal' Forwards messages.
			this.vdouble__321_marginal_F = new DistributionStructArray<Gaussian,double>(500);
			// Create array for replicates of 'vdouble__321_use_B_nMatches__buffer'
			this.vdouble__321_use_B_nMatches__buffer = new RpropBufferData[500];
			// Create array for 'skills_prior_use' Backwards messages.
			this.skills_prior_use_B = new DistributionStructArray<Gaussian,double>(3493);
			// Create array for 'skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' Backwards messages.
			this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(500);
			for(int nMatches = 0; nMatches<500; nMatches++) {
				// Create array for 'skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam_' Backwards messages.
				this.skills_prior_itemPlayerIndex_nMatches__nTeamsPerMatch__nPlayersMinusPerTeam__B[nMatches] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(2);
			}
			this.Constant_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_team2wins_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTe8_isDone = false;
					this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_match_m_Time_player_n_Time_PlayerIndex_team2wi6_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_team2wi4_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_vdouble2_isDone = false;
				}
				this.Changed_match_m_Time_numberOfIterations_player_n_Time_PlayerIndex_PlayerInTeam_team2wins_vdouble__313_isDone = false;
				this.Changed_match_m_Time_numberOfIterations_player_n_Time_PlayerIndex_PlayerInTeam_vdouble__319_isDone = false;
			}
			this.Changed_vdouble__320();
			this.Changed_vdouble__319();
			this.Changed_player_n_Time_PlayerInTeam();
			this.Changed_match_m_Time();
			this.Changed_PlayerIndex();
			this.Changed_team2wins();
			this.Changed_numberOfIterationsDecreased_team2wins_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTe8(initialise);
			this.Constant();
			this.Changed_PlayerInTeam();
			this.Changed_numberOfIterationsDecreased_PlayerInTeam_Init_match_m_Time_player_n_Time_PlayerIndex_team2wi6(initialise);
			this.Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_team2wi4(initialise);
			this.Changed_match_m_Time_numberOfIterations_player_n_Time_PlayerIndex_PlayerInTeam_team2wins_vdouble__313(numberOfIterations);
			this.Changed_numberOfIterationsDecreased_Init_match_m_Time_player_n_Time_PlayerIndex_PlayerInTeam_vdouble2(initialise);
			this.Changed_match_m_Time_numberOfIterations_player_n_Time_PlayerIndex_PlayerInTeam_vdouble__319(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="PlayerInTeam") {
				return this.PlayerInTeam;
			}
			if (variableName=="PlayerIndex") {
				return this.PlayerIndex;
			}
			if (variableName=="team2wins") {
				return this.team2wins;
			}
			if (variableName=="match_m_Time") {
				return this.match_m_Time;
			}
			if (variableName=="player_n_Time") {
				return this.player_n_Time;
			}
			if (variableName=="vdouble__319") {
				return this.vdouble__319;
			}
			if (variableName=="vdouble__320") {
				return this.vdouble__320;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="vdouble__320") {
				return this.Vdouble__320Marginal();
			}
			if (variableName=="vdouble__319") {
				return this.Vdouble__319Marginal();
			}
			if (variableName=="player_n_Time") {
				return this.Player_n_TimeMarginal();
			}
			if (variableName=="match_m_Time") {
				return this.Match_m_TimeMarginal();
			}
			if (variableName=="PlayerIndex") {
				return this.PlayerIndexMarginal();
			}
			if (variableName=="team2wins") {
				return this.Team2winsMarginal();
			}
			if (variableName=="PlayerInTeam") {
				return this.PlayerInTeamMarginal();
			}
			if (variableName=="skills_prior") {
				return this.Skills_priorMarginal();
			}
			if (variableName=="vdouble__321") {
				return this.Vdouble__321Marginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		/// <summary>
		/// Returns the marginal distribution for 'match_m_Time' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Match_m_TimeMarginal()
		{
			return this.match_m_Time_marginal_F;
		}

		private void OnMessageUpdated(MessageUpdatedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<MessageUpdatedEventArgs> handler = this.MessageUpdated;
			if (handler!=null) {
				handler(this, e);
			}
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>
		/// Returns the marginal distribution for 'player_n_Time' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> Player_n_TimeMarginal()
		{
			return this.player_n_Time_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'PlayerIndex' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[][][]> PlayerIndexMarginal()
		{
			return this.PlayerIndex_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'PlayerInTeam' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[][]> PlayerInTeamMarginal()
		{
			return this.PlayerInTeam_marginal_F;
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="PlayerInTeam") {
				this.PlayerInTeam = (int[][])value;
				return ;
			}
			if (variableName=="PlayerIndex") {
				this.PlayerIndex = (int[][][])value;
				return ;
			}
			if (variableName=="team2wins") {
				this.team2wins = (int[])value;
				return ;
			}
			if (variableName=="match_m_Time") {
				this.match_m_Time = (double[])value;
				return ;
			}
			if (variableName=="player_n_Time") {
				this.player_n_Time = (double[][][])value;
				return ;
			}
			if (variableName=="vdouble__319") {
				this.vdouble__319 = (double[])value;
				return ;
			}
			if (variableName=="vdouble__320") {
				this.vdouble__320 = (double[])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'skills_prior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Skills_priorMarginal()
		{
			return this.skills_prior_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'team2wins' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[]> Team2winsMarginal()
		{
			return this.team2wins_marginal_F;
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__319' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__319Marginal()
		{
			return this.vdouble__319_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__320' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__320Marginal()
		{
			return this.vdouble__320_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__321' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__321Marginal()
		{
			return ArrayHelper.MakeCopy<DistributionStructArray<Gaussian,double>>(this.vdouble__321_marginal_F);
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		/// <summary>Event that is fired when a message that is being monitored is updated.</summary>
		public event EventHandler<MessageUpdatedEventArgs> MessageUpdated;
		#endregion

	}

}
